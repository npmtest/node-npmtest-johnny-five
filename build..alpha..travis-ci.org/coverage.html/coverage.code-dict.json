{"/home/travis/build/npmtest/node-npmtest-johnny-five/test.js":"/* istanbul instrument in package npmtest_johnny_five */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        switch (local.modeJs) {\n        // re-init local from window.local\n        case 'browser':\n            local = local.global.utility2.objectSetDefault(\n                local.global.utility2_rollup || local.global.local,\n                local.global.utility2\n            );\n            break;\n        // re-init local from example.js\n        case 'node':\n            local = (local.global.utility2_rollup || require('utility2'))\n                .requireExampleJsFromReadme();\n            break;\n        }\n        // export local\n        local.global.local = local;\n    }());\n\n\n\n    // run shared js-env code - function\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - function\n    case 'browser':\n        break;\n\n\n\n    // run node js-env code - function\n    case 'node':\n        break;\n    }\n\n\n\n    // run shared js-env code - post-init\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - post-init\n    case 'browser':\n        local.testCase_browser_nullCase = local.testCase_browser_nullCase || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test browsers's null-case handling-behavior-behavior\n         */\n            onError(null, options);\n        };\n\n        // run tests\n        local.nop(local.modeTest &&\n            document.querySelector('#testRunButton1') &&\n            document.querySelector('#testRunButton1').click());\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        local.testCase_buildApidoc_default = local.testCase_buildApidoc_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApidoc's default handling-behavior-behavior\n         */\n            options = { modulePathList: module.paths };\n            local.buildApidoc(options, onError);\n        };\n\n        local.testCase_buildApp_default = local.testCase_buildApp_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApp's default handling-behavior-behavior\n         */\n            local.testCase_buildReadme_default(options, local.onErrorThrow);\n            local.testCase_buildLib_default(options, local.onErrorThrow);\n            local.testCase_buildTest_default(options, local.onErrorThrow);\n            local.testCase_buildCustomOrg_default(options, local.onErrorThrow);\n            options = [];\n            local.buildApp(options, onError);\n        };\n\n        local.testCase_buildCustomOrg_default = local.testCase_buildCustomOrg_default ||\n            function (options, onError) {\n            /*\n             * this function will test buildCustomOrg's default handling-behavior\n             */\n                options = {};\n                local.buildCustomOrg(options, onError);\n            };\n\n        local.testCase_buildLib_default = local.testCase_buildLib_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildLib's default handling-behavior\n         */\n            options = {};\n            local.buildLib(options, onError);\n        };\n\n        local.testCase_buildReadme_default = local.testCase_buildReadme_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildReadme's default handling-behavior-behavior\n         */\n            options = {};\n            local.buildReadme(options, onError);\n        };\n\n        local.testCase_buildTest_default = local.testCase_buildTest_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildTest's default handling-behavior\n         */\n            options = {};\n            local.buildTest(options, onError);\n        };\n\n        local.testCase_webpage_default = local.testCase_webpage_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test webpage's default handling-behavior\n         */\n            options = { modeCoverageMerge: true, url: local.serverLocalHost + '?modeTest=1' };\n            local.browserTest(options, onError);\n        };\n\n        // run test-server\n        local.testRunServer(local);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-johnny-five/lib.npmtest_johnny_five.js":"/* istanbul instrument in package npmtest_johnny_five */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || local;\n        // init lib\n        local.local = local.npmtest_johnny_five = local;\n        // init exports\n        if (local.modeJs === 'browser') {\n            local.global.utility2_npmtest_johnny_five = local;\n        } else {\n            module.exports = local;\n            module.exports.__dirname = __dirname;\n            module.exports.module = module;\n        }\n    }());\n}());\n","/home/travis/build/npmtest/node-npmtest-johnny-five/example.js":"/*\nexample.js\n\nquickstart example\n\ninstruction\n    1. save this script as example.js\n    2. run the shell command:\n        $ npm install npmtest-johnny-five && PORT=8081 node example.js\n    3. play with the browser-demo on http://127.0.0.1:8081\n*/\n\n\n\n/* istanbul instrument in package npmtest_johnny_five */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || (local.modeJs === 'browser'\n            ? local.global.utility2_npmtest_johnny_five\n            : global.utility2_moduleExports);\n        // export local\n        local.global.local = local;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // post-init\n    // run browser js-env code - post-init\n    /* istanbul ignore next */\n    case 'browser':\n        local.testRunBrowser = function (event) {\n            if (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('onreset'))) {\n                // reset output\n                Array.from(\n                    document.querySelectorAll('body > .resettable')\n                ).forEach(function (element) {\n                    switch (element.tagName) {\n                    case 'INPUT':\n                    case 'TEXTAREA':\n                        element.value = '';\n                        break;\n                    default:\n                        element.textContent = '';\n                    }\n                });\n            }\n            switch (event && event.currentTarget && event.currentTarget.id) {\n            case 'testRunButton1':\n                // show tests\n                if (document.querySelector('#testReportDiv1').style.display === 'none') {\n                    document.querySelector('#testReportDiv1').style.display = 'block';\n                    document.querySelector('#testRunButton1').textContent =\n                        'hide internal test';\n                    local.modeTest = true;\n                    local.testRunDefault(local);\n                // hide tests\n                } else {\n                    document.querySelector('#testReportDiv1').style.display = 'none';\n                    document.querySelector('#testRunButton1').textContent = 'run internal test';\n                }\n                break;\n            // custom-case\n            default:\n                break;\n            }\n            if (document.querySelector('#inputTextareaEval1') && (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('oneval')))) {\n                // try to eval input-code\n                try {\n                    /*jslint evil: true*/\n                    eval(document.querySelector('#inputTextareaEval1').value);\n                } catch (errorCaught) {\n                    console.error(errorCaught);\n                }\n            }\n        };\n        // log stderr and stdout to #outputTextareaStdout1\n        ['error', 'log'].forEach(function (key) {\n            console[key + '_original'] = console[key];\n            console[key] = function () {\n                var element;\n                console[key + '_original'].apply(console, arguments);\n                element = document.querySelector('#outputTextareaStdout1');\n                if (!element) {\n                    return;\n                }\n                // append text to #outputTextareaStdout1\n                element.value += Array.from(arguments).map(function (arg) {\n                    return typeof arg === 'string'\n                        ? arg\n                        : JSON.stringify(arg, null, 4);\n                }).join(' ') + '\\n';\n                // scroll textarea to bottom\n                element.scrollTop = element.scrollHeight;\n            };\n        });\n        // init event-handling\n        ['change', 'click', 'keyup'].forEach(function (event) {\n            Array.from(document.querySelectorAll('.on' + event)).forEach(function (element) {\n                element.addEventListener(event, local.testRunBrowser);\n            });\n        });\n        // run tests\n        local.testRunBrowser();\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        // export local\n        module.exports = local;\n        // require modules\n        local.fs = require('fs');\n        local.http = require('http');\n        local.url = require('url');\n        // init assets\n        local.assetsDict = local.assetsDict || {};\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.index.template.html'] = '\\\n<!doctype html>\\n\\\n<html lang=\"en\">\\n\\\n<head>\\n\\\n<meta charset=\"UTF-8\">\\n\\\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\\n\\\n<title>{{env.npm_package_name}} (v{{env.npm_package_version}})</title>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n    box-sizing: false,\\n\\\n    universal-selector: false\\n\\\n*/\\n\\\n* {\\n\\\n    box-sizing: border-box;\\n\\\n}\\n\\\nbody {\\n\\\n    background: #dde;\\n\\\n    font-family: Arial, Helvetica, sans-serif;\\n\\\n    margin: 2rem;\\n\\\n}\\n\\\nbody > * {\\n\\\n    margin-bottom: 1rem;\\n\\\n}\\n\\\n.utility2FooterDiv {\\n\\\n    margin-top: 20px;\\n\\\n    text-align: center;\\n\\\n}\\n\\\n</style>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n*/\\n\\\ntextarea {\\n\\\n    font-family: monospace;\\n\\\n    height: 10rem;\\n\\\n    width: 100%;\\n\\\n}\\n\\\ntextarea[readonly] {\\n\\\n    background: #ddd;\\n\\\n}\\n\\\n</style>\\n\\\n</head>\\n\\\n<body>\\n\\\n<!-- utility2-comment\\n\\\n<div id=\"ajaxProgressDiv1\" style=\"background: #d00; height: 2px; left: 0; margin: 0; padding: 0; position: fixed; top: 0; transition: background 0.5s, width 1.5s; width: 25%;\"></div>\\n\\\nutility2-comment -->\\n\\\n<h1>\\n\\\n<!-- utility2-comment\\n\\\n    <a\\n\\\n        {{#if env.npm_package_homepage}}\\n\\\n        href=\"{{env.npm_package_homepage}}\"\\n\\\n        {{/if env.npm_package_homepage}}\\n\\\n        target=\"_blank\"\\n\\\n    >\\n\\\nutility2-comment -->\\n\\\n        {{env.npm_package_name}} (v{{env.npm_package_version}})\\n\\\n<!-- utility2-comment\\n\\\n    </a>\\n\\\nutility2-comment -->\\n\\\n</h1>\\n\\\n<h3>{{env.npm_package_description}}</h3>\\n\\\n<!-- utility2-comment\\n\\\n<h4><a download href=\"assets.app.js\">download standalone app</a></h4>\\n\\\n<button class=\"onclick onreset\" id=\"testRunButton1\">run internal test</button><br>\\n\\\n<div id=\"testReportDiv1\" style=\"display: none;\"></div>\\n\\\nutility2-comment -->\\n\\\n\\n\\\n\\n\\\n\\n\\\n<label>stderr and stdout</label>\\n\\\n<textarea class=\"resettable\" id=\"outputTextareaStdout1\" readonly></textarea>\\n\\\n<!-- utility2-comment\\n\\\n{{#if isRollup}}\\n\\\n<script src=\"assets.app.js\"></script>\\n\\\n{{#unless isRollup}}\\n\\\nutility2-comment -->\\n\\\n<script src=\"assets.utility2.rollup.js\"></script>\\n\\\n<script src=\"jsonp.utility2._stateInit?callback=window.utility2._stateInit\"></script>\\n\\\n<script src=\"assets.npmtest_johnny_five.rollup.js\"></script>\\n\\\n<script src=\"assets.example.js\"></script>\\n\\\n<script src=\"assets.test.js\"></script>\\n\\\n<!-- utility2-comment\\n\\\n{{/if isRollup}}\\n\\\nutility2-comment -->\\n\\\n<div class=\"utility2FooterDiv\">\\n\\\n    [ this app was created with\\n\\\n    <a href=\"https://github.com/kaizhu256/node-utility2\" target=\"_blank\">utility2</a>\\n\\\n    ]\\n\\\n</div>\\n\\\n</body>\\n\\\n</html>\\n\\\n';\n        /* jslint-ignore-end */\n        if (local.templateRender) {\n            local.assetsDict['/'] = local.templateRender(\n                local.assetsDict['/assets.index.template.html'],\n                {\n                    env: local.objectSetDefault(local.env, {\n                        npm_package_description: 'the greatest app in the world!',\n                        npm_package_name: 'my-app',\n                        npm_package_nameAlias: 'my_app',\n                        npm_package_version: '0.0.1'\n                    })\n                }\n            );\n        } else {\n            local.assetsDict['/'] = local.assetsDict['/assets.index.template.html']\n                .replace((/\\{\\{env\\.(\\w+?)\\}\\}/g), function (match0, match1) {\n                    // jslint-hack\n                    String(match0);\n                    switch (match1) {\n                    case 'npm_package_description':\n                        return 'the greatest app in the world!';\n                    case 'npm_package_name':\n                        return 'my-app';\n                    case 'npm_package_nameAlias':\n                        return 'my_app';\n                    case 'npm_package_version':\n                        return '0.0.1';\n                    }\n                });\n        }\n        // run the cli\n        if (local.global.utility2_rollup || module !== require.main) {\n            break;\n        }\n        local.assetsDict['/assets.example.js'] =\n            local.assetsDict['/assets.example.js'] ||\n            local.fs.readFileSync(__filename, 'utf8');\n        // bug-workaround - long $npm_package_buildCustomOrg\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.npmtest_johnny_five.rollup.js'] =\n            local.assetsDict['/assets.npmtest_johnny_five.rollup.js'] ||\n            local.fs.readFileSync(\n                local.npmtest_johnny_five.__dirname + '/lib.npmtest_johnny_five.js',\n                'utf8'\n            ).replace((/^#!/), '//');\n        /* jslint-ignore-end */\n        local.assetsDict['/favicon.ico'] = local.assetsDict['/favicon.ico'] || '';\n        // if $npm_config_timeout_exit exists,\n        // then exit this process after $npm_config_timeout_exit ms\n        if (Number(process.env.npm_config_timeout_exit)) {\n            setTimeout(process.exit, Number(process.env.npm_config_timeout_exit));\n        }\n        // start server\n        if (local.global.utility2_serverHttp1) {\n            break;\n        }\n        process.env.PORT = process.env.PORT || '8081';\n        console.error('server starting on port ' + process.env.PORT);\n        local.http.createServer(function (request, response) {\n            request.urlParsed = local.url.parse(request.url);\n            if (local.assetsDict[request.urlParsed.pathname] !== undefined) {\n                response.end(local.assetsDict[request.urlParsed.pathname]);\n                return;\n            }\n            response.statusCode = 404;\n            response.end();\n        }).listen(process.env.PORT);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-johnny-five/node_modules/johnny-five/lib/johnny-five.js":"/* istanbul ignore if */\nif (!Array.from || !Object.assign || !Map) {\n  require(\"es6-shim\");\n}\n\n/* istanbul ignore if */\nif (!Array.prototype.includes) {\n  require(\"./array-includes-shim\");\n}\n\nmodule.exports = {\n  // extract-start:apinames\n  Accelerometer: require(\"./accelerometer\"),\n  Animation: require(\"./animation\"),\n  Altimeter: require(\"./altimeter\"),\n  Barometer: require(\"./barometer\"),\n  Board: require(\"./board\"),\n  Button: require(\"./button\"),\n  Color: require(\"./color\"),\n  Collection: require(\"./mixins/collection\"),\n  Compass: require(\"./compass\"),\n  ESC: require(\"./esc\"),\n  Expander: require(\"./expander\"),\n  Fn: require(\"./fn\"),\n  GPS: require(\"./gps\"),\n  Gripper: require(\"./gripper\"),\n  Gyro: require(\"./gyro\"),\n  Hygrometer: require(\"./hygrometer\"),\n  IMU: require(\"./imu\"),\n  Keypad: require(\"./keypad\"),\n  LCD: require(\"./lcd\"),\n  Led: require(\"./led\"),\n  LedControl: require(\"./led/ledcontrol\"),\n  Light: require(\"./light\"),\n  Joystick: require(\"./joystick\"),\n  Motion: require(\"./motion\"),\n  Motor: require(\"./motor\"),\n  Piezo: require(\"./piezo\"),\n  Ping: require(\"./ping\"),\n  Pin: require(\"./pin\"),\n  Proximity: require(\"./proximity\"),\n  Relay: require(\"./relay\"),\n  Repl: require(\"./repl\"),\n  Sensor: require(\"./sensor\"),\n  Servo: require(\"./servo\"),\n  ShiftRegister: require(\"./shiftregister\"),\n  Sonar: require(\"./sonar\"),\n  Stepper: require(\"./stepper\"),\n  Switch: require(\"./switch\"),\n  Thermometer: require(\"./thermometer\"),\n  Wii: require(\"./wii\")\n  // extract-end:apinames\n};\n\n// Customized constructors\n//\n//\nmodule.exports.Board.Virtual = function(opts) {\n  var temp;\n\n  if (opts instanceof module.exports.Expander) {\n    temp = {\n      io: opts\n    };\n  } else {\n    temp = opts;\n  }\n\n  return new module.exports.Board(\n    Object.assign({}, {\n      repl: false,\n      debug: false,\n      sigint: false\n    }, temp)\n  );\n};\n\nmodule.exports.Multi = module.exports.IMU;\n\nmodule.exports.Analog = function(opts) {\n  return new module.exports.Sensor(opts);\n};\n\nmodule.exports.Digital = function(opts) {\n  var pin;\n\n  if (typeof opts === \"number\" || typeof opts === \"string\") {\n    pin = opts;\n    opts = {\n      type: \"digital\",\n      pin: pin\n    };\n  } else {\n    opts.type = opts.type || \"digital\";\n  }\n\n  return new module.exports.Sensor(opts);\n};\n\nmodule.exports.Sensor.Analog = module.exports.Analog;\nmodule.exports.Sensor.Digital = module.exports.Digital;\n\n/**\n * @deprecated Will be deleted in version 1.0.0. Use Thermometer instead.\n */\nmodule.exports.Temperature = module.exports.Thermometer;\n\n\n/**\n * @deprecated Will be deleted in version 1.0.0. Use Motion or Proximity instead.\n */\nmodule.exports.IR = function() {\n  throw new Error(\"IR has been removed. Use Motion or Proximity instead.\");\n};\n\n/**\n * @deprecated Will be deleted in version 1.0.0. Use Proximity instead.\n */\nmodule.exports.IR.Distance = function() {\n  throw new Error(\"IR.Distance has been removed. Use Proximity instead.\");\n};\n\n/**\n * @deprecated Will be deleted in version 1.0.0. Use Proximity instead.\n */\nmodule.exports.IR.Proximity = function() {\n  throw new Error(\"IR.Proximity has been removed. Use Proximity instead.\");\n};\n\n/**\n * @deprecated Will be deleted in version 1.0.0. Use Motion instead.\n */\nmodule.exports.IR.Motion = function() {\n  throw new Error(\"IR.Motion has been removed. Use Motion instead.\");\n};\n\n// TODO: Eliminate .Array for 1.0.0\nmodule.exports.IR.Reflect = {};\nmodule.exports.IR.Reflect.Array = require(\"./reflectancearray\");\nmodule.exports.IR.Reflect.Collection = module.exports.IR.Reflect.Array;\n\nmodule.exports.Luxmeter = function(options) {\n  return new module.exports.Light(options);\n};\n\nmodule.exports.Magnetometer = function(options) {\n  return new module.exports.Compass(options);\n};\n\n// Short-handing, Aliases\nmodule.exports.Boards = module.exports.Board.Collection;\nmodule.exports.Buttons = module.exports.Button.Collection;\nmodule.exports.ESCs = module.exports.ESC.Collection;\nmodule.exports.Leds = module.exports.Led.Collection;\nmodule.exports.Led.RGBs = module.exports.Led.RGB.Collection;\nmodule.exports.Motors = module.exports.Motor.Collection;\nmodule.exports.Pins = module.exports.Pin.Collection;\nmodule.exports.Relays = module.exports.Relay.Collection;\nmodule.exports.Sensors = module.exports.Sensor.Collection;\nmodule.exports.Servos = module.exports.Servo.Collection;\nmodule.exports.Switches = module.exports.Switch.Collection;\n\n// Direct Alias\nmodule.exports.Touchpad = module.exports.Keypad;\n\n// Back Compat\nmodule.exports.Nunchuk = module.exports.Wii.Nunchuk;\n","/home/travis/build/npmtest/node-npmtest-johnny-five/node_modules/johnny-five/lib/accelerometer.js":"var Board = require(\"./board\");\nvar Expander = require(\"./expander\");\nvar Emitter = require(\"events\").EventEmitter;\nvar util = require(\"util\");\nvar Fn = require(\"./fn\");\n\nvar constrain = Fn.constrain;\nvar fma = Fn.fma;\nvar int16 = Fn.int16;\nvar sum = Fn.sum;\nvar toFixed = Fn.toFixed;\n\nvar priv = new Map();\nvar calibrationSize = 10;\n\nvar aX = \"x\";\nvar aY = \"y\";\nvar aZ = \"z\";\nvar axes = [aX, aY, aZ];\n\nfunction analogInitialize(opts, dataHandler) {\n  var state = priv.get(this);\n  var dataPoints = {};\n\n  state.zeroV = opts.zeroV || this.DEFAULTS.zeroV;\n  state.sensitivity = opts.sensitivity || this.DEFAULTS.sensitivity;\n\n  this.pins.forEach(function(pin, index) {\n    this.io.pinMode(pin, this.io.MODES.ANALOG);\n    this.io.analogRead(pin, function(data) {\n      var axis = axes[index];\n      dataPoints[axis] = data;\n      dataHandler(dataPoints);\n    }.bind(this));\n  }, this);\n}\n\nfunction analogToGravity(raw, axis) {\n  var state = priv.get(this);\n  var zeroV = state.zeroV;\n\n  if (Array.isArray(zeroV) && zeroV.length > 0) {\n    var axisIndex = axes.indexOf(axis);\n    zeroV = zeroV[axisIndex || 0];\n  }\n\n  return (raw - zeroV) / state.sensitivity;\n}\n\nvar Controllers = {\n  ANALOG: {\n    DEFAULTS: {\n      value: {\n        zeroV: 478,\n        sensitivity: 96\n      }\n    },\n    initialize: {\n      value: analogInitialize\n    },\n    toGravity: {\n      value: analogToGravity\n    }\n  },\n  // http://www.invensense.com/mems/gyro/mpu6050.html\n  MPU6050: {\n    initialize: {\n      value: function(opts, dataHandler) {\n        var IMU = require(\"./imu\");\n        var driver = IMU.Drivers.get(this.board, \"MPU6050\", opts);\n        var state = priv.get(this);\n\n        state.sensitivity = opts.sensitivity || 16384;\n\n        driver.on(\"data\", function(data) {\n          dataHandler(data.accelerometer);\n        });\n      }\n    },\n    toGravity: {\n      value: function(raw) {\n        var state = priv.get(this);\n        return raw / state.sensitivity;\n      }\n    }\n  },\n  BNO055: {\n    initialize: {\n      value: function(opts, dataHandler) {\n        var IMU = require(\"./imu\");\n        var driver = IMU.Drivers.get(this.board, \"BNO055\", opts);\n        var state = priv.get(this);\n\n        // AF p.31, Table 3-17: Accelerometer Unit settings\n        state.sensitivity = 100;\n\n        driver.on(\"data\", function(data) {\n          dataHandler(data.accelerometer);\n        });\n      }\n    },\n    toGravity: {\n      value: function(raw) {\n        var state = priv.get(this);\n        return raw / state.sensitivity;\n      }\n    }\n  },\n\n  ADXL335: {\n    DEFAULTS: {\n      value: {\n        zeroV: 330,\n        sensitivity: 66.5\n      }\n    },\n    initialize: {\n      value: analogInitialize\n    },\n    toGravity: {\n      value: analogToGravity\n    }\n  },\n\n  // http://www.analog.com/media/en/technical-documentation/data-sheets/ADXL345.pdf\n  ADXL345: {\n    ADDRESSES: {\n      value: [0x53]\n    },\n    REGISTER: {\n      value: {\n        // Page 23\n        // REGISTER MAP\n        //\n        POWER: 0x2D,\n        // 0x31 49 DATA_FORMAT R/W 00000000 Data format control\n        DATA_FORMAT: 0x31,\n        // 0x32 50 DATAX0 R 00000000 X-Axis Data 0\n        DATAX0: 0x32\n      }\n    },\n    initialize: {\n      value: function(opts, dataHandler) {\n        var READLENGTH = 6;\n        var address = opts.address || this.ADDRESSES[0];\n        var state = priv.get(this);\n\n        opts.address = address;\n\n        this.io.i2cConfig(opts);\n\n        // Standby mode\n        this.io.i2cWrite(address, this.REGISTER.POWER, 0);\n\n        // Enable measurements\n        this.io.i2cWrite(address, this.REGISTER.POWER, 8);\n\n        /*\n\n          Page 26\n\n          Register 0x31—DATA_FORMAT (Read/Write)\n\n          | 7 | 6 | 5 | 4 | 3 | 2 | 1 | 0 |\n          | - | - | - | - | - | - | - | - |\n          | T | S | I | - | F | J | R     |\n\n          T: SELF_TEST\n          S: SPI\n          I: INT_INVERT\n          -:-\n          F: FULL_RES\n          J: JUSTIFY\n          R: RANGE\n\n          Range notes: https://github.com/rwaldron/johnny-five/issues/1135#issuecomment-219541346\n\n          +/- 16g  0b11\n          +/- 8g   0b10\n          +/- 4g   0b01\n          +/- 2g   0b00\n\n\n          Start with FULL_RES bit on\n\n          0b00001000 = 0x08 = 8\n        */\n        var format = 0x08;\n\n        /*\n          Determine range\n\n          0b00000000 = 0 = ±2g\n          0b00000001 = 1 = ±4g\n          0b00000010 = 2 = ±8g\n          0b00000011 = 3 = ±16g\n        */\n        var range = ({ 2: 0, 4: 1, 8: 2, 16: 3 })[opts.range || 2];\n\n        /*\n          Page 4\n          Sensitivity at              Min   Typ  Max\n          ±2 g, 10-bit resolution     230   256  282\n          ±4 g, 10-bit resolution     115   128  141\n          ±8 g, 10-bit resolution      57    64   71\n          ±16 g, 10-bit resolution     29    32   35\n        */\n        state.sensitivity = [\n          256,\n          128,\n          64,\n          32,\n        ][range];\n\n\n        // Merge the format and range bits to set the DATA_FORMAT\n        this.io.i2cWrite(address, this.REGISTER.DATA_FORMAT, format | range);\n\n        this.io.i2cRead(address, this.REGISTER.DATAX0, READLENGTH, function(data) {\n          dataHandler({\n            x: int16(data[1], data[0]),\n            y: int16(data[3], data[2]),\n            z: int16(data[5], data[4])\n          });\n        });\n      },\n    },\n    toGravity: {\n      value: function(raw) {\n        var state = priv.get(this);\n        return raw / state.sensitivity;\n      }\n    }\n  },\n  MMA7361: {\n    DEFAULTS: {\n      value: {\n        zeroV: [336, 372, 287],\n        sensitivity: 170\n      }\n    },\n    initialize: {\n      value: function(opts, dataHandler) {\n        var state = priv.get(this);\n\n        /* istanbul ignore else */\n        if (opts.sleepPin !== undefined) {\n          state.sleepPin = opts.sleepPin;\n          this.io.pinMode(state.sleepPin, 1);\n          this.io.digitalWrite(state.sleepPin, 1);\n        }\n\n        analogInitialize.call(this, opts, dataHandler);\n      }\n    },\n    toGravity: {\n      value: analogToGravity\n    },\n    enabledChanged: {\n      value: function(value) {\n        var state = priv.get(this);\n\n        /* istanbul ignore else */\n        if (state.sleepPin !== undefined) {\n          this.io.digitalWrite(state.sleepPin, value ? 1 : 0);\n        }\n      }\n    }\n  },\n\n  // https://cdn.sparkfun.com/datasheets/Sensors/Accelerometers/MMA8452Q-rev8.1.pdf\n  // http://cache.freescale.com/files/sensors/doc/app_note/AN4076.pdf?fpsp=1\n  // http://cache.freescale.com/files/sensors/doc/app_note/AN4072.pdf\n  MMA8452: {\n    ADDRESSES: {\n      value: [0x1D]\n    },\n    REGISTER: {\n      value: {\n        // Page 18\n        // 6. Register Descriptions\n        STATUS: 0x00,\n        OUT_X_MSB: 0x01,\n        XYZ_DATA_CFG: 0x0E,\n        PULSE_CFG: 0x21,\n        PULSE_SRC: 0x22,\n        PULSE_THSX: 0x23,\n        PULSE_THSY: 0x24,\n        PULSE_THSZ: 0x25,\n        PULSE_TMLT: 0x26,\n        PULSE_LTCY: 0x27,\n        PULSE_WIND: 0x28,\n        CTRL_REG1: 0x2A,\n        CTRL_REG4: 0x2E,\n        CTRL_REG5: 0x2F,\n      }\n    },\n    initialize: {\n      value: function(opts, dataHandler) {\n        var state = priv.get(this);\n        var address = opts.address || this.ADDRESSES[0];\n\n        opts.address = address;\n\n        // TODO: make user definable.\n        // 0b000 800Hz\n        // 0b001 400Hz\n        // 0b010 200Hz\n        // 0b011 100Hz\n        // 0b100 50Hz\n        // 0b101 12Hz\n        // 0b110 6Hz\n\n        var rates = [ 800,  400,  200,  100,  50,  12,  6, ];\n        var odr = rates.indexOf(opts.odr || 800);\n        var scale = opts.range || 2;\n        var fsr = ({ 2: 0, 4: 1, 8: 2 })[scale];\n\n        opts.taps = opts.taps || {\n          x: false,\n          y: false,\n          z: true,\n        };\n\n        var taps = {\n          x: opts.taps.x ? 0x08 : 0x80,\n          y: opts.taps.y ? 0x08 : 0x80,\n          z: opts.taps.z ? 0x08 : 0x80,\n        };\n\n        state.scale = scale;\n\n        var computed = {\n          x: null,\n          y: null,\n          z: null,\n        };\n\n        this.io.i2cConfig(\n          Object.assign(opts, {\n            settings: {\n              stopTX: false\n            }\n          })\n        );\n\n        if (odr === -1) {\n          throw new RangeError(\"Invalid odr. Expected one of: 800,  400,  200,  100,  50,  12,  6\");\n        }\n\n        /*\n          Initial CTRL_REG1 State\n\n          11000010 = 194 = 0xC2 -> ?\n          00000010 = 8 = 0x08\n          ^--------- ASLP_RATE1\n           ^-------- ASLP_RATE0\n            ^------- DR2\n             ^------ DR1\n              ^----- DR0\n               ^---- Noise\n                ^--- Fast Read\n                 ^-- Standby Mode\n        */\n\n        var config = 0x08;\n\n        /*\n          Page 5 (AN4076)\n          4.0 Setting the Data Rate\n\n          Set ODR\n\n          Shift the odr bits into place.\n\n          Default: 800Hz\n\n          11000010 = 194 = 0xC2 -> ?\n          00000010 = 8 = 0x08\n            ^^^----- DR2, DR1, DR0: 000\n        */\n        config |= odr << 3;\n\n        /*\n          Enter Standby Mode\n\n          11000010 = 194 = 0xC2 -> ?\n                ^--- Fast Read\n                 ^-- Standby Mode\n\n          00000010 = 8 = 0x08\n                ^--- Fast Read\n                 ^-- Standby Mode\n\n        */\n\n        this.io.i2cWriteReg(address, this.REGISTER.CTRL_REG1, config);\n\n        /*\n          Set FSR\n\n          Default: ±2g\n\n          00000000 = 0 = 0x00 ()\n                ^^----- FS1, FS2\n        */\n        this.io.i2cWriteReg(address, this.REGISTER.XYZ_DATA_CFG, fsr);\n\n        var temp = 0;\n\n        /*\n          Page 10 (AN4072)\n          4.2 Registers 0x23 - 0x25 PULSE_THSX, Y, Z\n              Pulse Threshold for X, Y and Z Registers\n\n          0x80 = B7 is HIGH\n          10000000\n          If B7 is HIGH, do not enable\n        */\n        if (!(taps.x & 0x80)) {\n          // 00000011\n          temp |= 0x03;\n          this.io.i2cWriteReg(address, this.REGISTER.PULSE_THSX, taps.x);\n        }\n\n        if (!(taps.y & 0x80)) {\n          // 00001100\n          temp |= 0x0C;\n          this.io.i2cWriteReg(address, this.REGISTER.PULSE_THSY, taps.y);\n        }\n\n        if (!(taps.z & 0x80)) {\n          // 00110000\n          temp |= 0x30;\n          this.io.i2cWriteReg(address, this.REGISTER.PULSE_THSZ, taps.z);\n        }\n\n        /*\n          Page 11, 12, 13 (AN4072)\n\n          Configure Tap Axis'\n\n          Table 1. Register 0x21 PULSE_CFG Register (Read/Write) and Description\n\n          | Tap Enable |  7  |  6  |  5  |  4  |  3  |  2  |  1  |  0  |\n          | ---------- | --- | --- | --- | --- | --- | --- | --- | --- |\n          |            | DPA | ELE | ZD  | ZS  | YD  | YS  | XD  | XS  |\n          | Single     |  0  |  1  |  0  |  1  |  0  |  1  |  0  |  1  |\n          | Double     |  0  |  1  |  1  |  0  |  1  |  0  |  1  |  0  |\n          | Both       |  0  |  1  |  1  |  1  |  1  |  1  |  1  |  1  |\n\n\n          In the default case, `temp | 0x40` will be:\n\n          01110000 = 112 = 0x70\n\n          Latch On\n          ZD On\n          ZS On\n\n        */\n\n        this.io.i2cWriteReg(address, this.REGISTER.PULSE_CFG, temp | 0x40);\n\n        /*\n          Set TIME LIMIT for tap detection\n\n          60ms / 800Hz = 60ms / 1.25ms = 48 (counts) = 0x30\n          80ms / 800Hz = 80ms / 1.25ms = 64 (counts) = 0x40\n        */\n        this.io.i2cWriteReg(address, this.REGISTER.PULSE_TMLT, 60 / (1000 / rates[odr]));\n        /*\n          Set the PULSE LATENCY.\n\n          This is the time that must pass after the first\n          tap, but within the PULSE WINDOW for a double tap to register.\n\n          200ms / 800Hz = 200ms / 1.25ms = 160 (counts) = 0xA0\n        */\n        this.io.i2cWriteReg(address, this.REGISTER.PULSE_LTCY, 200 / (1000 / rates[odr]));\n\n        /*\n          Set the PULSE WINDOW.\n\n          This is the maximum interval of time to elapse after the latency\n          interval, for which the second pulse must occur for double taps.\n\n          The maximum allowed time:\n\n          800Hz * 255 = 1.25ms * 255 = 318ms\n        */\n        this.io.i2cWriteReg(address, this.REGISTER.PULSE_WIND, 0xFF);\n\n        /*\n          Leave Standby Mode\n\n          11000011 = 195 = 0xC3\n          00000011 = 3 = 0x03\n                ^--- Fast Read\n                 ^-- Standby Mode\n        */\n\n        config |= 0x01;\n\n        this.io.i2cWriteReg(address, this.REGISTER.CTRL_REG1, config);\n\n\n        this.io.i2cRead(address, this.REGISTER.STATUS, 7, function(data) {\n          var status = (data.shift() & 0x08) >>> 3;\n\n          /* istanbul ignore else */\n          if (status) {\n            // Page 9 (AN4076)\n            //\n            // 7.0 14-bit, 12-bit or 10-bit Data Streaming and Data Conversions\n            computed.x = int16(data[0], data[1]) >> 4;\n            computed.y = int16(data[2], data[3]) >> 4;\n            computed.z = int16(data[4], data[5]) >> 4;\n\n            dataHandler(computed);\n          }\n        }.bind(this));\n\n        this.io.i2cRead(address, this.REGISTER.PULSE_SRC, 1, function(data) {\n          var status = data[0];\n          var tap = status & 0x7F;\n\n          /* istanbul ignore else */\n          if (status & 0x80) {\n            this.emit(\"tap\");\n\n            // Single Tap\n            /* istanbul ignore else */\n            if ((tap >> 2) & 0x01) {\n              this.emit(\"tap:single\");\n\n              // Double Tap (must be both S and D bits)\n              /* istanbul ignore else */\n              if ((tap >> 3) & 0x01) {\n                this.emit(\"tap:double\");\n              }\n            }\n          }\n        }.bind(this));\n      },\n    },\n    toGravity: {\n      value: function(raw) {\n        var state = priv.get(this);\n        // return raw / ((1 << 11) * state.scale);\n        return raw / ((1 << 11) * state.scale);\n      }\n    }\n  },\n  MMA7660: {\n    ADDRESSES: {\n      value: [0x4C]\n    },\n    REGISTER: {\n      value: {\n        READREGISTER: 0x00,\n        RATE: 0x08,\n        MODE: 0x07,\n      }\n    },\n    initialize: {\n      value: function(opts, dataHandler) {\n        var READLENGTH = 3;\n        var address = opts.address || this.ADDRESSES[0];\n        var state = priv.get(this);\n\n        state.sensitivity = 21.33;\n\n        opts.address = address;\n\n        this.io.i2cConfig(opts);\n\n        // http://www.freescale.com.cn/files/sensors/doc/data_sheet/MMA7660FC.pdf?fpsp=1\n        //\n        // Standby mode\n        this.io.i2cWrite(address, this.REGISTER.MODE, 0x00);\n\n        // Sample Rate ()\n        this.io.i2cWrite(address, this.REGISTER.RATE, 0x07);\n\n        // Active Mode\n        this.io.i2cWrite(address, this.REGISTER.MODE, 0x01);\n\n        this.io.i2cRead(address, this.REGISTER.READREGISTER, READLENGTH, function(data) {\n          dataHandler({\n            // Shift off the sign bits\n            // This solution is used in\n            // https://github.com/intel-iot-devkit/upm/blob/master/src/mma7660/mma7660.cxx\n            x: (data[0] << 2) / 4,\n            y: (data[1] << 2) / 4,\n            z: (data[2] << 2) / 4,\n          });\n        });\n      },\n    },\n    toGravity: {\n      value: function(raw) {\n        var state = priv.get(this);\n        return raw / state.sensitivity;\n      }\n    }\n  },\n\n  ESPLORA: {\n    DEFAULTS: {\n      value: {\n        zeroV: [320, 330, 310],\n        sensitivity: 170\n      }\n    },\n    initialize: {\n      value: function(opts, dataHandler) {\n        this.pins = [5, 11, 6];\n        analogInitialize.call(this, opts, dataHandler);\n      }\n    },\n    toGravity: {\n      value: analogToGravity\n    }\n  },\n\n  // https://cdn-shop.adafruit.com/datasheets/LIS3DHappnote.pdf\n  LIS3DH: {\n    ADDRESSES: {\n      value: [0x18]\n    },\n    REGISTER: {\n      value: {\n        OUT_X_L: 0x28,\n        CTRL_REG1: 0x20,\n        CTRL_REG2: 0x21,\n        CTRL_REG3: 0x22,\n        CTRL_REG4: 0x23,\n        CTRL_REG5: 0x24,\n\n        TEMP_CFG_REG: 0x1F,\n\n        CLICK_CFG: 0x38,\n        CLICK_SRC: 0x39,\n        CLICK_THS: 0x3A,\n        TIME_LIMIT: 0x3B,\n        TIME_LATENCY: 0x3C,\n        TIME_WINDOW: 0x3D,\n      }\n    },\n    initialize: {\n      value: function(opts, dataHandler) {\n        var state = priv.get(this);\n        var address = opts.address || 0x18;\n\n        // 2G  = 0b00\n        // 4G  = 0b01\n        // 8G  = 0b10\n        // 16G = 0b11\n        var range = ({\n          2: 0,\n          4: 1,\n          8: 2,\n          16: 3\n        })[opts.range || 4];\n\n        /* istanbul ignore if */\n        if (range === undefined) {\n          range = 1;\n        }\n\n        var divider = [\n          16380,\n          8190,\n          4096,\n          1365,\n        ][range];\n\n        /* istanbul ignore if */\n        if (divider === undefined) {\n          divider = 1;\n        }\n\n        var threshold = [\n          80,\n          40,\n          20,\n          10,\n        ][range];\n\n        /* istanbul ignore if */\n        if (threshold === undefined) {\n          threshold = 10;\n        }\n\n\n        state.divider = divider;\n        state.expander = Expander.get({\n          address: address,\n          controller: this.controller,\n          bus: this.bus,\n        });\n\n        // TODO: this should come from the expander\n        var ctrl4 = 0x88 | (range << 4);\n\n        state.expander.i2cWrite(address, this.REGISTER.CTRL_REG4, ctrl4);\n\n        // Acceleration\n        state.expander.i2cReadOnce(address, this.REGISTER.CTRL_REG1, 1, function(data) {\n          var ctrl1 = data[0];\n\n          // Set to 200Hz\n          ctrl1 &= ~0xF0;\n          ctrl1 |= 6 << 4;\n\n          state.expander.i2cWrite(address, this.REGISTER.CTRL_REG1, ctrl1);\n\n          // Page 21\n          // 6.1.1 I2C operation\n          // Autoincrement bit set on register (0x80)\n          state.expander.i2cRead(address, this.REGISTER.OUT_X_L | 0x80, 6, function(data) {\n            dataHandler({\n              x: Fn.int16(data[1], data[0]),\n              y: Fn.int16(data[3], data[2]),\n              z: Fn.int16(data[5], data[4]),\n            });\n          });\n\n\n          // Tap\n          // TODO: make this optional (use \"newListener\"?)\n          //\n          // See MMA8452 driver for strategy\n          //\n          // state.expander.i2cReadOnce(address, this.REGISTER.CTRL_REG3, 1, function(data) {\n          //   var ctrl3 = data[0];\n\n          //   // Shut off Int 1 Click\n          //   ctrl3 &= ~0x80;\n          //   ctrl3 |= 6 << 4;\n\n          //   state.expander.i2cWrite(address, this.REGISTER.CTRL_REG1, ctrl3);\n\n          //   // Page 21\n          //   // 6.1.1 I2C operation\n          //   // Autoincrement bit set on register (0x80)\n          //   state.expander.i2cRead(address, this.REGISTER.OUT_X_L | 0x80, 6, function(data) {\n          //     dataHandler({\n          //       x: Fn.int16(data[1], data[0]),\n          //       y: Fn.int16(data[3], data[2]),\n          //       z: Fn.int16(data[5], data[4]),\n          //     });\n          //   });\n          // }.bind(this));\n\n\n\n          // Page 35\n          // 8.3.7 CTRL_REG3 [Interrupt CTRL register] (22h)\n          state.expander.i2cWrite(address, this.REGISTER.CTRL_REG3, 0x80);\n\n          // Page 40\n          // 9.2.1 Control register 5 (0x24)\n          state.expander.i2cWrite(address, this.REGISTER.CTRL_REG5, 0x08);\n\n          // Page 32\n          // 8.3.1 TAP_CFG\n          //\n          // This register is called both CLICK_CFG and TAP_CFG\n          //\n          // 0b00101010  = 0x2A = 42\n          state.expander.i2cWrite(address, this.REGISTER.CLICK_CFG, 0x2A);\n\n          // Page 36\n          // 8.4.1 Playing with TAP_TimeLimit\n          //\n          // ...Offers some guidance. Ultimately I opted to take inspiration\n          // from Adafruit's driver and example:\n          //\n          // Times in ms\n          // var timelimit = 10;\n          // var timelatency = 20;\n          // var timewindow = 255;\n          var timelimit = 10;\n          var timelatency = 20;\n          var timewindow = 255;\n\n          state.expander.i2cWrite(address, this.REGISTER.CLICK_THS, threshold);\n          state.expander.i2cWrite(address, this.REGISTER.TIME_LIMIT, timelimit);\n          state.expander.i2cWrite(address, this.REGISTER.TIME_LATENCY, timelatency);\n          state.expander.i2cWrite(address, this.REGISTER.TIME_WINDOW, timewindow);\n\n          // Page 33\n          // 8.3.2 TAP_SRC (39h)\n          //\n          // This register is called both CLICK_SRC and TAP_SRC\n          //\n\n          var lastEmitTime = null;\n\n          state.expander.i2cRead(address, this.REGISTER.CLICK_SRC, 1, function(data) {\n            var status = data[0];\n            var thisEmitTime = Date.now();\n            // var tap = status & 0x7F;\n\n            if (lastEmitTime === null) {\n              lastEmitTime = thisEmitTime - 101;\n            }\n\n            /* istanbul ignore if */\n            if (thisEmitTime < (lastEmitTime + 100)) {\n              return;\n            }\n\n            if (status === 0x00) {\n              return;\n            }\n\n            /* istanbul ignore if */\n            if (!(status & 0x30)) {\n              return;\n            }\n\n            lastEmitTime = thisEmitTime;\n\n            this.emit(\"tap\");\n\n            if (status & 0x10) {\n              this.emit(\"tap:single\");\n            }\n\n            if (status & 0x20) {\n              // TODO: Figure out if we can determine a\n              // combined single + double tap\n              this.emit(\"tap:single\");\n              this.emit(\"tap:double\");\n            }\n          }.bind(this));\n        }.bind(this));\n      },\n    },\n    toGravity: {\n      value: function(raw) {\n        var state = priv.get(this);\n        return raw / state.divider;\n      },\n    },\n  },\n};\n\n// Otherwise known as...\nControllers.TINKERKIT = Controllers.ANALOG;\nControllers.MMA8452Q = Controllers.MMA8452;\n\nfunction magnitude(x, y, z) {\n  var a;\n\n  a = x * x;\n  a = fma(y, y, a);\n  a = fma(z, z, a);\n\n  return Math.sqrt(a);\n}\n\n/**\n * Accelerometer\n * @constructor\n *\n * five.Accelerometer([ x, y[, z] ]);\n *\n * five.Accelerometer({\n *   pins: [ x, y[, z] ]\n *   zeroV: ...\n *   sensitivity: ...\n * });\n *\n *\n * @param {Object} opts [description]\n *\n */\n\nfunction Accelerometer(opts) {\n  if (!(this instanceof Accelerometer)) {\n    return new Accelerometer(opts);\n  }\n\n  var controller = null;\n\n  var state = {\n    enabled: true,\n    x: {\n      value: 0,\n      previous: 0,\n      stash: [],\n      orientation: null,\n      inclination: null,\n      acceleration: null,\n      calibration: []\n    },\n    y: {\n      value: 0,\n      previous: 0,\n      stash: [],\n      orientation: null,\n      inclination: null,\n      acceleration: null,\n      calibration: []\n    },\n    z: {\n      value: 0,\n      previous: 0,\n      stash: [],\n      orientation: null,\n      inclination: null,\n      acceleration: null,\n      calibration: []\n    }\n  };\n\n  Board.Component.call(\n    this, opts = Board.Options(opts)\n  );\n\n  if (opts.controller && typeof opts.controller === \"string\") {\n    controller = Controllers[opts.controller.toUpperCase()];\n  } else {\n    controller = opts.controller;\n  }\n\n  if (controller == null) {\n    controller = Controllers.ANALOG;\n  }\n\n  Board.Controller.call(this, controller, opts);\n\n  if (!this.toGravity) {\n    this.toGravity = opts.toGravity || function(raw) {\n      return raw;\n    };\n  }\n\n  if (!this.enabledChanged) {\n    this.enabledChanged = function() {};\n  }\n\n  priv.set(this, state);\n\n  /* istanbul ignore else */\n  if (typeof this.initialize === \"function\") {\n    this.initialize(opts, function(data) {\n      var isChange = false;\n\n      if (!state.enabled) {\n        return;\n      }\n\n      Object.keys(data).forEach(function(axis) {\n        var value = data[axis];\n        var sensor = state[axis];\n\n        if (opts.autoCalibrate && sensor.calibration.length < calibrationSize) {\n          var axisIndex = axes.indexOf(axis);\n          sensor.calibration.push(value);\n\n          if (!Array.isArray(state.zeroV)) {\n            state.zeroV = [];\n          }\n\n          state.zeroV[axisIndex] = sum(sensor.calibration) / sensor.calibration.length;\n          if (axis === aZ) {\n            state.zeroV[axisIndex] -= state.sensitivity;\n          }\n        }\n\n        // The first run needs to prime the \"stash\"\n        // of data values.\n        if (sensor.stash.length === 0) {\n          for (var i = 0; i < 5; i++) {\n            sensor.stash[i] = value;\n          }\n        }\n\n        sensor.previous = sensor.value;\n        sensor.stash.shift();\n        sensor.stash.push(value);\n\n        sensor.value = (sum(sensor.stash) / 5) | 0;\n\n        if (this.acceleration !== sensor.acceleration) {\n          sensor.acceleration = this.acceleration;\n          isChange = true;\n          this.emit(\"acceleration\", sensor.acceleration);\n        }\n\n        if (this.orientation !== sensor.orientation) {\n          sensor.orientation = this.orientation;\n          isChange = true;\n          this.emit(\"orientation\", sensor.orientation);\n        }\n\n        if (this.inclination !== sensor.inclination) {\n          sensor.inclination = this.inclination;\n          isChange = true;\n          this.emit(\"inclination\", sensor.inclination);\n        }\n      }, this);\n\n      this.emit(\"data\", {\n        x: state.x.value,\n        y: state.y.value,\n        z: state.z.value\n      });\n\n      if (isChange) {\n        this.emit(\"change\", {\n          x: this.x,\n          y: this.y,\n          z: this.z\n        });\n      }\n    }.bind(this));\n  }\n\n  Object.defineProperties(this, {\n    hasAxis: {\n      writable: true,\n      value: function(axis) {\n        /* istanbul ignore next */\n        return state[axis] ? state[axis].stash.length > 0 : false;\n      }\n    },\n    enable: {\n      value: function() {\n        state.enabled = true;\n        this.enabledChanged(true);\n        return this;\n      }\n    },\n    disable: {\n      value: function() {\n        state.enabled = false;\n        this.enabledChanged(false);\n        return this;\n      }\n    },\n    zeroV: {\n      get: function() {\n        return state.zeroV;\n      }\n    },\n    /**\n     * [read-only] Calculated pitch value\n     * @property pitch\n     * @type Number\n     */\n    pitch: {\n      get: function() {\n        var x = this.x;\n        var y = this.y;\n        var z = this.z;\n        var rads = this.hasAxis(aZ) ?\n          Math.atan2(x, Math.hypot(y, z)) :\n          Math.asin(constrain(x, -1, 1));\n\n        return toFixed(rads * Fn.RAD_TO_DEG, 2);\n      }\n    },\n    /**\n     * [read-only] Calculated roll value\n     * @property roll\n     * @type Number\n     */\n    roll: {\n      get: function() {\n        var x = this.x;\n        var y = this.y;\n        var z = this.z;\n        var rads = this.hasAxis(aZ) ?\n          Math.atan2(y, Math.hypot(x, z)) :\n          Math.asin(constrain(y, -1, 1));\n\n        return toFixed(rads * Fn.RAD_TO_DEG, 2);\n      }\n    },\n    x: {\n      get: function() {\n        return toFixed(this.toGravity(state.x.value, aX), 2);\n      }\n    },\n    y: {\n      get: function() {\n        return toFixed(this.toGravity(state.y.value, aY), 2);\n      }\n    },\n    z: {\n      get: function() {\n        return this.hasAxis(aZ) ?\n          toFixed(this.toGravity(state.z.value, aZ), 2) : 0;\n      }\n    },\n    acceleration: {\n      get: function() {\n        return magnitude(\n          this.x,\n          this.y,\n          this.z\n        );\n      }\n    },\n    inclination: {\n      get: function() {\n        return Math.atan2(this.y, this.x) * Fn.RAD_TO_DEG;\n      }\n    },\n    orientation: {\n      get: function() {\n        var abs = Math.abs;\n        var x = this.x;\n        var y = this.y;\n        var z = this.hasAxis(aZ) ? this.z : 1;\n        var absX = abs(x);\n        var absY = abs(y);\n        var absZ = abs(z);\n\n        if (absX < absY && absX < absZ) {\n          if (x > 0) {\n            return 1;\n          }\n          return -1;\n        }\n        if (absY < absX && absY < absZ) {\n          if (y > 0) {\n            return 2;\n          }\n          return -2;\n        }\n        if (absZ < absX && absZ < absY) {\n          // TODO: figure out how to test this\n          /* istanbul ignore else */\n          if (z > 0) {\n            return 3;\n          }\n          /* istanbul ignore next */\n          return -3;\n        }\n        return 0;\n      }\n    }\n  });\n}\n\nutil.inherits(Accelerometer, Emitter);\n\n/* istanbul ignore else */\nif (!!process.env.IS_TEST_MODE) {\n  Accelerometer.Controllers = Controllers;\n  Accelerometer.purge = function() {\n    priv.clear();\n  };\n}\n\n\nmodule.exports = Accelerometer;\n","/home/travis/build/npmtest/node-npmtest-johnny-five/node_modules/johnny-five/lib/board.js":"/* istanbul ignore if */\nif (!Array.from || !Object.assign || !Map) {\n  /* istanbul ignore next */\n  require(\"es6-shim\");\n}\n/* istanbul ignore if */\nif (!Array.prototype.includes) {\n  /* istanbul ignore next */\n  require(\"./array-includes-shim\");\n}\n\n\nvar IS_TEST_MODE = !!process.env.IS_TEST_MODE;\nvar Emitter = require(\"events\").EventEmitter;\nvar util = require(\"util\");\nvar chalk = require(\"chalk\");\nvar Collection = require(\"./mixins/collection\");\nvar Fn = require(\"./fn\");\nvar Repl = require(\"./repl\");\nvar Options = require(\"./board.options\");\nvar Pins = require(\"./board.pins\");\nvar Expander;\n//var temporal = require(\"temporal\");\n\n// Environment Setup\nvar boards = [];\nvar rport = /usb|acm|^com/i;\n\n// const things to const when 0.10.x is dropped\n// This string appears over 20 times in this file.\nvar UNDEFINED = \"undefined\";\n\n\nvar Serial = {\n  used: [],\n  attempts: [],\n  detect: function(callback) {\n    var serialport;\n\n    /* istanbul ignore if */\n    if (parseFloat(process.versions.nw) >= 0.13) {\n      serialport = require(\"browser-serialport\");\n    } else {\n      serialport = require(\"serialport\");\n    }\n\n    // console.log(require);\n    // Request a list of available ports, from\n    // the result set, filter for valid paths\n    // via known path pattern match.\n    serialport.list(function(err, result) {\n\n      // serialport.list() will never result in an error.\n      // On failure, an empty array is returned. (#768)\n      var ports = result.filter(function(val) {\n        var available = true;\n\n        // Match only ports that Arduino cares about\n        // ttyUSB#, cu.usbmodem#, COM#\n        if (!rport.test(val.comName)) {\n          available = false;\n        }\n\n        // Don't allow already used/encountered usb device paths\n        if (Serial.used.includes(val.comName)) {\n          available = false;\n        }\n\n        return available;\n      }).map(function(val) {\n        return val.comName;\n      });\n\n      // If no ports are detected...\n      if (!ports.length) {\n\n        /* istanbul ignore if */\n        if (IS_TEST_MODE && this.abort) {\n          /* istanbul ignore next */\n          return;\n        }\n\n        // Create an attempt counter\n        /* istanbul ignore else */\n        if (!Serial.attempts[Serial.used.length]) {\n          Serial.attempts[Serial.used.length] = 0;\n\n          // Log notification...\n          this.info(\"Board\", \"Looking for connected device\");\n        }\n\n        // Set the attempt number\n        Serial.attempts[Serial.used.length]++;\n\n        // Retry Serial connection\n        Serial.detect.call(this, callback);\n        return;\n      }\n\n      this.info(\"Available\", chalk.grey(ports));\n\n      // Get the first available device path\n      // from the list of detected ports\n\n      callback.call(this, ports[0]);\n    }.bind(this));\n  },\n\n  connect: function(portOrPath, callback) {\n    var IO = require(\"firmata\").Board;\n\n    var caught = null;\n    var io, isConnected, path, type;\n\n    if (typeof portOrPath === \"object\" && portOrPath.path) {\n      //\n      // Board({ port: SerialPort Object })\n      //\n      path = portOrPath.path;\n\n      this.info(\n        (portOrPath.transport || \"SerialPort\"),\n        chalk.grey(path)\n      );\n    } else {\n      //\n      // Board({ port: path String })\n      //\n      // Board()\n      //    ie. auto-detected\n      //\n      path = portOrPath;\n    }\n\n    // Add the usb device path to the list of device paths that\n    // are currently in use - this is used by the filter function\n    // above to remove any device paths that we've already encountered\n    // or used to avoid blindly attempting to reconnect on them.\n    Serial.used.push(path);\n\n    try {\n      io = new IO(portOrPath, function(error) {\n        if (error) {\n          caught = error;\n        }\n\n        callback.call(this, caught, caught ? \"error\" : \"ready\", io);\n      }.bind(this));\n\n      // Extend io instance with special expandos used\n      // by Johny-Five for the IO Plugin system.\n      io.name = \"Firmata\";\n      io.defaultLed = 13;\n      io.port = path;\n\n      // Made this far, safely connected\n      isConnected = true;\n    } catch (error) {\n      caught = error;\n    }\n\n    if (caught) {\n      caught = caught.message || caught;\n    }\n\n    // Determine the type of event that will be passed on to\n    // the board emitter in the callback passed to Serial.detect(...)\n    type = isConnected ? \"connect\" : \"error\";\n\n    // Execute \"connect\" callback\n    callback.call(this, caught, type, io);\n  }\n};\n\n/**\n * Board\n * @constructor\n *\n * @param {Object} opts\n */\n\nfunction Board(opts) {\n\n  if (!(this instanceof Board)) {\n    return new Board(opts);\n  }\n\n  // Ensure opts is an object\n  opts = opts || {};\n\n  // Used to define the board instance's own\n  // properties in the REPL's scope.\n  var replContext = {};\n\n  // It's feasible that an IO-Plugin may emit\n  // \"connect\" and \"ready\" events out of order.\n  // This is used to enforce the order, by\n  // postponing the \"ready\" event if the IO-Plugin\n  // hasn't emitted a \"connect\" event. Once\n  // the \"connect\" event is emitted, the\n  // postponement is lifted and the board may\n  // proceed with emitting the events in the\n  // correct order.\n  var isPostponed = false;\n\n  // Initialize this Board instance with\n  // param specified properties.\n  Object.assign(this, opts);\n\n  this.timer = null;\n\n  this.isConnected = false;\n\n  // Easily track state of hardware\n  this.isReady = false;\n\n  // Initialize instance property to reference io board\n  this.io = this.io || null;\n\n  // Registry of components\n  this.register = [];\n\n  // Pins, Addr (alt Pin name), Addresses\n  this.occupied = [];\n\n  // Registry of drivers by address (i.e. I2C Controllers)\n  this.Drivers = {};\n\n  // Identify for connect hardware cache\n  if (!this.id) {\n    this.id = Fn.uid();\n  }\n\n  // If no debug flag, default to true\n  if (typeof this.debug === UNDEFINED) {\n    this.debug = true;\n  }\n\n  // If no repl flag, default to true\n  if (typeof this.repl === UNDEFINED) {\n    this.repl = true;\n  }\n\n  // If no sigint flag, default to true\n  if (typeof this.sigint === UNDEFINED) {\n    this.sigint = true;\n  }\n\n  // Specially processed pin capabilities object\n  // assigned when physical board has reported\n  // \"ready\" via Firmata or IO-Plugin.\n  this.pins = null;\n\n  // Create a Repl instance and store as\n  // instance property of this io/board.\n  // This will reduce the amount of boilerplate\n  // code required to _always_ have a Repl\n  // session available.\n  //\n  // If a sesssion exists, use it\n  // (instead of creating a new session)\n  //\n  /* istanbul ignore if */\n  if (this.repl) {\n    /* istanbul ignore if */\n    if (Repl.ref) {\n      /* istanbul ignore next */\n      replContext[this.id] = this;\n      /* istanbul ignore next */\n      Repl.ref.on(\"ready\", function() {\n        /* istanbul ignore next */\n        Repl.ref.inject(replContext);\n      });\n      /* istanbul ignore next */\n      this.repl = Repl.ref;\n    } else {\n      replContext[this.id] = replContext.board = this;\n      this.repl = new Repl(replContext);\n    }\n  }\n\n  if (opts.io) {\n    // If you already have a connected io instance\n    this.io = opts.io;\n    this.isReady = opts.io.isReady;\n    this.transport = this.io.transport || null;\n    this.port = this.io.name;\n    this.pins = Board.Pins(this);\n  } else {\n\n    if (this.port && opts.port) {\n      Serial.connect.call(this, this.port, finalizeAndBroadcast);\n    } else {\n      Serial.detect.call(this, function(path) {\n        Serial.connect.call(this, path, finalizeAndBroadcast);\n      });\n    }\n  }\n\n  // Either an IO instance was provided or isOnBoard is true\n  if (!opts.port && this.io !== null) {\n    /* istanbul ignore next */\n    this.info(\"Available\", chalk.grey(this.io.name || \"unknown\"));\n\n    [\"connect\", \"ready\"].forEach(function(type) {\n      this.io.once(type, function() {\n        // Since connection and readiness happen asynchronously,\n        // it's actually possible for Johnny-Five to receive the\n        // events out of order and that should be ok.\n        if (type === \"ready\" && !this.isConnected) {\n          isPostponed = true;\n        } else {\n          // Will emit the \"connect\" and \"ready\" events\n          // if received in order. If out of order, this\n          // will only emit the \"connect\" event. The\n          // \"ready\" event will be handled in the next\n          // condition's consequent.\n          finalizeAndBroadcast.call(this, null, type, this.io);\n        }\n\n        if (type === \"connect\" && isPostponed) {\n          finalizeAndBroadcast.call(this, null, \"ready\", this.io);\n        }\n      }.bind(this));\n\n      if (this.io.isReady) {\n        // If the IO instance is reached \"ready\"\n        // state, queue tick tasks to emit the\n        // \"connect\" and \"ready\" events\n        process.nextTick(function() {\n          this.io.emit(type);\n        }.bind(this));\n      }\n    }, this);\n  }\n\n  this.once(\"ready\", function() {\n    var hrstart = process.hrtime();\n\n    this.millis = function() {\n      var now = process.hrtime(hrstart);\n      return (now[1] / 1000000);\n    };\n\n    [\"close\", \"disconnect\", \"error\", \"string\"].forEach(function(type) {\n      this.io.on(type, function(data) {\n        this.emit(type, data);\n      }.bind(this));\n    }, this);\n  }.bind(this));\n\n  // Cache instance to allow access from module constructors\n  boards.push(this);\n}\n\nfunction finalizeAndBroadcast(data, type, io) {\n  var emitted = false;\n\n  // Assign found io to instance\n  if (!this.io) {\n    this.io = io;\n  }\n\n  // Always Surface errors\n  if (type === \"error\") {\n    /* istanbul ignore else */\n    if (data && data.message) {\n      emitted = true;\n      this.error(\"Error\", data.message);\n    }\n  }\n\n  if (type === \"connect\") {\n    this.isConnected = true;\n    this.port = io.port || io.name;\n\n    this.info(\n      \"Connected\",\n      chalk.grey(this.port)\n    );\n\n    // Unless a \"timeout\" value has been provided apply 10 Second timeout...\n    //\n    // If \"ready\" hasn't fired and cleared the timer within\n    // 10 seconds of the connect event, then it's likely\n    // there is an issue with the device or firmware.\n    if (!IS_TEST_MODE) {\n      /* istanbul ignore next */\n      this.timer = setTimeout(function() {\n        this.error(\n          \"Device or Firmware Error\",\n\n          \"A timeout occurred while connecting to the Board. \\n\\n\" +\n          \"Please check that you've properly flashed the board with the correct firmware.\\n\" +\n          \"See: https://github.com/rwaldron/johnny-five/wiki/Getting-Started#trouble-shooting\\n\\n\" +\n          \"If connecting to a Leonardo or Leonardo clone, press the 'Reset' button on the \" +\n          \"board, wait approximately 11 seconds for complete reset, then run your program again.\"\n        );\n\n        this.emit(\"error\", new Error(\"A timeout occurred while connecting to the Board.\"));\n      }.bind(this), this.timeout || 1e4);\n    }\n  }\n\n  if (type === \"ready\") {\n    if (this.timer) {\n      clearTimeout(this.timer);\n    }\n\n    // Update instance `ready` flag\n    this.isReady = true;\n    this.pins = Board.Pins(this);\n    this.MODES = this.io.MODES;\n\n    if (typeof io.debug !== UNDEFINED &&\n        io.debug === false) {\n      this.debug = false;\n    }\n\n    if (typeof io.repl !== UNDEFINED &&\n        io.repl === false) {\n      this.repl = false;\n    }\n    // In multi-board mode, block the REPL from\n    // activation. This will be started directly\n    // by the Board.Collection constructor.\n    //\n    // In single-board mode, the REPL will not\n    // be blocked at all.\n    //\n    // If the user program has not disabled the\n    // REPL, initialize it.\n    if (this.repl) {\n      this.repl.initialize(this.emit.bind(this, \"ready\"));\n    }\n\n    if (io.name !== \"Mock\" && this.sigint) {\n      process.on(\"SIGINT\", function() {\n        this.emit(\"exit\");\n        this.warn(\"Board\", \"Closing.\");\n        var interval = setInterval(function() {\n          if (!this.io.pending) {\n            clearInterval(interval);\n            process.nextTick(process.reallyExit);\n          }\n        }.bind(this), 1);\n      }.bind(this));\n    }\n  }\n\n  // If there is a REPL...\n  if (this.repl) {\n    // \"ready\" will be emitted once repl.initialize\n    // is complete, so the only event that needs to\n    // be propagated here is the \"connect\" event.\n    if (type === \"connect\") {\n      this.emit(type, data);\n    }\n  } else {\n    // The REPL is disabled, propagate all events\n    if (!emitted) {\n      this.emit(type, data);\n    }\n  }\n}\n\n// Inherit event api\nutil.inherits(Board, Emitter);\n\n\n\n/**\n * Pass through methods\n */\n[\n  \"digitalWrite\", \"analogWrite\",\n  \"analogRead\", \"digitalRead\",\n  \"pinMode\", \"queryPinState\",\n  \"stepperConfig\", \"stepperStep\",\n  \"sendI2CConfig\", \"sendI2CWriteRequest\", \"sendI2CReadRequest\",\n  \"i2cConfig\", \"i2cWrite\", \"i2cWriteReg\", \"i2cRead\", \"i2cReadOnce\",\n  \"pwmWrite\",\n  \"servoConfig\", \"servoWrite\",\n  \"sysexCommand\", \"sysexResponse\",\n  \"serialConfig\", \"serialWrite\", \"serialRead\", \"serialStop\", \"serialClose\", \"serialFlush\", \"serialListen\",\n].forEach(function(method) {\n  /* istanbul ignore next */\n  Board.prototype[method] = function() {\n    this.io[method].apply(this.io, arguments);\n    return this;\n  };\n});\n\n\nBoard.prototype.snapshot = function(reducer) {\n  var blacklist = this.snapshot.blacklist;\n  var special = this.snapshot.special;\n  var hasReducer = typeof reducer === \"function\";\n\n  return this.register.reduce(function(accum, component) {\n    // Don't include collections or multi/imu wrappers\n    if (typeof component.components === UNDEFINED) {\n      accum.push(\n        Object.getOwnPropertyNames(component).reduce(function(data, prop) {\n          var value = component[prop];\n\n          if (!blacklist.includes(prop) && typeof value !== \"function\") {\n\n            if (hasReducer) {\n              var result = reducer(prop, value, component);\n\n              if (result !== undefined) {\n                data[prop] = result;\n              }\n            } else {\n              data[prop] = special[prop] ?\n                special[prop](value) : value;\n            }\n          }\n          return data;\n        }, Object.create(null))\n      );\n    }\n\n    return accum;\n  }.bind(this), []);\n};\n\nBoard.prototype.serialize = function(reducer) {\n  return JSON.stringify(this.snapshot(reducer));\n};\n\nBoard.prototype.snapshot.blacklist = [\n  \"board\", \"io\", \"_events\", \"_eventsCount\", \"state\",\n];\n\nBoard.prototype.samplingInterval = function(ms) {\n\n  if (this.io.setSamplingInterval) {\n    this.io.setSamplingInterval(ms);\n  } else {\n    throw new Error(\"This IO plugin does not implement an interval adjustment method\");\n  }\n  return this;\n};\n\n\nBoard.prototype.snapshot.special = {\n  mode: function(value) {\n    return [\"INPUT\", \"OUTPUT\", \"ANALOG\", \"PWM\", \"SERVO\"][value] || \"unknown\";\n  }\n};\n\n/**\n *  shiftOut\n *\n */\nBoard.prototype.shiftOut = function(dataPin, clockPin, isBigEndian, value) {\n  if (arguments.length === 3) {\n    value = isBigEndian;\n    isBigEndian = true;\n  }\n\n  for (var i = 0; i < 8; i++) {\n    this.io.digitalWrite(clockPin, 0);\n    if (isBigEndian) {\n      this.io.digitalWrite(dataPin, !!(value & (1 << (7 - i))) | 0);\n    } else {\n      this.io.digitalWrite(dataPin, !!(value & (1 << i)) | 0);\n    }\n    this.io.digitalWrite(clockPin, 1);\n  }\n};\n\nvar logging = {\n  specials: [\n    \"error\",\n    \"fail\",\n    \"warn\",\n    \"info\",\n  ],\n  colors: {\n    log: \"white\",\n    error: \"red\",\n    fail: \"inverse\",\n    warn: \"yellow\",\n    info: \"cyan\"\n  }\n};\n\nBoard.prototype.log = function( /* type, klass, message [, long description] */ ) {\n  var args = Array.from(arguments);\n\n  // If this was a direct call to `log(...)`, make sure\n  // there is a correct \"type\" to emit below.\n  if (!logging.specials.includes(args[0])) {\n    args.unshift(\"log\");\n  }\n\n  var type = args.shift();\n  var klass = args.shift();\n  var message = args.shift();\n  var color = logging.colors[type];\n  var now = Date.now();\n  var event = {\n    type: type,\n    timestamp: now,\n    class: klass,\n    message: \"\",\n    data: null,\n  };\n\n  if (typeof args[args.length - 1] === \"object\") {\n    event.data = args.pop();\n  }\n\n  message += \" \" + args.join(\", \");\n  event.message = message.trim();\n\n  /* istanbul ignore if */\n  if (this.debug) {\n    /* istanbul ignore next */\n    console.log([\n      // Timestamp\n      chalk.grey(now),\n      // Module, color matches type of log\n      chalk.magenta(klass),\n      // Details\n      chalk[color](message),\n      // Miscellaneous args\n      args.join(\", \")\n    ].join(\" \"));\n  }\n\n  this.emit(type, event);\n  this.emit(\"message\", event);\n};\n\n\n// Make shortcuts to all logging methods\nlogging.specials.forEach(function(type) {\n  Board.prototype[type] = function() {\n    var args = [].slice.call(arguments);\n    args.unshift(type);\n\n    this.log.apply(this, args);\n  };\n});\n\n\n/**\n * delay, loop, queue\n *\n * Pass through methods to temporal\n */\n/*\n[\n  \"delay\", \"loop\", \"queue\"\n].forEach(function( method ) {\n  Board.prototype[ method ] = function( time, callback ) {\n    temporal[ method ]( time, callback );\n    return this;\n  };\n});\n\n// Alias wait to delay to match existing Johnny-five API\nBoard.prototype.wait = Board.prototype.delay;\n*/\n\n// -----THIS IS A TEMPORARY FIX UNTIL THE ISSUES WITH TEMPORAL ARE RESOLVED-----\n// Aliasing.\n// (temporary, while ironing out API details)\n// The idea is to match existing hardware programming apis\n// or simply find the words that are most intuitive.\n\n// Eventually, there should be a queuing process\n// for all new callbacks added\n//\n// TODO: Repalce with temporal or compulsive API\n\nBoard.prototype.wait = function(time, callback) {\n  setTimeout(callback, time);\n  return this;\n};\n\nBoard.prototype.loop = function(time, callback) {\n  var handler = function() {\n    callback(function() {\n      clearInterval(interval);\n    });\n  };\n  var interval = setInterval(handler, time);\n  return this;\n};\n\n// ----------\n// Static API\n// ----------\n\n// Board.map( val, fromLow, fromHigh, toLow, toHigh )\n//\n// Re-maps a number from one range to another.\n// Based on arduino map()\nBoard.map = Fn.map;\nBoard.fmap = Fn.fmap;\n\n// Board.constrain( val, lower, upper )\n//\n// Constrains a number to be within a range.\n// Based on arduino constrain()\nBoard.constrain = Fn.constrain;\n\n// Board.range( upper )\n// Board.range( lower, upper )\n// Board.range( lower, upper, tick )\n//\n// Returns a new array range\n//\nBoard.range = Fn.range;\n\n// Board.range.prefixed( prefix, upper )\n// Board.range.prefixed( prefix, lower, upper )\n// Board.range.prefixed( prefix, lower, upper, tick )\n//\n// Returns a new array range, each value prefixed\n//\nBoard.range.prefixed = Fn.range.prefixed;\n\n// Board.uid()\n//\n// Returns a reasonably unique id string\n//\nBoard.uid = Fn.uid;\n\n// Board.mount()\n// Board.mount( index )\n// Board.mount( object )\n//\n// Return hardware instance, based on type of param:\n// @param {arg}\n//   object, user specified\n//   number/index, specified in cache\n//   none, defaults to first in cache\n//\n// Notes:\n// Used to reduce the amount of boilerplate\n// code required in any given module or program, by\n// giving the developer the option of omitting an\n// explicit Board reference in a module\n// constructor's options\nBoard.mount = function(arg) {\n  var index = typeof arg === \"number\" && arg,\n    hardware;\n\n  // board was explicitly provided\n  if (arg && arg.board) {\n    return arg.board;\n  }\n\n  // index specified, attempt to return\n  // hardware instance. Return null if not\n  // found or not available\n  if (typeof index === \"number\") {\n    hardware = boards[index];\n    return hardware && hardware || null;\n  }\n\n  // If no arg specified and hardware instances\n  // exist in the cache\n  if (boards.length) {\n    return boards[0];\n  }\n\n  // No mountable hardware\n  return null;\n};\n\n\n\n/**\n * Board.Component\n *\n * Initialize a new device instance\n *\n * Board.Component is a |this| sensitive constructor,\n * and must be called as:\n *\n * Board.Component.call( this, opts );\n *\n *\n *\n * TODO: Migrate all constructors to use this\n *       to avoid boilerplate\n */\n\nBoard.Component = function(opts, componentOpts) {\n  if (typeof opts === UNDEFINED) {\n    opts = {};\n  }\n\n  if (typeof componentOpts === UNDEFINED) {\n    componentOpts = {};\n  }\n\n  // Board specific properties\n  this.board = Board.mount(opts);\n  this.io = this.board.io;\n\n  // Component/Module instance properties\n  this.id = opts.id || Board.uid();\n  this.custom = opts.custom || {};\n\n  var originalPins;\n\n  if (typeof opts.pin === \"number\" || typeof opts.pin === \"string\") {\n    originalPins = [opts.pin];\n  } else {\n    if (Array.isArray(opts.pins)) {\n      originalPins = opts.pins.slice();\n    } else {\n      if (typeof opts.pins === \"object\" && opts.pins !== null) {\n\n        var pinset = opts.pins || opts.pin;\n\n        originalPins = [];\n        for (var p in pinset) {\n          originalPins.push(pinset[p]);\n        }\n      }\n    }\n  }\n\n\n  if (opts.controller) {\n\n    if (typeof opts.controller === \"string\") {\n      opts.controller = opts.controller.replace(/-/g, \"\");\n    }\n\n    if (!Expander) {\n      Expander = require(\"./expander\");\n    }\n\n    if (Expander.hasController(opts.controller)) {\n      componentOpts = {\n        normalizePin: false,\n        requestPin: false,\n      };\n    }\n  }\n\n  componentOpts = Board.Component.initialization(componentOpts);\n\n  if (componentOpts.normalizePin) {\n    opts = Board.Pins.normalize(opts, this.board);\n  }\n\n  // var requesting = [];\n\n  if (typeof opts.pins !== UNDEFINED) {\n    this.pins = opts.pins || [];\n\n    // if (Array.isArray(this.pins)) {\n    //   requesting = requesting.concat(\n    //     this.pins.map(function(pin) {\n    //       return {\n    //         value: pin,\n    //         type: \"pin\"\n    //       };\n    //     })\n    //   );\n    // } else {\n    //   requesting = requesting.concat(\n    //     Object.keys(this.pins).map(function(key) {\n    //       return {\n    //         value: this.pins[key],\n    //         type: \"pin\"\n    //       };\n    //     }, this)\n    //   );\n    // }\n  }\n\n  if (typeof opts.pin !== UNDEFINED) {\n    this.pin = opts.pin;\n    // requesting.push({\n    //   value: this.pin,\n    //   type: \"pin\"\n    // });\n  }\n\n  // TODO: Figure out what is using this\n  /* istanbul ignore if */\n  if (typeof opts.emitter !== UNDEFINED) {\n    /* istanbul ignore next */\n    this.emitter = opts.emitter;\n    // requesting.push({\n    //   value: this.emitter,\n    //   type: \"emitter\"\n    // });\n  }\n\n  if (typeof opts.address !== UNDEFINED) {\n    this.address = opts.address;\n    // requesting.forEach(function(request) {\n    //   request.address = this.address;\n    // }, this);\n  }\n\n  if (typeof opts.controller !== UNDEFINED) {\n    this.controller = opts.controller;\n    // requesting.forEach(function(request) {\n    //   request.controller = this.controller;\n    // }, this);\n  }\n\n  // TODO: Figure out what is using this\n  /* istanbul ignore if */\n  if (typeof opts.bus !== UNDEFINED) {\n    /* istanbul ignore next */\n    this.bus = opts.bus;\n    // requesting.forEach(function(request) {\n    //   request.bus = this.bus;\n    // }, this);\n  }\n\n  // if (componentOpts.requestPin) {\n  //   // With the pins being requested for use by this component,\n  //   // compare with the list of pins that are already known to be\n  //   // in use by other components. If any are known to be in use,\n  //   // produce a warning for the user.\n  //   requesting.forEach(function(request, index) {\n  //     var hasController = typeof request.controller !== UNDEFINED;\n  //     var hasAddress = typeof request.address !== UNDEFINED;\n  //     var isOccupied = false;\n  //     var message = \"\";\n\n  //     request.value = originalPins[index];\n\n  //     if (this.board.occupied.length) {\n  //       isOccupied = this.board.occupied.some(function(occupied) {\n  //         var isPinOccupied = request.value === occupied.value && request.type === occupied.type;\n\n  //         if (typeof occupied.controller !== UNDEFINED) {\n  //           if (hasController) {\n  //             return isPinOccupied && (request.controller === occupied.controller);\n  //           }\n  //           return false;\n  //         }\n\n  //         if (typeof occupied.address !== UNDEFINED) {\n  //           if (hasAddress) {\n  //             return isPinOccupied && (request.address === occupied.address);\n  //           }\n  //           return false;\n  //         }\n\n  //         return isPinOccupied;\n  //       });\n  //     }\n\n  //     if (isOccupied) {\n  //       message = request.type + \": \" + request.value;\n\n  //       if (hasController) {\n  //         message += \", controller: \" + request.controller;\n  //       }\n\n  //       if (hasAddress) {\n  //         message += \", address: \" + request.address;\n  //       }\n\n  //       this.board.warn(\"Component\", message + \" is already in use\");\n  //     } else {\n  //       this.board.occupied.push(request);\n  //     }\n  //   }, this);\n  // }\n\n  this.board.register.push(this);\n};\n\nBoard.Component.initialization = function(opts) {\n  var defaults = {\n    requestPin: true,\n    normalizePin: true\n  };\n\n  return Object.assign({}, defaults, opts);\n};\n\n/**\n * Board.Controller\n *\n * Decorate a Component with a Controller. Must be called\n * _AFTER_ a Controller is identified.\n *\n * Board.Controller is a |this| sensitive constructor,\n * and must be called as:\n *\n * Board.Controller.call( this, controller, opts );\n *\n */\n\nBoard.Controller = function(controller, options) {\n  var requirements = controller.requirements && controller.requirements.value;\n\n  if (requirements) {\n    /* istanbul ignore else */\n    if (requirements.options) {\n      Object.keys(requirements.options).forEach(function(key) {\n        /*\n        requirements: {\n          value: {\n            options: {\n              parameterName: {\n                throws: false,\n                message: \"...blah blah blah\",\n                typeof: \"number\",\n              }\n            }\n          }\n        },\n        */\n        if (typeof options[key] === UNDEFINED ||\n          typeof options[key] !== requirements.options[key].typeof) {\n          if (requirements.options[key].throws) {\n            throw new Error(requirements.options[key].message);\n          } else {\n            this.board.warn(this.constructor.name, requirements.options[key].message);\n          }\n        }\n      }, this);\n    }\n  }\n\n  Object.defineProperties(this, controller);\n};\n\n\n\n\n/**\n * Pin Capability Signature Mapping\n */\n\nBoard.Pins = Pins;\n\nBoard.Options = Options;\n\n// Define a user-safe, unwritable hardware cache access\nObject.defineProperty(Board, \"cache\", {\n  get: function() {\n    return boards;\n  }\n});\n\n/**\n * Board event constructor.\n * opts:\n *   type - event type. eg: \"read\", \"change\", \"up\" etc.\n *   target - the instance for which the event fired.\n *   0..* other properties\n */\nBoard.Event = function(event) {\n\n  if (typeof event === UNDEFINED) {\n    throw new Error(\"Board.Event missing Event object\");\n  }\n\n  // default event is read\n  this.type = event.type || \"data\";\n\n  // actual target instance\n  this.target = event.target || null;\n\n  // Initialize this Board instance with\n  // param specified properties.\n  Object.assign(this, event);\n};\n\n\n/**\n * Boards or Board.Collection; Used when the program must connect to\n * more then one board.\n *\n * @memberof Board\n *\n * @param {Array} ports List of port objects { id: ..., port: ... }\n *                      List of id strings (initialized in order)\n *\n * @return {Boards} board object references\n */\nfunction Boards(opts) {\n  if (!(this instanceof Boards)) {\n    return new Boards(opts);\n  }\n\n  var ports;\n\n  // new Boards([ ...Array of board opts ])\n  if (Array.isArray(opts)) {\n    ports = opts.slice();\n    opts = {\n      ports: ports,\n    };\n  }\n\n  // new Boards({ ports: [ ...Array of board opts ], .... })\n  /* istanbul ignore else */\n  if (!Array.isArray(opts) && typeof opts === \"object\" && opts.ports !== undefined) {\n    ports = opts.ports;\n  }\n\n  // new Boards(non-Array?)\n  // new Boards({ ports: non-Array? })\n  /* istanbul ignore if */\n  if (!Array.isArray(ports)) {\n    throw new Error(\"Expected ports to be an array\");\n  }\n\n  if (typeof opts.debug === UNDEFINED) {\n    opts.debug = true;\n  }\n\n  if (typeof opts.repl === UNDEFINED) {\n    opts.repl = true;\n  }\n\n  var initialized = {};\n  var noRepl = ports.some(function(port) { return port.repl === false; });\n  var noDebug = ports.some(function(port) { return port.debug === false; });\n\n  this.length = ports.length;\n  this.debug = opts.debug;\n  this.repl = opts.repl;\n\n  // If any of the port definitions have\n  // explicitly shut off debug output, bubble up\n  // to the Boards instance\n  /* istanbul ignore else */\n  if (noDebug) {\n    this.debug = false;\n  }\n\n  // If any of the port definitions have\n  // explicitly shut off the repl, bubble up\n  // to the Boards instance\n  /* istanbul ignore else */\n  if (noRepl) {\n    this.repl = false;\n  }\n\n  var expecteds = ports.map(function(port, index) {\n    var portOpts;\n\n    if (typeof port === \"string\") {\n      portOpts = {};\n\n      // If the string matches a known valid port\n      // name pattern, then assume this is what\n      // the user code intended.\n      if (rport.test(port)) {\n        portOpts.port = port;\n      } else {\n        // Otherwise they expect Johnny-Five to figure\n        // out what ports to use and intended this\n        // value to be used an id\n        portOpts.id = port;\n      }\n    } else {\n      portOpts = port;\n    }\n\n    // Shut off per-board repl instance creation\n    portOpts.repl = false;\n\n    this[index] = initialized[portOpts.id] = new Board(portOpts);\n\n    // \"error\" event is not async, register immediately\n    this[index].on(\"error\", function(error) {\n      this.emit(\"error\", error);\n    }.bind(this));\n\n    return new Promise(function(resolve) {\n      this[index].on(\"ready\", function() {\n        resolve(initialized[portOpts.id]);\n      });\n    }.bind(this));\n  }, this);\n\n  Promise.all(expecteds).then(function(boards) {\n    Object.assign(this, boards);\n\n    this.each(function(board) {\n      board.info(\"Board ID: \", chalk.green(board.id));\n    });\n\n    // If the Boards instance requires a REPL,\n    // make sure it's created before calling \"ready\"\n    if (this.repl) {\n      this.repl = new Repl(\n        Object.assign({}, initialized, {\n          board: this\n        })\n      );\n      this.repl.initialize(function() {\n        this.emit(\"ready\", initialized);\n      }.bind(this));\n    } else {\n      // Otherwise, call ready immediately\n      this.emit(\"ready\", initialized);\n    }\n  }.bind(this));\n}\n\nutil.inherits(Boards, Emitter);\n\nObject.assign(Boards.prototype, Collection.prototype);\n\nBoards.prototype.byId = function(id) {\n  for (var i = 0; i < this.length; i++) {\n    if (this[i].id === id) {\n      return this[i];\n    }\n  }\n\n  return null;\n};\n\nBoards.prototype.log = Board.prototype.log;\n\nlogging.specials.forEach(function(type) {\n  /* istanbul ignore next */\n  Boards.prototype[type] = function() {\n    var args = [].slice.call(arguments);\n    args.unshift(type);\n\n    this.log.apply(this, args);\n  };\n});\n\n/* istanbul ignore else */\nif (IS_TEST_MODE) {\n  Serial.purge = function() {\n    Serial.used.length = 0;\n  };\n  Board.Serial = Serial;\n\n  Board.purge = function() {\n    Board.Pins.normalize.clear();\n    Repl.isActive = false;\n    Repl.isBlocked = true;\n    Repl.ref = null;\n    boards.length = 0;\n  };\n\n  Board.testMode = function(state) {\n    if (!arguments.length) {\n      return IS_TEST_MODE;\n    } else {\n      IS_TEST_MODE = state;\n    }\n  };\n}\n\n// TODO: Eliminate .Array for 1.0.0\nBoard.Array = Boards;\nBoard.Collection = Boards;\n\nmodule.exports = Board;\n\n// References:\n// http://arduino.cc/en/Main/arduinoBoardUno\n","/home/travis/build/npmtest/node-npmtest-johnny-five/node_modules/johnny-five/lib/mixins/collection.js":"var IS_TEST_MODE = !!process.env.IS_TEST_MODE;\nvar Emitter = require(\"events\").EventEmitter;\nvar util = require(\"util\");\nvar priv = new Map();\n\n/**\n * Collection\n *\n * Make Collections for output classes\n *\n * @param {[type]} numsOrObjects\n */\nfunction Collection(numsOrObjects) {\n  var Type = this.type;\n  var initObjects = [];\n\n  this.length = 0;\n\n  if (Array.isArray(numsOrObjects)) {\n    initObjects = numsOrObjects;\n  } else {\n    // Initialize with a Shared Properties object\n    /* istanbul ignore else */\n    if (Array.isArray(numsOrObjects.pins)) {\n      var keys = Object.keys(numsOrObjects).filter(function(key) {\n        return key !== \"pins\";\n      });\n      initObjects = numsOrObjects.pins.map(function(pin) {\n        var obj = {};\n\n        if (Array.isArray(pin)) {\n          obj.pins = pin;\n        } else {\n          obj.pin = pin;\n        }\n\n        return keys.reduce(function(accum, key) {\n          accum[key] = numsOrObjects[key];\n          return accum;\n        }, obj);\n      });\n    }\n  }\n\n  /* istanbul ignore else */\n  if (initObjects.length) {\n    while (initObjects.length) {\n      var numOrObject = initObjects.shift();\n\n      // When a Type exists, respect it!\n      if (typeof Type === \"function\") {\n        if (!(numOrObject instanceof Type || numOrObject instanceof this.constructor)) {\n          numOrObject = new Type(numOrObject);\n        }\n      }\n\n      this.add(numOrObject);\n    }\n  }\n}\n\nCollection.prototype.add = function() {\n  var length = this.length;\n  var aLen = arguments.length;\n\n  for (var i = 0; i < aLen; i++) {\n    // When a Type exists, respect it!\n    if (this.type) {\n      if (arguments[i] instanceof this.type ||\n          arguments[i] instanceof this.constructor) {\n        this[length++] = arguments[i];\n      }\n    } else {\n      // Otherwise allow user to directly instantiate\n      // Collection or Collection.Emitter to create\n      // a mixed collection\n      this[length++] = arguments[i];\n    }\n  }\n\n  return (this.length = length);\n};\n\nCollection.prototype.each = function(callbackFn) {\n  var length = this.length;\n\n  for (var i = 0; i < length; i++) {\n    callbackFn.call(this[i], this[i], i);\n  }\n\n  return this;\n};\n\nCollection.prototype.forEach = function() {\n  [].forEach.apply(this, arguments);\n};\n\nCollection.prototype.includes = function() {\n  return [].includes.apply(this, arguments);\n};\n\nCollection.prototype.indexOf = function() {\n  return [].indexOf.apply(this, arguments);\n};\n\nCollection.prototype.map = function() {\n  return [].map.apply(this, arguments);\n};\n\nCollection.prototype.slice = function() {\n  return new this.constructor([].slice.apply(this, arguments));\n};\n\nCollection.prototype.byId = function(id) {\n  return [].find.call(this, function(entry) {\n    return entry.id !== undefined && entry.id === id;\n  });\n};\n\n/**\n * Collection.installMethodForwarding\n *\n * Copy single method to collection class\n *\n * @param  {Object} target Target prototype\n * @param  {Object} source Source prototype\n * @return {Object} target Modified Target prototype\n */\nCollection.installMethodForwarding = function(target, source) {\n  return Object.keys(source).reduce(function(accum, method) {\n    // Create Inputs wrappers for each method listed.\n    // This will allow us control over all Input instances\n    // simultaneously.\n    accum[method] = function() {\n      var length = this.length;\n\n      for (var i = 0; i < length; i++) {\n        this[i][method].apply(this[i], arguments);\n      }\n      return this;\n    };\n\n    return accum;\n  }, target);\n};\n\n\n\n/**\n * Collection.Emitter\n *\n * Make Collections for input classes\n *\n * @param {[type]} numsOrObjects\n *\n */\nCollection.Emitter = function(numsOrObjects) {\n\n  // Create private state ahead of super call\n  priv.set(this, {\n    timing: {\n      last: Date.now()\n    }\n  });\n\n  Collection.call(this, numsOrObjects);\n\n  // If the Collection.Emitter was created\n  // with a Shared Properties object, then\n  // we should abide by the freq or period\n  // properties...\n  var interval = null;\n  var period = 5;\n\n  if (!Array.isArray(numsOrObjects) &&\n      (typeof numsOrObjects === \"object\" && numsOrObjects !== null))  {\n\n    period = numsOrObjects.freq || numsOrObjects.period || period;\n\n    // _However_, looking to the future, we\n    // need to start thinking about replacing\n    // the garbage named _freq_ (the value is\n    // actually a period), with real _frequency_\n    // in Hz.\n\n    // If provided, convert frequency to period\n    /* istanbul ignore else */\n    if (numsOrObjects.frequency) {\n      period = (1 / numsOrObjects.frequency) * 1000;\n    }\n  }\n\n  Object.defineProperties(this, {\n    period: {\n      get: function() {\n        return period;\n      },\n      set: function(value) {\n        if (period !== value) {\n          period = value;\n        }\n\n        if (interval) {\n          clearInterval(interval);\n        }\n\n        interval = setInterval(function() {\n          this.emit(\"data\", this);\n        }.bind(this), period);\n      }\n    },\n  });\n\n  this.period = period;\n\n  this.on(\"newListener\", function(event) {\n    if (event === \"change\" || event === \"data\") {\n      return;\n    }\n\n    this.forEach(function(input) {\n      input.on(event, function(data) {\n        this.emit(event, input, data);\n      }.bind(this));\n    }, this);\n  });\n};\n\nutil.inherits(Collection.Emitter, Collection);\n\nObject.assign(Collection.Emitter.prototype, Emitter.prototype);\n\nCollection.Emitter.prototype.add = function() {\n  var inputs = Array.from(arguments);\n\n  /* istanbul ignore else */\n  if (inputs.length) {\n    Collection.prototype.add.apply(this, inputs);\n\n    inputs.forEach(function(input) {\n      if (input) {\n        input.on(\"change\", function() {\n          this.emit(\"change\", input);\n        }.bind(this));\n      }\n    }, this);\n  }\n  return this.length;\n  // return (this.length = length);\n};\n\n/* istanbul ignore else */\nif (IS_TEST_MODE) {\n  Collection.purge = function() {\n    priv.clear();\n  };\n}\n\nmodule.exports = Collection;\n","/home/travis/build/npmtest/node-npmtest-johnny-five/node_modules/johnny-five/lib/fn.js":"var Fn = {\n  debounce: require(\"lodash.debounce\"),\n  cloneDeep: require(\"lodash.clonedeep\"),\n};\n\n/**\n * Format a number such that it has a given number of digits after the\n * decimal point.\n *\n * @param {Number} number - The number to format\n * @param {Number} [digits = 0] - The number of digits after the decimal point\n * @return {Number} Formatted number\n * @example\n * Fn.toFixed(5.4564, 2); // -> 5.46\n * @example\n * Fn.toFixed(1.5, 2); // -> 1.5\n */\nFn.toFixed = function(number, digits) {\n  // Guard against error when number is null or undefined\n  // Cast result as number\n  return +(number || 0).toFixed(digits);\n};\n\n\n/**\n * Map a value (number) from one range to another. Based on Arduino's map().\n *\n * @param {Number} value    - value to map\n * @param {Number} fromLow  - low end of originating range\n * @param {Number} fromHigh - high end of originating range\n * @param {Number} toLow    - low end of target range\n * @param {Number} toHigh   - high end of target range\n * @return {Number} mapped value (integer)\n * @example\n * Fn.map(500, 0, 1000, 0, 255); // ->\n */\n\nFn.map = function(value, fromLow, fromHigh, toLow, toHigh) {\n  return ((value - fromLow) * (toHigh - toLow) / (fromHigh - fromLow) + toLow) | 0;\n};\n// Alias\nFn.scale = Fn.map;\n\n/**\n * Like map, but returns a Float32\n *\n * For @param info, @see Fn.map\n * @return {Float32}\n */\nvar f32A = new Float32Array(1);\n\nFn.fmap = function(value, fromLow, fromHigh, toLow, toHigh) {\n  f32A[0] = (value - fromLow) * (toHigh - toLow) / (fromHigh - fromLow) + toLow;\n  return f32A[0];\n};\n// Alias\nFn.fscale = Fn.fmap;\n\n/**\n * Constrains a number to be within a range. Based on Arduino's constrain()\n *\n * @param {Number} value\n * @param {Number} lower - lower bound of range for constraint\n * @param {Number} upper - upper bound of range for constraint\n * @return {Number | NaN} constrained number or NaN if any of the provided\n *   parameters are not a {Number}.\n */\nFn.constrain = function(value, lower, upper) {\n  return Math.min(upper, Math.max(lower, value));\n};\n\n/**\n * Is value between the bounds of lower and upper?\n *\n * @param {Number} value\n * @param {Number} lower - Lower end of bounds to check\n * @param {Number} upper - Upper ends of bounds to check\n * @return {Boolean}\n */\nFn.inRange = function(value, lower, upper) {\n  return value >= lower && value <= upper;\n};\n\n/**\n * Generate an Array of Numbers with values between lower and upper; the\n * step (increment/decrement) between each defined by tick.\n *\n * @param {Number} lower - The value of the lowest element in the resulting\n *                         Array. If `Fn.range` invoked with only one\n *                         argument, this parameter will instead define the\n *                         length of the Array, which will start from 0.\n * @param {Number} upper - The value of the final element of the Array.\n * @param {Number} [tick = 1] - The difference between each element in the\n *                              Array. This value may be negative.\n * @return {Array} of {Numbers}\n *\n * @example\n * Fn.range(5, 10); // -> [5, 6, 7, 8, 9, 10];\n * @example\n * Fn.range(5); // -> [0, 1, 2, 3, 4];\n * @example\n * Fn.range(3, 27, 3); // -> [3, 6, 9, 12, 15, 18, 21, 24, 27];\n * @example\n * Fn.range(0, -9, -3); // -> [0, -3, -6, -9];\n */\nFn.range = function(lower, upper, tick) {\n\n  if (arguments.length === 1) {\n    upper = lower - 1;\n    lower = 0;\n  }\n\n  lower = lower || 0;\n  upper = upper || 0;\n  tick = tick || 1;\n\n  var len = Math.max(Math.ceil((upper - lower) / tick), 0),\n    idx = 0,\n    range = [];\n\n  while (idx <= len) {\n    range[idx++] = lower;\n    lower += tick;\n  }\n\n  return range;\n};\n\n/**\n * Adds prefix to each element in the range Array returned by Fn.range.\n *\n * Fn.range.prefixed( prefix, upper )\n * Fn.range.prefixed( prefix, lower, upper )\n * Fn.range.prefixed( prefix, lower, upper, tick )\n *\n * @param {*} prefix - You probably want to use a string, but you don't have to.\n * @return Array per range parameters, each element prefixed.\n * @see Fn.range\n * @example\n * Fn.range.prefixed(\"A\", 0, 10, 2); // -> [\"A0\", \"A2\", \"A4\", \"A6\", \"A8\", \"A10\"]\n */\nFn.range.prefixed = function(prefix) {\n  return Fn.range.apply(null, [].slice.call(arguments, 1)).map(function(val) {\n    return prefix + val;\n  });\n};\n\n/**\n * Generate a reasonably-unique ID string\n *\n * @return {String} - 36-character random-ish string\n */\nFn.uid = function() {\n  return \"xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx\".replace(/[xy]/g, function(chr) {\n    var rnd = Math.random() * 16 | 0;\n    return (chr === \"x\" ? rnd : (rnd & 0x3 | 0x8)).toString(16);\n  }).toUpperCase();\n};\n\n\n/**\n * Square your x!\n *\n * @param {Number} x\n * @return {Number| Nan} - x^2—unless you were goofy enough to provide a\n *   non-numeric x, in which case it's NaN for you!\n */\nFn.square = function(x) {\n  return x * x;\n};\n\n/**\n * Get a sum for all the values in an Array. This works best if the elements\n * in the Array are Numbers.\n *\n * @param {Array} values\n * @return {Number | String} - You probably want a Number so you'll want to\n *                             pass a values Array entirely consisting of\n *                             numeric elements.\n */\nFn.sum = function sum(values) {\n  var vals;\n  if (Array.isArray(values)) {\n    vals = values;\n  } else {\n    vals = [].slice.call(arguments);\n  }\n  return vals.reduce(function(accum, value) {\n    return accum + value;\n  }, 0);\n};\n\n/**\n * Fused multiply-add for precise floating-point calculations.\n */\n// fma function\n// Copyright (c) 2012, Jens Nockert\n// All rights reserved.\n//\n// Redistribution and use in source and binary forms, with or without\n// modification, are permitted provided that the following conditions are met:\n//\n//  1. Redistributions of source code must retain the above copyright notice,\n//     this list of conditions and the following disclaimer.\n//  2. Redistributions in binary form must reproduce the above copyright notice,\n//     this list of conditions and the following disclaimer in the documentation\n//     and/or other materials provided with the distribution.\n//\n// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\"\n// AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE\n// IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE\n// ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE\n// LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR\n// CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF\n// SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS\n// INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN\n// CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\n// ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\n// POSSIBILITY OF SUCH DAMAGE.\n//\nFn.fma = function(a, b, c) {\n  var aHigh = 134217729 * a;\n  var aLow;\n\n  aHigh = aHigh + (a - aHigh);\n  aLow = a - aHigh;\n\n  var bHigh = 134217729 * b;\n  var bLow;\n\n  bHigh = bHigh + (b - bHigh);\n  bLow = b - bHigh;\n\n  var r1 = a * b;\n  var r2 = -r1 + aHigh * bHigh + aHigh * bLow + aLow * bHigh + aLow * bLow;\n\n  var s = r1 + c;\n  var t = (r1 - (s - c)) + (c - (s - r1));\n\n  return s + (t + r2);\n};\n// end fma function copyright\n\n/**\n * Return a value with the bit at the position indicated set (to 1).\n * From avr/io.h \"BV\" => Bit Value\n *\n * An example: logically OR these bits together:\n * var ORed = _BV(0) | _BV(2) | _BV(7);\n *\n * BIT         7  6  5  4  3  2  1  0\n * ---------------------------------------------------------\n * _BV(0)  =   0  0  0  0  0  0  0  1\n * _BV(2)  =   0  0  0  0  0  1  0  0\n * _BV(7)  =   1  0  0  0  0  0  0  0\n * ORed    =   1  0  0  0  0  1  0  1\n *\n * ORed === 133;\n *\n * @param {Number} bit - bit position to set\n * @return {Number}\n * @example\n * Fn.bitValue(0); // --> 1\n * @example\n * Fn.bitValue(4); // --> 16\n *\n */\nFn._BV = Fn.bitValue = Fn.bv = function(bit) {\n  return 1 << bit;\n};\n\n/**\n * int16 Combine two bytes to make an signed 16-bit integer\n * @param  {byte} msb   Most signifcant byte\n * @param  {byte} lsb   Least signifcant byte\n * @return {word}       Signed 16-bit integer\n */\nFn.int16 = function(msb, lsb) {\n  var result = (msb << 8) | lsb;\n\n  // Check highest bit for sign. If on, value is negative\n  return result >> 15 ? ((result ^ 0xFFFF) + 1) * -1 : result;\n};\n\n/**\n * uint16 Combine two bytes to make an unsigned 16-bit integer\n * @param  {byte} msb   Most signifcant byte\n * @param  {byte} lsb   Least signifcant byte\n * @return {word}       unsigned 16-bit integer\n */\nFn.uint16 = function(msb, lsb) {\n  return (msb << 8) | lsb;\n};\n\n/**\n * int24 Combine three bytes to make a signed 24-bit integer\n * @param  {byte} b16   b[16:23]\n * @param  {byte} b8    b[8:15]\n * @param  {byte} b0    b[0:7]\n * @return {word}       Signed 24-bit integer\n */\nFn.int24 = function(b16, b8, b0) {\n  var result = (b16 << 16) | (b8 << 8) | b0;\n\n  // Check highest bit for sign. If on, value is negative\n  return result >> 23 ? ((result ^ 0xFFFFFF) + 1) * -1 : result;\n};\n\n/**\n * uint24 Combine three bytes to make an unsigned 24-bit integer\n * @param  {byte} b16   b[16:23]\n * @param  {byte} b8    b[8:15]\n * @param  {byte} b0    b[0:7]\n * @return {word}       Unsigned 24-bit integer\n */\nFn.uint24 = function(b16, b8, b0) {\n  return (b16 << 16) | (b8 << 8) | b0;\n};\n\n/**\n * int32 Combine four bytes to make a signed 24-bit integer\n * @param  {byte} b24   b[24:31]\n * @param  {byte} b16   b[16:23]\n * @param  {byte} b8    b[8:15]\n * @param  {byte} b0    b[0:7]\n * @return {word}       Signed 32-bit integer\n */\nFn.int32 = function(b24, b16, b8, b0) {\n  var result = (b24 << 24) | (b16 << 16) | (b8 << 8) | b0;\n  // Check highest bit for sign. If on, value is negative\n  return result >> 31 ? ((result ^ 0xFFFFFFFF) + 1) * -1 : result;\n};\n\n/**\n * int32 Combine four bytes to make an unsigned 32-bit integer\n * @param  {byte} b24   b[24:31]\n * @param  {byte} b16   b[16:23]\n * @param  {byte} b8    b[8:15]\n * @param  {byte} b0    b[0:7]\n * @return {Number}       unsigned 32-bit integer\n */\nFn.uint32 = function(b24, b16, b8, b0) {\n  // Note: If you left-shift a byte by 24 in JS and that byte's\n  // MSbit is 1, the resulting value will be negative because JS casts\n  // bitwise operands (temporarily) to SIGNED 32-bit numbers. The\n  // final >>> 0 causes the sign bit to be disregarded, making sure our\n  // result is non-negative.\n  return ((b24 << 24) | (b16 << 16) | (b8 << 8) | b0) >>> 0;\n};\n\n/**\n * bitSize Get the number of bits in a given number\n * @param  {number} n   The number to evaluate\n * @return {number}     The bit count\n */\nFn.bitSize = function(n) {\n  return Math.round(Math.log2(n));\n};\n\n/**\n * The following generates functions and constants for utility when working\n * with binary numbers:\n *   - Fn.POW_2_0 through Fn.POW_2_53\n *   - Fn.u4(value) through Fn.u32(value)\n *   - Fn.s4(value) through Fn.s32(value)\n */\nvar POW = \"POW_2_\";\nvar U = \"u\";\nvar S = \"s\";\nvar MAX = Fn.bitSize(Number.MAX_SAFE_INTEGER) + 1;\nvar bitSizes = [ 4, 8, 10, 12, 16, 20, 24, 32 ];\n\n/**\n * Generate \"constants\" that represent powers of 2. Available for powers\n * 0 through 53.\n * @example\n * Fn.POW_2_17; // -> 131072\n */\nfor (var i = 0; i < MAX; i++) {\n  Fn[POW + i] = Math.pow(2, i);\n}\n\nbitSizes.forEach(function(bitSize) {\n  var decimal = Fn[POW + bitSize];\n  var half = decimal / 2 >>> 0;\n  var halfMinusOne = half - 1;\n\n  /**\n   * The function Fn[\"u\" + bitSize] will constrain a value to an unsigned\n   * value of that bit size.\n   *\n   * @param {Number} value\n   * @return {Number} constrained to an unsigned int\n   * @example\n   * Fn.u8(255); // --> 255\n   * Fn.u8(256); // --> 255\n   * Fn.u8(-255); // --> 0\n   * Fn.u8(-254); // -- 1\n   */\n  Fn[U + bitSize] = function(value) {\n    if (value < 0) {\n      value += decimal;\n    }\n    return Fn.constrain(value, 0, decimal - 1);\n  };\n\n  /**\n   * The function Fn[\"s\" + bitSize] will constrain a value to a signed value\n   * of that bit size. Remember that, e.g., range for signed 8-bit numbers\n   * is -128 to 127.\n   *\n   * @param {Number} value\n   * @return {Number} constrained to a SIGNED integer in bitsize range\n   * @example\n   * Fn.s8(100); // --> 100\n   * Fn.s8(128); // --> -128\n   * Fn.s8(127); // --> 127\n   * Fn.s8(255); // --> -1\n   */\n  Fn[S + bitSize] = function(value) {\n    if (value > halfMinusOne) {\n      value -= decimal;\n    }\n    return Fn.constrain(value, -half, halfMinusOne);\n  };\n});\n/*\n  Fn.POW_2_0   => 1\n  Fn.POW_2_1   => 2\n  Fn.POW_2_2   => 4\n  Fn.POW_2_3   => 8\n  Fn.POW_2_4   => 16\n  Fn.POW_2_5   => 32\n  Fn.POW_2_6   => 64\n  Fn.POW_2_7   => 128\n  Fn.POW_2_8   => 256\n  Fn.POW_2_9   => 512\n  Fn.POW_2_10  => 1024\n  Fn.POW_2_11  => 2048\n  Fn.POW_2_12  => 4096\n  Fn.POW_2_13  => 8192\n  Fn.POW_2_14  => 16384\n  Fn.POW_2_15  => 32768\n  Fn.POW_2_16  => 65536\n  Fn.POW_2_17  => 131072\n  Fn.POW_2_18  => 262144\n  Fn.POW_2_19  => 524288\n  Fn.POW_2_20  => 1048576\n  Fn.POW_2_21  => 2097152\n  Fn.POW_2_22  => 4194304\n  Fn.POW_2_23  => 8388608\n  Fn.POW_2_24  => 16777216\n  Fn.POW_2_25  => 33554432\n  Fn.POW_2_26  => 67108864\n  Fn.POW_2_27  => 134217728\n  Fn.POW_2_28  => 268435456\n  Fn.POW_2_29  => 536870912\n  Fn.POW_2_30  => 1073741824\n  Fn.POW_2_31  => 2147483648\n  Fn.POW_2_32  => 4294967296\n  Fn.POW_2_33  => 8589934592\n  Fn.POW_2_34  => 17179869184\n  Fn.POW_2_35  => 34359738368\n  Fn.POW_2_36  => 68719476736\n  Fn.POW_2_37  => 137438953472\n  Fn.POW_2_38  => 274877906944\n  Fn.POW_2_39  => 549755813888\n  Fn.POW_2_40  => 1099511627776\n  Fn.POW_2_41  => 2199023255552\n  Fn.POW_2_42  => 4398046511104\n  Fn.POW_2_43  => 8796093022208\n  Fn.POW_2_44  => 17592186044416\n  Fn.POW_2_45  => 35184372088832\n  Fn.POW_2_46  => 70368744177664\n  Fn.POW_2_47  => 140737488355328\n  Fn.POW_2_48  => 281474976710656\n  Fn.POW_2_49  => 562949953421312\n  Fn.POW_2_50  => 1125899906842624\n  Fn.POW_2_51  => 2251799813685248\n  Fn.POW_2_52  => 4503599627370496\n  Fn.POW_2_53  => 9007199254740992\n\n  Fn.u4(value) => 4-bit Unsigned Integer\n  Fn.s4(value) => 4-bit Signed Integer\n\n  Fn.u8(value) => 8-bit Unsigned Integer\n  Fn.s8(value) => 8-bit Signed Integer\n\n  Fn.u10(value) => 10-bit Unsigned Integer\n  Fn.s10(value) => 10-bit Signed Integer\n\n  Fn.u12(value) => 12-bit Unsigned Integer\n  Fn.s12(value) => 12-bit Signed Integer\n\n  Fn.u16(value) => 16-bit Unsigned Integer\n  Fn.s16(value) => 16-bit Signed Integer\n\n  Fn.u20(value) => 20-bit Unsigned Integer\n  Fn.s20(value) => 20-bit Signed Integer\n\n  Fn.u24(value) => 24-bit Unsigned Integer\n  Fn.s24(value) => 24-bit Signed Integer\n\n  Fn.u32(value) => 32-bit Unsigned Integer\n  Fn.s32(value) => 32-bit Signed Integer\n\n}\n*/\n\nFn.RAD_TO_DEG = 180 / Math.PI;\nFn.DEG_TO_RAD = Math.PI / 180;\nFn.TAU = 2 * Math.PI;\n\nmodule.exports = Fn;\n","/home/travis/build/npmtest/node-npmtest-johnny-five/node_modules/johnny-five/lib/repl.js":"var Emitter = require(\"events\").EventEmitter;\nvar repl = require(\"repl\");\nvar util = require(\"util\");\n\nvar priv = new Map();\n\n// Ported from\n// https://github.com/jgautier/firmata\n\nfunction Repl(opts) {\n  if (!Repl.isActive) {\n    Repl.isActive = true;\n\n    if (!(this instanceof Repl)) {\n      return new Repl(opts);\n    }\n\n    // Store context values in instance property\n    // this will be used for managing scope when\n    // injecting new values into an existing Repl\n    // session.\n    this.context = {};\n    this.ready = false;\n\n    var state = {\n      opts: opts,\n      board: opts.board,\n    };\n\n    priv.set(this, state);\n\n    // Store an accessible copy of the Repl instance\n    // on a static property. This is later used by the\n    // Board constructor to automattically setup Repl\n    // sessions for all programs, which reduces the\n    // boilerplate requirement.\n    Repl.ref = this;\n  } else {\n    return Repl.ref;\n  }\n}\n\n// Inherit event api\nutil.inherits(Repl, Emitter);\n\nRepl.isActive = false;\nRepl.isBlocked = false;\n\n// See Repl.ref notes above.\nRepl.ref = null;\n\nRepl.prototype.initialize = function(callback) {\n  var state = priv.get(this);\n\n  process.stdin.resume();\n  process.stdin.setEncoding(\"utf8\");\n\n  var replDefaults = {\n    prompt: \">> \",\n    useGlobal: false\n  };\n\n  // Call this immediately before repl.start to\n  // avoid crash on Intel Edison\n  state.board.info(\"Repl\", \"Initialized\");\n\n  // Initialize the REPL session with the default\n  // repl settings.\n  // Assign the returned repl instance to \"cmd\"\n  var cmd = repl.start(replDefaults);\n\n  this.ready = true;\n\n  // Assign a reference to the REPL's \"content\" object\n  // This will be use later by the Repl.prototype.inject\n  // method for allowing user programs to inject their\n  // own explicit values and reference\n  this.cmd = cmd;\n  this.context = cmd.context;\n\n  cmd.on(\"exit\", function() {\n    state.board.emit(\"exit\");\n    state.board.warn(\"Board\", \"Closing.\");\n\n    var interval = setInterval(function() {\n      /* istanbul ignore else */\n      if (!state.board.io.pending) {\n        clearInterval(interval);\n        process.nextTick(process.reallyExit);\n      }\n    }, 1);\n  });\n\n  this.inject(state.opts);\n\n  /* istanbul ignore else */\n  if (callback) {\n    process.nextTick(callback);\n  }\n};\n\nRepl.prototype.close = function() {\n  this.cmd.emit(\"exit\");\n};\n\nRepl.prototype.inject = function(obj) {\n  Object.keys(obj).forEach(function(key) {\n    Object.defineProperty(\n      this.context, key, Object.getOwnPropertyDescriptor(obj, key)\n    );\n  }, this);\n};\n\nmodule.exports = Repl;\n","/home/travis/build/npmtest/node-npmtest-johnny-five/node_modules/johnny-five/lib/board.options.js":"/**\n * Many pins have common aliases, especially SPI!\n */\n\nvar MISO = \"miso\";\nvar MOSI = \"mosi\";\nvar SCLK = \"sclk\";\nvar SS = \"ss\";\n\n// jshint unused:false\nvar aliases = {\n\n  // SCLK\n  clk: SCLK,\n  clock: SCLK,\n  sclk: SCLK,\n\n  // MISO\n  somi: MISO,\n  sdo: MISO,\n  do: MISO,\n  dout: MISO,\n  so: MISO,\n  mrsr: MISO,\n  miso: MISO,\n\n  // MOSI\n  simo: MOSI,\n  sdi: MOSI,\n  data: MOSI,\n  di: MOSI,\n  din: MOSI,\n  si: MOSI,\n  mtst: MOSI,\n  mosi: MOSI,\n\n  // SS\n  ncs: SS,\n  cs: SS,\n  csb: SS,\n  csn: SS,\n  en: SS,\n  ld: SS,\n  load: SS,\n  nss: SS,\n  ste: SS,\n  sync: SS,\n  ss: SS,\n};\n\n\n/**\n * Options\n *\n * @param {String} arg Pin address.\n * @param {Number} arg Pin address.\n * @param {Array} arg List of Pin addresses.\n *\n * @return {Options} normalized board options instance.\n */\n\nfunction Options(arg) {\n  if (!(this instanceof Options)) {\n    return new Options(arg);\n  }\n\n  var opts = {};\n\n  if (typeof arg === \"number\" ||\n    typeof arg === \"string\") {\n    opts.pin = arg;\n  } else if (Array.isArray(arg)) {\n    opts.pins = arg;\n  } else {\n    opts = arg;\n\n\n    // @Nick, this is where you want to focus.\n    // Anytime this path is taken, the constructor\n    // received an object. If the object contains\n    // a \"pins\" property that is ALSO an object, we need\n    // to normalize the keys of that object, using the\n    // \"aliases\" map defined above.\n    //\n    // This change will require renaming pin properties in\n    // a few classes, but I'm ok with that, because if we do this\n    // right, no existing code will break.\n    //\n  }\n\n  Object.assign(this, opts);\n}\n\nmodule.exports = Options;\n","/home/travis/build/npmtest/node-npmtest-johnny-five/node_modules/johnny-five/lib/board.pins.js":"var Options = require(\"./board.options\");\n\nvar MODES = {\n  INPUT: 0x00,\n  OUTPUT: 0x01,\n  ANALOG: 0x02,\n  PWM: 0x03,\n  SERVO: 0x04\n};\n\n\n/**\n * Pin Capability Signature Mapping\n */\n\nvar pinsToType = {\n  20: \"UNO\",\n  25: \"LEONARDO\",\n  70: \"MEGA\"\n};\n\nfunction Pins(board) {\n  if (!(this instanceof Pins)) {\n    return new Pins(board);\n  }\n\n  var io = board.io;\n  var pins = io.pins.slice();\n  var length = pins.length;\n  var type = pinsToType[length] || \"OTHER\";\n\n  board.type = type;\n\n  // Copy pin data to index\n  for (var i = 0; i < length; i++) {\n    this[i] = pins[i];\n  }\n\n  Object.defineProperties(this, {\n    type: {\n      value: type\n    },\n    length: {\n      value: length\n    }\n  });\n\n  // If an IO Plugin or Expander defines\n  // these, override the default\n  [\n    \"isInput\",\n    \"isOutput\",\n    \"isAnalog\",\n    \"isPwm\",\n    \"isServo\",\n  ].forEach(function(isType) {\n    if (io[isType]) {\n      this[isType] = io[isType];\n    }\n  }, this);\n}\n\nObject.keys(MODES).forEach(function(mode) {\n  Object.defineProperty(Pins, mode, {\n    value: MODES[mode]\n  });\n});\n\nfunction isFirmata(board) {\n  return board.io.name === \"Firmata\" || board.io.name === \"Mock\";\n}\n\nfunction hasPins(opts) {\n  return typeof opts.pin !== \"undefined\" ||\n    (typeof opts.pins !== \"undefined\" && opts.pins.length);\n}\n\nPins.isFirmata = isFirmata;\n\nPins.Error = function(opts) {\n  throw new Error(\n    \"Pin Error: \" + opts.pin +\n    \" is not a valid \" + opts.type +\n    \" pin (\" + opts.via + \")\"\n  );\n};\n\nvar normalizers = new Map();\n\nPins.normalize = function(opts, board) {\n  var type = board.pins.type;\n  var isArduino = isFirmata(board);\n  var normalizer = normalizers.get(board);\n  var isNormalizing;\n\n  if (typeof opts === \"string\" ||\n    typeof opts === \"number\" ||\n    Array.isArray(opts)) {\n\n    opts = new Options(opts);\n  }\n\n  if (!normalizer) {\n    isNormalizing = board.io && typeof board.io.normalize === \"function\";\n\n    normalizer = function(pin) {\n      return isArduino ?\n        Pins.fromAnalog(Pins.translate(pin, type)) :\n        (isNormalizing ? board.io.normalize(pin) : pin);\n    };\n\n    normalizers.set(board, normalizer);\n  }\n\n  // Auto-normalize pin values, this reduces boilerplate code\n  // inside module constructors\n  if (hasPins(opts)) {\n\n    // When an array of pins is present, attempt to\n    // normalize them if necessary\n    if (opts.pins) {\n      opts.pins = opts.pins.map(normalizer);\n    } else {\n      opts.pin = normalizer(opts.pin);\n    }\n  }\n\n  return opts;\n};\n\nPins.normalize.clear = function() {\n  normalizers.clear();\n};\n\n// Special kit-centric pin translations\nPins.translations = {\n  UNO: {\n    dtoa: {\n      14: \"A0\",\n      15: \"A1\",\n      16: \"A2\",\n      17: \"A3\",\n      18: \"A4\",\n      19: \"A5\"\n    },\n\n    // TinkerKit\n    tinker: {\n      I0: \"A0\",\n      I1: \"A1\",\n      I2: \"A2\",\n      I3: \"A3\",\n      I4: \"A4\",\n      I5: \"A5\",\n\n      O0: 11,\n      O1: 10,\n      O2: 9,\n      O3: 6,\n      O4: 5,\n      O5: 3,\n\n      D13: 13,\n      D12: 12,\n      D8: 8,\n      D7: 7,\n      D4: 4,\n      D2: 2\n    }\n  },\n  MEGA: {\n    dtoa: {\n      54: \"A0\",\n      55: \"A1\",\n      56: \"A2\",\n      57: \"A3\",\n      58: \"A4\",\n      59: \"A5\",\n      60: \"A6\",\n      61: \"A7\",\n      62: \"A8\",\n      63: \"A9\"\n    },\n\n    // TinkerKit\n    tinker: {\n      I0: \"A0\",\n      I1: \"A1\",\n      I2: \"A2\",\n      I3: \"A3\",\n      I4: \"A4\",\n      I5: \"A5\",\n      I6: \"A6\",\n      I7: \"A7\",\n      I8: \"A8\",\n      I9: \"A9\",\n\n      O0: 11,\n      O1: 10,\n      O2: 9,\n      O3: 6,\n      O4: 5,\n      O5: 3,\n\n      D13: 13,\n      D12: 12,\n      D8: 8,\n      D7: 7,\n      D4: 4,\n      D2: 2\n    }\n  }\n};\n\nPins.translations.LEONARDO = Pins.translations.UNO;\n\nPins.translate = function(pin, type) {\n  var translations = Pins.translations[type.toUpperCase()];\n\n  if (!translations) {\n    return pin;\n  }\n\n  return Object.keys(translations).reduce(function(pin, map) {\n    return translations[map][pin] || pin;\n  }, pin);\n};\n\nPins.fromAnalog = function(pin) {\n  if (typeof pin === \"string\" && pin[0] === \"A\") {\n    return parseInt(pin.slice(1), 10);\n  }\n  return pin;\n};\n\nPins.identity = function(pins, needle) {\n  return [].findIndex.call(pins, function(pin) {\n    return pin.name === needle || pin.id === needle || pin.port === needle;\n  });\n};\n\n/**\n * (generated methods)\n *\n * Pins.prototype.isInput\n * Pins.prototype.isOutput\n * Pins.prototype.isAnalog\n * Pins.prototype.isPwm\n * Pins.prototype.isServo\n *\n */\nObject.keys(MODES).forEach(function(key) {\n  var name = key[0] + key.slice(1).toLowerCase();\n\n  Pins.prototype[\"is\" + name] = function(pin) {\n    var attrs = this[pin] || this[Pins.identity(this, pin)];\n\n    if (attrs && attrs.supportedModes.includes(MODES[key])) {\n      return true;\n    }\n    return false;\n  };\n});\n\nPins.prototype.isDigital = function(pin) {\n  var attrs = this[pin] || this[Pins.identity(this, pin)];\n\n  if (attrs && attrs.supportedModes.length) {\n    return true;\n  }\n  return false;\n};\n\nmodule.exports = Pins;\n","/home/travis/build/npmtest/node-npmtest-johnny-five/node_modules/johnny-five/lib/expander.js":"var Board = require(\"./board\");\nvar Emitter = require(\"events\").EventEmitter;\nvar util = require(\"util\");\nvar nanosleep = require(\"./sleep\").nano;\nvar Fn = require(\"./fn\");\nvar priv = new Map();\nvar active = new Map();\n\nfunction Base() {\n  Emitter.call(this);\n\n  this.HIGH = 1;\n  this.LOW = 0;\n  this.isReady = false;\n\n  this.MODES = {};\n  this.pins = [];\n  this.analogPins = [];\n}\n\nutil.inherits(Base, Emitter);\n\nvar Controllers = {\n  // http://www.adafruit.com/datasheets/mcp23017.pdf\n  MCP23017: {\n    ADDRESSES: {\n      value: [0x20]\n    },\n    REGISTER: {\n      value: {\n        // IO A\n        IODIRA: 0x00,\n        GPPUA: 0x0C,\n        GPIOA: 0x12,\n        OLATA: 0x14,\n        // IO B\n        IODIRB: 0x01,\n        GPPUB: 0x0D,\n        GPIOB: 0x13,\n        OLATB: 0x15,\n      }\n    },\n    initialize: {\n      value: function(opts) {\n        var state = priv.get(this);\n\n        state.iodir = [0xff, 0xff];\n        state.olat = [0xff, 0xff];\n        state.gpio = [0xff, 0xff];\n        state.gppu = [0x00, 0x00];\n\n        this.address = opts.address || this.ADDRESSES[0];\n        opts.address = this.address;\n\n        this.io.i2cConfig(opts);\n        this.io.i2cWrite(this.address, [this.REGISTER.IODIRA, state.iodir[this.REGISTER.IODIRA]]);\n        this.io.i2cWrite(this.address, [this.REGISTER.IODIRB, state.iodir[this.REGISTER.IODIRB]]);\n\n        Object.assign(this.MODES, this.io.MODES);\n\n        for (var i = 0; i < 16; i++) {\n          this.pins.push({\n            supportedModes: [\n              this.MODES.INPUT,\n              this.MODES.OUTPUT\n            ],\n            mode: 0,\n            value: 0,\n            report: 0,\n            analogChannel: 127\n          });\n\n          this.pinMode(i, this.MODES.OUTPUT);\n          this.digitalWrite(i, this.LOW);\n        }\n\n        this.name = \"MCP23017\";\n        this.isReady = true;\n\n        this.emit(\"connect\");\n        this.emit(\"ready\");\n      }\n    },\n    normalize: {\n      value: function(pin) {\n        return pin;\n      }\n    },\n    // 1.6.1 I/O DIRECTION REGISTER\n    pinMode: {\n      value: function(pin, mode) {\n        var state = priv.get(this);\n        var pinIndex = pin;\n        var port = 0;\n        var iodir = null;\n\n        if (pin < 8) {\n          port = this.REGISTER.IODIRA;\n        } else {\n          port = this.REGISTER.IODIRB;\n          pin -= 8;\n        }\n\n        iodir = state.iodir[port];\n\n        if (mode === this.io.MODES.INPUT) {\n          iodir |= 1 << pin;\n        } else {\n          iodir &= ~(1 << pin);\n        }\n\n        this.pins[pinIndex].mode = mode;\n        this.io.i2cWrite(this.address, [port, iodir]);\n\n        state.iodir[port] = iodir;\n      }\n    },\n    // 1.6.10 PORT REGISTER\n    digitalWrite: {\n      value: function(pin, value) {\n        var state = priv.get(this);\n        var pinIndex = pin;\n        var port = 0;\n        var gpio = 0;\n        // var olataddr = 0;\n        var gpioaddr = 0;\n\n        if (pin < 8) {\n          port = this.REGISTER.IODIRA;\n          // olataddr = this.REGISTER.OLATA;\n          gpioaddr = this.REGISTER.GPIOA;\n        } else {\n          port = this.REGISTER.IODIRB;\n          // olataddr = this.REGISTER.OLATB;\n          gpioaddr = this.REGISTER.GPIOB;\n          pin -= 8;\n        }\n\n        gpio = state.olat[port];\n\n        if (value === this.io.HIGH) {\n          gpio |= 1 << pin;\n        } else {\n          gpio &= ~(1 << pin);\n        }\n\n        this.pins[pinIndex].report = 0;\n        this.pins[pinIndex].value = value;\n        this.io.i2cWrite(this.address, [gpioaddr, gpio]);\n\n        state.olat[port] = gpio;\n        state.gpio[port] = gpio;\n      }\n    },\n    // 1.6.7 PULL-UP RESISTOR\n    // CONFIGURATION REGISTER\n    pullUp: {\n      value: function(pin, value) {\n        var state = priv.get(this);\n        var port = 0;\n        var gppu = 0;\n        var gppuaddr = 0;\n\n        if (pin < 8) {\n          port = this.REGISTER.IODIRA;\n          gppuaddr = this.REGISTER.GPPUA;\n        } else {\n          port = this.REGISTER.IODIRB;\n          gppuaddr = this.REGISTER.GPPUB;\n          pin -= 8;\n        }\n\n        gppu = state.gppu[port];\n\n        if (value === this.io.HIGH) {\n          gppu |= 1 << pin;\n        } else {\n          gppu &= ~(1 << pin);\n        }\n\n        this.io.i2cWrite(this.address, [gppuaddr, gppu]);\n\n        state.gppu[port] = gppu;\n      }\n    },\n    digitalRead: {\n      value: function(pin, callback) {\n        var pinIndex = pin;\n        var gpioaddr = 0;\n\n        if (pin < 8) {\n          gpioaddr = this.REGISTER.GPIOA;\n        } else {\n          gpioaddr = this.REGISTER.GPIOB;\n          pin -= 8;\n        }\n\n        this.pins[pinIndex].report = 1;\n\n        this.on(\"digital-read-\" + pin, callback);\n\n        this.io.i2cRead(this.address, gpioaddr, 1, function(data) {\n          var byte = data[0];\n          var value = byte >> pin & 0x01;\n\n          this.pins[pinIndex].value = value;\n\n          this.emit(\"digital-read-\" + pin, value);\n        }.bind(this));\n      }\n    },\n  },\n  MCP23008: {\n    ADDRESSES: {\n      value: [0x20]\n    },\n    REGISTER: {\n      value: {\n        IODIR: 0x00,\n        GPPU: 0x06,\n        GPIO: 0x09,\n        OLAT: 0x0A,\n      }\n    },\n    initialize: {\n      value: function(opts) {\n        var state = priv.get(this);\n\n        state.iodir = [0xff];\n        state.olat = [0xff];\n        state.gpio = [0xff];\n        state.gppu = [0x00];\n\n        this.address = opts.address || this.ADDRESSES[0];\n\n        opts.address = this.address;\n\n        this.io.i2cConfig(opts);\n        this.io.i2cWrite(this.address, [this.REGISTER.IODIR, state.iodir[this.REGISTER.IODIR]]);\n\n        Object.assign(this.MODES, this.io.MODES);\n\n        for (var i = 0; i < 8; i++) {\n          this.pins.push({\n            supportedModes: [\n              this.MODES.INPUT,\n              this.MODES.OUTPUT\n            ],\n            mode: 0,\n            value: 0,\n            report: 0,\n            analogChannel: 127\n          });\n\n          this.pinMode(i, this.MODES.OUTPUT);\n          this.digitalWrite(i, this.LOW);\n        }\n\n        this.name = \"MCP23008\";\n        this.isReady = true;\n\n        this.emit(\"connect\");\n        this.emit(\"ready\");\n      }\n    },\n    normalize: {\n      value: function(pin) {\n        return pin;\n      }\n    },\n    // 1.6.1 I/O DIRECTION REGISTER\n    pinMode: {\n      value: function(pin, mode) {\n        var state = priv.get(this);\n        var pinIndex = pin;\n        var port = this.REGISTER.IODIR;\n        var iodir = state.iodir[port];\n\n        if (mode === this.io.MODES.INPUT) {\n          iodir |= 1 << pin;\n        } else {\n          iodir &= ~(1 << pin);\n        }\n\n        this.pins[pinIndex].mode = mode;\n        this.io.i2cWrite(this.address, [port, iodir]);\n\n        state.iodir[port] = iodir;\n      }\n    },\n    // 1.6.10 PORT REGISTER\n    digitalWrite: {\n      value: function(pin, value) {\n        var state = priv.get(this);\n        var pinIndex = pin;\n        var port = this.REGISTER.IODIR;\n        var gpioaddr = this.REGISTER.GPIO;\n        var gpio = state.olat[port];\n\n        if (value === this.io.HIGH) {\n          gpio |= 1 << pin;\n        } else {\n          gpio &= ~(1 << pin);\n        }\n\n        this.pins[pinIndex].report = 0;\n        this.pins[pinIndex].value = value;\n        this.io.i2cWrite(this.address, [gpioaddr, gpio]);\n\n        state.olat[port] = gpio;\n        state.gpio[port] = gpio;\n      }\n    },\n    // 1.6.7 PULL-UP RESISTOR\n    // CONFIGURATION REGISTER\n    pullUp: {\n      value: function(pin, value) {\n        var state = priv.get(this);\n        var port = this.REGISTER.IODIR;\n        var gppuaddr = this.REGISTER.GPPU;\n        var gppu = state.gppu[port];\n\n        if (value === this.io.HIGH) {\n          gppu |= 1 << pin;\n        } else {\n          gppu &= ~(1 << pin);\n        }\n\n        this.io.i2cWrite(this.address, [gppuaddr, gppu]);\n\n        state.gppu[port] = gppu;\n      }\n    },\n    digitalRead: {\n      value: function(pin, callback) {\n        var pinIndex = pin;\n        var gpioaddr = this.REGISTER.GPIO;\n\n        this.pins[pinIndex].report = 1;\n\n        this.on(\"digital-read-\" + pin, callback);\n\n        this.io.i2cRead(this.address, gpioaddr, 1, function(data) {\n          var byte = data[0];\n          var value = byte >> pin & 0x01;\n\n          this.pins[pinIndex].value = value;\n\n          this.emit(\"digital-read-\" + pin, value);\n        }.bind(this));\n      }\n    },\n  },\n  PCF8574: {\n    ADDRESSES: {\n      value: [0x20]\n    },\n    REGISTER: {},\n    initialize: {\n      value: function(opts) {\n        var state = priv.get(this);\n\n        state.port = 0x00;\n        state.ddr = 0x00;\n        state.pins = 0x00;\n\n        this.address = opts.address || this.ADDRESSES[0];\n\n        opts.address = this.address;\n        this.io.i2cConfig(opts);\n\n        Object.assign(this.MODES, this.io.MODES);\n\n        for (var i = 0; i < 8; i++) {\n          this.pins.push({\n            supportedModes: [\n              this.MODES.INPUT,\n              this.MODES.OUTPUT\n            ],\n            mode: 1,\n            value: 0,\n            report: 0,\n            analogChannel: 127\n          });\n\n          this.pinMode(i, this.MODES.OUTPUT);\n          this.digitalWrite(i, this.LOW);\n        }\n\n        this.name = \"PCF8574\";\n        this.isReady = true;\n\n        this.emit(\"connect\");\n        this.emit(\"ready\");\n      }\n    },\n    normalize: {\n      value: function(pin) {\n        return pin;\n      }\n    },\n    pinMode: {\n      value: function(pin, mode) {\n        var state = priv.get(this);\n        var pinIndex = pin;\n        var port = state.port;\n        var ddr = state.ddr;\n        var pins = state.pins;\n\n        if (mode === this.MODES.INPUT) {\n          ddr &= ~(1 << pin);\n          port &= ~(1 << pin);\n        } else {\n          ddr |= (1 << pin);\n          port &= ~(1 << pin);\n        }\n\n        this.pins[pinIndex].mode = mode;\n\n        state.port = port;\n        state.ddr = ddr;\n\n        this.io.i2cWrite(this.address, (pins & ~ddr) | port);\n      }\n    },\n    digitalWrite: {\n      value: function(pin, value) {\n        var state = priv.get(this);\n        var pinIndex = pin;\n        var port = state.port;\n        var ddr = state.ddr;\n        var pins = state.pins;\n\n        if (value) {\n          port |= 1 << pin;\n        } else {\n          port &= ~(1 << pin);\n        }\n\n        this.pins[pinIndex].report = 0;\n        this.pins[pinIndex].value = value;\n\n        state.port = port;\n\n        this.io.i2cWrite(this.address, (pins & ~ddr) | port);\n      }\n    },\n    digitalRead: {\n      value: function(pin, callback) {\n        var state = priv.get(this);\n        var pinIndex = pin;\n\n        this.pins[pinIndex].report = 1;\n\n        this.on(\"digital-read-\" + pin, callback);\n\n        this.io.i2cRead(this.address, 1, function(data) {\n          var byte = data[0];\n          var value = byte >> pin & 0x01;\n\n          state.pins = byte;\n\n          this.pins[pinIndex].value = value;\n\n          this.emit(\"digital-read-\" + pin, value);\n        }.bind(this));\n      }\n    },\n  },\n  PCF8575: {\n    ADDRESSES: {\n      value: [0x20]\n    },\n    REGISTER: {},\n    initialize: {\n      value: function(opts) {\n        var state = priv.get(this);\n\n        state.port = [0x00, 0x01];\n        state.gpio = [0x00, 0x00];\n\n        this.address = opts.address || this.ADDRESSES[0];\n\n        opts.address = this.address;\n        this.io.i2cConfig(opts);\n\n        Object.assign(this.MODES, this.io.MODES);\n\n        for (var i = 0; i < 16; i++) {\n          this.pins.push({\n            supportedModes: [\n              this.MODES.INPUT,\n              this.MODES.OUTPUT\n            ],\n            mode: 1,\n            value: 0,\n            report: 0,\n            analogChannel: 127\n          });\n\n          this.pinMode(i, this.MODES.OUTPUT);\n          this.digitalWrite(i, this.LOW);\n        }\n\n        // Set all pins low on initialization\n        this.io.i2cWrite(this.address, state.gpio);\n\n        this.name = \"PCF8575\";\n        this.isReady = true;\n\n        this.emit(\"connect\");\n        this.emit(\"ready\");\n      }\n    },\n    normalize: {\n      value: function(pin) {\n        return pin;\n      }\n    },\n    pinMode: {\n      value: function(pin, mode) {\n        var pinIndex = pin;\n        this.pins[pinIndex].mode = mode;\n      }\n    },\n    digitalWrite: {\n      value: function(pin, value) {\n        var state = priv.get(this);\n        var pinIndex = pin;\n        var port;\n\n        if (pin < 8) {\n          port = 0;\n        } else {\n          port = 1;\n          pin -= 8;\n        }\n\n        if (value === this.io.HIGH) {\n          state.gpio[port] |= 1 << pin;\n        } else {\n          state.gpio[port] &= ~(1 << pin);\n        }\n\n        this.pins[pinIndex].report = 0;\n        this.pins[pinIndex].value = value;\n\n        this.io.i2cWrite(this.address, state.gpio);\n      }\n    },\n    digitalRead: {\n      value: function(pin, callback) {\n        var pinIndex = pin;\n        var port;\n\n        if (pin < 8) {\n          port = 0;\n        } else {\n          port = 1;\n          pin -= 8;\n        }\n\n        this.pins[pinIndex].report = 1;\n\n        this.on(\"digital-read-\" + pin, callback);\n\n        this.io.i2cRead(this.address, 2, function(data) {\n          var byte = data[port];\n          var value = byte >> pin & 0x01;\n\n          this.pins[pinIndex].value = value;\n\n          this.emit(\"digital-read-\" + pin, value);\n        }.bind(this));\n      }\n    },\n  },\n  PCA9685: {\n    ADDRESSES: {\n      value: [0x40]\n    },\n    REGISTER: {\n      value: {\n        MODE1: 0x00,\n        PRESCALE: 0xFE,\n        BASE: 0x06\n      }\n    },\n    initialize: {\n      value: function(opts) {\n        var state = priv.get(this);\n\n        // 7.3.5 PWM frequency PRE_SCALE\n        //\n        state.frequency = Board.constrain(opts.frequency || 1526, 24, 1526) * 0.9;\n\n        this.address = opts.address || this.ADDRESSES[0];\n        this.pwmRange = opts.pwmRange || [0, 4095];\n\n        Object.defineProperties(this, {\n          prescale: {\n            get: function() {\n              // PCA9685 has an on-board 25MHz clock source\n\n              // 7.3.5 PWM frequency PRE_SCALE\n              return Math.round(25000000 / (4096 * state.frequency)) - 1;\n            }\n          },\n          frequency: {\n            get: function() {\n              return state.frequency;\n            }\n          }\n        });\n\n        opts.address = this.address;\n\n        this.io.i2cConfig(opts);\n\n        // Reset\n        this.io.i2cWriteReg(this.address, this.REGISTER.MODE1, 0x00);\n        // Sleep\n        this.io.i2cWriteReg(this.address, this.REGISTER.MODE1, 0x10);\n        // Set prescalar\n        this.io.i2cWriteReg(this.address, this.REGISTER.PRESCALE, this.prescale);\n        // Wake up\n        this.io.i2cWriteReg(this.address, this.REGISTER.MODE1, 0x00);\n        // Wait 5 nanoseconds for restart\n        nanosleep(5);\n        // Auto-increment\n        this.io.i2cWriteReg(this.address, this.REGISTER.MODE1, 0xa1);\n\n        Object.assign(this.MODES, this.io.MODES);\n\n        for (var i = 0; i < 16; i++) {\n          this.pins.push({\n            supportedModes: [\n              this.MODES.OUTPUT,\n              this.MODES.PWM,\n              this.MODES.SERVO,\n            ],\n            mode: 0,\n            value: 0,\n            report: 0,\n            analogChannel: 127\n          });\n\n          this.pinMode(i, this.MODES.OUTPUT);\n          this.digitalWrite(i, this.LOW);\n        }\n\n        this.name = \"PCA9685\";\n        this.isReady = true;\n\n        this.emit(\"connect\");\n        this.emit(\"ready\");\n      }\n    },\n    normalize: {\n      value: function(pin) {\n        return this.io.name === \"Tessel 2\" ? (pin - 1) : pin;\n      }\n    },\n    pinMode: {\n      value: function(pin, mode) {\n        if (this.pins[pin] === undefined) {\n          throw new RangeError(\"Invalid PCA9685 pin: \" + pin);\n        }\n        this.pins[pin].mode = mode;\n      }\n    },\n    digitalWrite: {\n      value: function(pin, value) {\n        this.pwmWrite(pin, value ? 255 : 0);\n      }\n    },\n    analogWrite: {\n      value: function(pin, value) {\n        this.pwmWrite(pin, value);\n      }\n    },\n    servoWrite: {\n      value: function(pin, value) {\n\n        value = Board.constrain(value, 0, 180);\n\n        var off = Fn.map(value, 0, 180, this.pwmRange[0] / 4, this.pwmRange[1] / 4);\n\n        this.io.i2cWrite(this.address, [\n          this.REGISTER.BASE + 4 * pin,\n          0, 0,\n          off, off >> 8\n        ]);\n      }\n    },\n    pwmWrite: {\n      value: function(pin, value) {\n\n        if (this.pins[pin] === undefined) {\n          throw new RangeError(\"Invalid PCA9685 pin: \" + pin);\n        }\n\n        value = Board.constrain(value, 0, 255);\n\n        var on = 0;\n        var off = this.pwmRange[1] * value / 255;\n\n        if (value === 0) {\n          // Special value for signal fully off.\n          on = 0;\n          off = 4096;\n        }\n\n        if (value === 255) {\n          // Special value for signal fully on.\n          on = 4096;\n          off = 0;\n        }\n\n        this.io.i2cWrite(this.address, [\n          this.REGISTER.BASE + 4 * pin,\n          on, on >> 8,\n          off, off >> 8\n        ]);\n\n        this.pins[pin].value = value;\n      }\n    }\n  },\n  // http://www.nxp.com/documents/data_sheet/PCF8591.pdf\n  PCF8591: {\n    ADDRESSES: {\n      value: [0x48]\n    },\n    REGISTER: {},\n    initialize: {\n      value: function(opts) {\n        var state = priv.get(this);\n\n        state.control = 0x45;\n        state.reading = false;\n\n        this.address = opts.address || this.ADDRESSES[0];\n\n        opts.address = this.address;\n        this.io.i2cConfig(opts);\n\n        Object.assign(this.MODES, this.io.MODES);\n\n        for (var i = 0; i < 4; i++) {\n          this.pins.push({\n            supportedModes: [\n              this.MODES.ANALOG\n            ],\n            mode: 1,\n            value: 0,\n            report: 0,\n            analogChannel: i\n          });\n        }\n\n        this.analogPins.push(0, 1, 2, 3);\n\n        this.io.i2cWrite(this.address, state.control);\n\n        this.name = \"PCF8591\";\n        this.isReady = true;\n\n        this.emit(\"connect\");\n        this.emit(\"ready\");\n      }\n    },\n    normalize: {\n      value: function(pin) {\n        if (typeof pin === \"string\" && pin[0] === \"A\") {\n          return +pin.slice(1);\n        }\n        return pin;\n      }\n    },\n    pinMode: {\n      value: function(pin, mode) {\n        this.pins[pin].mode = mode;\n      }\n    },\n    analogRead: {\n      value: function(pin, callback) {\n        var state = priv.get(this);\n        var pinIndex = pin;\n\n        this.pins[pinIndex].report = 1;\n\n        this.on(\"analog-read-\" + pin, callback);\n\n        // Since this operation will read all 4 pins,\n        // it only needs to be initiated once.\n        if (!state.reading) {\n          state.reading = true;\n\n          this.io.i2cRead(this.address, 4, function(data) {\n            var value;\n            for (var i = 0; i < 4; i++) {\n              value = data[i] << 2;\n              this.pins[i].value = value;\n\n              if (this.pins[i].report) {\n                this.emit(\"analog-read-\" + i, value);\n              }\n            }\n          }.bind(this));\n        }\n      }\n    },\n  },\n  MUXSHIELD2: {\n    initialize: {\n      value: function() {\n        var state = priv.get(this);\n\n        // _S[\\d]   (Digital: 2, 4, 6, 7)\n        state.select = [2, 4, 6, 7];\n        // _IOS[\\d] (Digital: 10, 11, 12)\n        state.ios = [null, 10, 11, 12];\n        // _IO[\\d]  (Analog In: \"A0\", \"A1\", \"A2\")\n        state.io = [null, 14, 15, 16];\n        state.aio = [null, 0, 1, 2];\n\n        state.outMode = 8;\n        state.pinMap = {};\n        state.rowReading = [false, false, false];\n        state.rowMode = [null, null, null];\n        // Each rowValue is a single uint16\n        state.rowValues = [0, 0, 0];\n\n        Object.assign(this.MODES, {\n          INPUT: 0,\n          OUTPUT: 1,\n          ANALOG: 2,\n        });\n\n        this.io.pinMode(state.select[0], this.MODES.OUTPUT);\n        this.io.pinMode(state.select[1], this.MODES.OUTPUT);\n        this.io.pinMode(state.select[2], this.MODES.OUTPUT);\n        this.io.pinMode(state.select[3], this.MODES.OUTPUT);\n\n        this.io.pinMode(state.outMode, this.MODES.OUTPUT);\n        this.io.digitalWrite(state.outMode, this.LOW);\n\n        this.io.pinMode(state.ios[1], this.MODES.OUTPUT);\n        this.io.pinMode(state.ios[2], this.MODES.OUTPUT);\n        this.io.pinMode(state.ios[3], this.MODES.OUTPUT);\n\n        var row = 1;\n        var mask = 16;\n        var index = 0;\n\n        for (var i = 0; i < 48; i++) {\n          var band = i & mask;\n\n          if (band === mask) {\n            row++;\n            mask *= 2;\n            index = 0;\n          }\n\n          state.pinMap[\"IO\" + row + \"-\" + index] = i;\n\n          this.pins.push({\n            row: row,\n            index: index,\n            supportedModes: [\n              this.MODES.INPUT,\n              this.MODES.OUTPUT,\n              this.MODES.ANALOG,\n            ],\n            mode: 1,\n            value: 0,\n            report: 0,\n            analogChannel: i\n          });\n\n          this.analogPins.push(i);\n\n          // TODO: Not sure about this?\n          // this.io.pinMode(i, this.MODES.OUTPUT);\n          // this.io.digitalWrite(i, this.LOW);\n\n          index++;\n        }\n\n        this.name = \"MUXSHIELD2\";\n        this.isReady = true;\n\n        this.emit(\"connect\");\n        this.emit(\"ready\");\n      }\n    },\n    normalize: {\n      value: function(pin) {\n        return pin;\n      }\n    },\n    pinMode: {\n      value: function(pin, mode) {\n        var state = priv.get(this);\n        var pinIndex = state.pinMap[pin];\n\n        if (pinIndex === undefined) {\n          throw new Error(\"MUXSHIELD2: Invalid Pin number or name: \" + pin);\n        }\n\n        var row = this.pins[pinIndex].row;\n        var rowModeIndex = row - 1;\n        var rowMode = state.rowMode[rowModeIndex];\n\n        if (rowMode === mode) {\n          return this;\n        }\n\n        if (rowMode !== null && rowMode !== mode) {\n          throw new Error(\"MUXSHIELD2: Cannot set mixed modes per IO row.\");\n        }\n\n        state.rowMode[rowModeIndex] = mode;\n\n        // MUXSHIELD2 Disallows mixing modes per row.\n        // Once a mode is set for a given pin in a given row,\n        // set all the pins in that row to the same mode.\n        for (var i = 0; i < 16; i++) {\n          this.pins[rowModeIndex + i].mode = mode;\n        }\n\n        var IO = state.io[row];\n        var IOS = state.ios[row];\n\n        if (mode === this.MODES.INPUT) {\n          // Read an analog input as digital\n          this.io.pinMode(IO, this.MODES.INPUT);\n          // this.io.digitalWrite(IOS, this.LOW);\n        }\n\n        if (mode === this.MODES.OUTPUT) {\n          this.io.pinMode(IO, this.MODES.OUTPUT);\n          this.io.digitalWrite(IOS, this.HIGH);\n        }\n      }\n    },\n    digitalWrite: {\n      value: function(pin, value) {\n        var state = priv.get(this);\n        var pinIndex = state.pinMap[pin];\n\n        if (pinIndex === undefined) {\n          throw new Error(\"MUXSHIELD2: Invalid Pin number or name: \" + pin);\n        }\n\n        var row = this.pins[pinIndex].row;\n        var rowValueIndex = row - 1;\n        var rowValue = state.rowValues[rowValueIndex];\n\n        var ioPin = row - 1;\n        var offset = ioPin * 16;\n        var channel = pinIndex - offset;\n\n        if (value) {\n          rowValue |= 1 << channel;\n        } else {\n          rowValue &= ~(1 << channel);\n        }\n\n        this.io.digitalWrite(state.select[3], this.LOW);\n        this.io.digitalWrite(state.outMode, this.HIGH);\n\n        var S = state.select[row - 1];\n        var IO = state.io[row];\n\n        for (var i = 15; i >= 0; i--) {\n          this.io.digitalWrite(S, this.LOW);\n          this.io.digitalWrite(IO, (rowValue >> i) & 1);\n          this.io.digitalWrite(S, this.HIGH);\n        }\n\n        this.io.digitalWrite(state.select[3], this.HIGH);\n        this.io.digitalWrite(state.outMode, this.LOW);\n\n        this.pins[pinIndex].value = value;\n\n        state.rowValues[rowValueIndex] = rowValue;\n      }\n    },\n    digitalRead: {\n      value: function(pin, callback) {\n        this.ioRead(\"digital\", pin, callback);\n      }\n    },\n    analogRead: {\n      value: function(pin, callback) {\n        this.ioRead(\"analog\", pin, callback);\n      }\n    },\n    ioRead: {\n      value: function(type, pin, callback) {\n        var state = priv.get(this);\n        var pinIndex = state.pinMap[pin];\n\n        if (pinIndex === undefined) {\n          throw new Error(\"MUXSHIELD2: Invalid Pin number or name: \" + pin);\n        }\n\n        this.on(type + \"-read-\" + pinIndex, callback);\n\n        var isAnalog = type === \"analog\" ? true : false;\n        var row = this.pins[pinIndex].row;\n        var rowReadingIndex = row - 1;\n        var offset = rowReadingIndex * 16;\n        var channel = pinIndex - offset;\n\n        this.pins[pinIndex].report = 1;\n        this.pins[pinIndex].channel = channel;\n        this.pins[pinIndex].ioPin = isAnalog ? rowReadingIndex : rowReadingIndex + 14;\n\n        var nextPinIndex = function() {\n          var startAt = nextPinIndex.lastPinIndex + 1;\n\n          for (var i = startAt; i < this.pins.length; i++) {\n            if (this.pins[i].report === 1) {\n              nextPinIndex.lastPinIndex = i;\n              return nextPinIndex.lastPinIndex;\n            }\n          }\n\n          nextPinIndex.lastPinIndex = -1;\n\n          return nextPinIndex();\n        }.bind(this);\n\n        nextPinIndex.lastPinIndex = -1;\n\n        var handler = function(value) {\n          var pinIndex = nextPinIndex.lastPinIndex;\n          var pin = this.pins[pinIndex];\n\n          this.emit(type + \"-read-\" + pinIndex, value);\n\n          this.io.removeListener(type + \"-read-\" + pin.ioPin, handler);\n\n          setTimeout(read, 10);\n        }.bind(this);\n\n        var read = function() {\n          var pinIndex = nextPinIndex();\n          var pin = this.pins[pinIndex];\n\n          this.select(pin.channel);\n\n          if (isAnalog) {\n            this.io.pinMode(pin.ioPin, this.io.MODES.ANALOG);\n            this.io.analogRead(pin.ioPin, handler);\n          } else {\n            this.io.digitalRead(pin.ioPin, handler);\n          }\n        }.bind(this);\n\n        if (!state.rowReading[rowReadingIndex]) {\n          state.rowReading[rowReadingIndex] = true;\n          read();\n        }\n      }\n    },\n\n\n    select: {\n      value: function(channel) {\n        var state = priv.get(this);\n        this.io.digitalWrite(state.outMode, this.LOW);\n        this.io.digitalWrite(state.select[0], (channel & 1));\n        this.io.digitalWrite(state.select[1], (channel & 3) >> 1);\n        this.io.digitalWrite(state.select[2], (channel & 7) >> 2);\n        this.io.digitalWrite(state.select[3], (channel & 15) >> 3);\n      }\n    }\n  },\n\n  GROVEPI: {\n    ADDRESSES: {\n      value: [0x04]\n    },\n    REGISTER: {},\n    COMMANDS: {\n      value: {\n        DIGITAL_READ: 0x01,\n        DIGITAL_WRITE: 0x02,\n        ANALOG_READ: 0x03,\n        ANALOG_WRITE: 0x04,\n        PIN_MODE: 0x05,\n        PING_READ: 0x07,\n      }\n    },\n    initialize: {\n      value: function(opts) {\n        var state = priv.get(this);\n\n        state.isReading = false;\n        state.pinMap = {\n          D2: 2,\n          D3: 3,\n          D4: 4,\n          D5: 5,\n          D6: 6,\n          D7: 7,\n          D8: 8,\n          A0: 14,\n          A1: 15,\n          A2: 16,\n        };\n\n        // Override the relevant default \"isType\" methods\n        this.isPwm = function(name) {\n          var number = typeof name === \"number\" ? name : parseInt(name[1]);\n          return number === 3 || number === 5 || number === 6;\n        };\n\n        this.address = opts.address || this.ADDRESSES[0];\n        opts.address = this.address;\n\n        this.io.i2cConfig(opts);\n\n        Object.assign(this.MODES, this.io.MODES);\n\n        var analogChannel;\n\n        for (var i = 0; i < 17; i++) {\n          analogChannel = 127;\n\n          if (i <= 1 || (i >= 9 && i < 14)) {\n            // There are no connections for:\n            // O, 1, 9, 10, 11, 12, 13\n            this.pins.push({\n              supportedModes: [],\n              mode: 0,\n              value: 0,\n              report: 0,\n              analogChannel: analogChannel\n            });\n          } else {\n\n            this.pins.push({\n              supportedModes: [\n                this.MODES.INPUT,\n                this.MODES.OUTPUT,\n              ],\n              mode: 0,\n              value: 0,\n              report: 0,\n              analogChannel: analogChannel\n            });\n\n            // Digital pins with PWM Support\n            // D3, D5, D6\n            if (this.isPwm(i)) {\n              this.pins[i].supportedModes.push(\n                this.MODES.PWM\n              );\n            }\n\n            if (i >= 14 && i <= 17) {\n              // A0 = 0 = 14\n              // A1 = 1 = 15\n              // A2 = 2 = 16\n              //\n              // 14 is the analog offset\n              this.pins[i].analogChannel = i - 14;\n\n              // Add ANALOG \"read\" mode\n              this.pins[i].supportedModes.push(\n                this.MODES.ANALOG\n              );\n\n              this.analogPins.push(i);\n\n              // Default all analog IO pins to\n              // ANALOG \"read\"\n              this.pinMode(\"A\" + this.pins[i].analogChannel, this.MODES.ANALOG);\n            } else {\n              // Default all digital IO pins to\n              // OUTPUT and LOW\n              this.pinMode(\"D\" + i, this.MODES.OUTPUT);\n              this.digitalWrite(\"D\" + i, this.LOW);\n            }\n          }\n        }\n\n        this.name = \"GROVEPI\";\n        this.isReady = true;\n\n        this.emit(\"connect\");\n        this.emit(\"ready\");\n      }\n    },\n    normalize: {\n      value: function(pin) {\n        return pin;\n      }\n    },\n\n    pinMode: {\n      value: function(pin, mode) {\n        var state = priv.get(this);\n        var pinIndex = state.pinMap[pin];\n\n        if (mode === this.io.MODES.INPUT ||\n          mode === this.io.MODES.ANALOG) {\n          this.pins[pinIndex].mode = 0;\n        } else {\n          this.pins[pinIndex].mode = 1;\n        }\n\n        this.io.i2cWrite(\n          this.address, [\n            this.COMMANDS.PIN_MODE,\n            pinIndex,\n            this.pins[pinIndex].mode,\n            0\n          ]\n        );\n      }\n    },\n\n    digitalWrite: {\n      value: function(pin, value) {\n        var state = priv.get(this);\n        var pinIndex = state.pinMap[pin];\n\n        // Any truthy value is converted to HIGH (1)\n        value = value ? 1 : 0;\n\n        this.io.i2cWrite(\n          this.address, [\n            this.COMMANDS.DIGITAL_WRITE,\n            pinIndex,\n            value,\n            0\n          ]\n        );\n\n        this.pins[pinIndex].value = value;\n      }\n    },\n\n    ioRead: {\n      value: function(pin, type, callback) {\n        var state = priv.get(this);\n        var pinIndex = state.pinMap[pin];\n        var isAnalog = type === \"analog\";\n        var length = isAnalog ? 3 : 1;\n        var command = isAnalog ? this.COMMANDS.ANALOG_READ : this.COMMANDS.DIGITAL_READ;\n\n        this.on(type + \"-read-\" + pinIndex, callback);\n\n        this.pins[pinIndex].report = 1;\n        this.pins[pinIndex].command = command;\n        this.pins[pinIndex].type = type;\n        this.pins[pinIndex].length = length;\n\n        var nextPinIndex = function() {\n          var startAt = nextPinIndex.lastPinIndex + 1;\n\n          for (var i = startAt; i < this.pins.length; i++) {\n            if (this.pins[i].report === 1) {\n              nextPinIndex.lastPinIndex = i;\n              return nextPinIndex.lastPinIndex;\n            }\n          }\n\n          nextPinIndex.lastPinIndex = -1;\n\n          return nextPinIndex();\n        }.bind(this);\n\n        nextPinIndex.lastPinIndex = -1;\n\n        var handler = function(pinIndex, value) {\n          var pin = this.pins[pinIndex];\n          var canEmit = true;\n\n          if (pin.type === \"digital\" && this.pins[pinIndex].value === value) {\n            canEmit = false;\n          }\n\n          this.pins[pinIndex].value = value;\n\n          if (canEmit) {\n            this.emit(pin.type + \"-read-\" + pinIndex, value);\n          }\n\n          setTimeout(read, 1);\n        }.bind(this);\n\n        var read = function() {\n          var pinIndex = nextPinIndex();\n          var pin = this.pins[pinIndex];\n          var isAnalog = pin.type === \"analog\";\n\n          this.io.i2cWrite(this.address, [pin.command, pinIndex, 0, 0]);\n          this.io.i2cReadOnce(this.address, pin.length, function(data) {\n            var value;\n\n            if (isAnalog) {\n              value = (data[1] << 8) + data[2];\n            } else {\n              value = data[0];\n            }\n            handler(pinIndex, value);\n          }.bind(this));\n        }.bind(this);\n\n        if (!state.isReading) {\n          state.isReading = true;\n          read();\n        }\n      }\n    },\n\n    digitalRead: {\n      value: function(pin, callback) {\n        this.ioRead(pin, \"digital\", callback);\n      },\n    },\n    analogRead: {\n      value: function(pin, callback) {\n        this.ioRead(pin, \"analog\", callback);\n      },\n    },\n    pingRead: {\n      value: function(settings, callback) {\n        var state = priv.get(this);\n        var pinIndex = state.pinMap[settings.pin];\n\n        this.io.i2cWrite(\n          this.address, [\n            this.COMMANDS.PING_READ,\n            pinIndex,\n            0, 0\n          ]\n        );\n\n        setTimeout(function() {\n          this.once(\"ping-read-\" + settings.pin, callback);\n\n          this.io.i2cReadOnce(this.address, 3, function(data) {\n            // The GrovePi firmware sends this value in CM\n            // so the value must be converted back to duration.\n            var value = Math.round(((data[1] << 8) + data[2]) * 29 * 2);\n\n            this.pins[pinIndex].value = value;\n            this.emit(\"ping-read-\" + settings.pin, value);\n          }.bind(this));\n        }.bind(this), 200);\n      },\n    },\n    analogWrite: {\n      value: function(pin, value) {\n        this.pwmWrite(pin, value);\n      }\n    },\n    pwmWrite: {\n      writable: true,\n      value: function(pin, value) {\n        var state = priv.get(this);\n        var pinIndex = state.pinMap[pin];\n\n        value = Board.constrain(value, 0, 255);\n\n        this.io.i2cWrite(\n          this.address, [\n            this.COMMANDS.ANALOG_WRITE,\n            pinIndex,\n            value,\n            0\n          ]\n        );\n\n        this.pins[pinIndex].value = value;\n      }\n    }\n  },\n  \"74HC595\": {\n    initialize: {\n      value: function(opts) {\n        var state = priv.get(this);\n\n        if (!opts.pins.data) {\n          throw new Error(\"Expected pins.data\");\n        }\n\n        if (!opts.pins.clock) {\n          throw new Error(\"Expected pins.clock\");\n        }\n\n        if (!opts.pins.latch) {\n          throw new Error(\"Expected pins.latch\");\n        }\n\n        state.data = opts.pins.data;\n        state.clock = opts.pins.clock;\n        state.latch = opts.pins.latch;\n        state.value = 0x00;\n\n        Object.assign(this.MODES, this.io.MODES);\n\n        // Reset pins property to empty array.\n        this.pins = [];\n\n        for (var i = 0; i < 8; i++) {\n          this.pins.push({\n            supportedModes: [\n              this.MODES.OUTPUT\n            ],\n            mode: 1,\n            value: 0,\n            report: 0,\n            analogChannel: 127\n          });\n        }\n\n        this.portWrite(0, state.value);\n\n        this.name = \"74HC595\";\n        this.isReady = true;\n\n        this.emit(\"connect\");\n        this.emit(\"ready\");\n      }\n    },\n    normalize: {\n      value: function(pin) {\n        return pin;\n      }\n    },\n    pinMode: {\n      value: function(pin, mode) {\n        this.pins[pin].mode = mode;\n      }\n    },\n    digitalWrite: {\n      value: function(pin, value) {\n        var state = priv.get(this);\n\n        if (value) {\n          state.value |= 1 << pin;\n        } else {\n          state.value &= ~(1 << pin);\n        }\n\n        this.pins[pin].value = value;\n\n        this.portWrite(0, state.value);\n      }\n    },\n    portWrite: {\n      writable: true,\n      configurable: true,\n      value: function(port, value) {\n        var state = priv.get(this);\n\n        state.value = value;\n\n        this.board.digitalWrite(state.latch, this.io.LOW);\n        this.board.shiftOut(state.data, state.clock, true, state.value);\n        this.board.digitalWrite(state.latch, this.io.HIGH);\n\n        for (var i = 0; i < 8; i++) {\n          this.pins[i].value = (state.value >> i) & 1;\n        }\n      }\n    },\n  },\n  CD74HC4067: {\n    /*\n    | Address 1 (D9) |  Address 0 (D8) | Address |\n    | -------------- |  -------------- | ------- |\n    | 0              |  0              | 0x0A    |\n    | 0              |  1              | 0x0B    |\n    | 1              |  0              | 0x0C    |\n    | 1              |  1              | 0x0D    |\n    */\n    ADDRESSES: {\n      value: [0x0A, 0x0B, 0x0C, 0x0D]\n    },\n    REGISTER: {},\n    initialize: {\n      value: function(opts) {\n        var state = priv.get(this);\n\n        state.reading = false;\n\n        this.address = opts.address || this.ADDRESSES[0];\n\n        opts.address = this.address;\n        this.io.i2cConfig(opts);\n\n        Object.assign(this.MODES, this.io.MODES);\n\n        for (var i = 0; i < 16; i++) {\n          this.pins.push({\n            supportedModes: [\n              this.MODES.ANALOG\n            ],\n            mode: 1,\n            value: 0,\n            report: 0,\n            analogChannel: i\n          });\n          this.analogPins.push(i);\n        }\n\n        this.name = \"CD74HC4067\";\n        this.isReady = true;\n\n        this.emit(\"connect\");\n        this.emit(\"ready\");\n      }\n    },\n    normalize: {\n      value: function(pin) {\n        if (typeof pin === \"string\" && pin[0] === \"A\") {\n          return +pin.slice(1);\n        }\n        return pin;\n      }\n    },\n    pinMode: {\n      value: function(pin, mode) {\n        this.pins[pin].mode = mode;\n      }\n    },\n    analogRead: {\n      value: function(pin, callback) {\n        var state = priv.get(this);\n        var pinIndex = pin;\n\n        this.pins[pinIndex].report = 1;\n\n        this.on(\"analog-read-\" + pin, callback);\n\n        this.io.i2cWrite(this.address, pinIndex, 1);\n\n        // Since this operation will read all 4 pins,\n        // it only needs to be initiated once.\n        if (!state.reading) {\n          state.reading = true;\n\n          this.io.i2cRead(this.address, 32, function(data) {\n            var value;\n            for (var i = 0; i < 16; i++) {\n              var index = i * 2;\n\n              value = (data[index] << 8) + data[index + 1];\n\n              this.pins[i].value = value;\n\n              if (this.pins[i].report) {\n                this.emit(\"analog-read-\" + i, value);\n              }\n            }\n          }.bind(this));\n        }\n      }\n    },\n  },\n\n  // https://cdn-shop.adafruit.com/datasheets/LIS3DH.pdf\n  LIS3DH: {\n    ADDRESSES: {\n      value: [0x18]\n    },\n    REGISTER: {\n      value: {\n        // Page 26\n        // Table 17. Register address map\n        //\n        // NAME:  BYTE\n        OUT_ADC1_L: 0x08,\n        OUT_X_L: 0x28,\n        CTRL_REG1: 0x20,\n        CTRL_REG2: 0x21,\n        CTRL_REG3: 0x22,\n        CTRL_REG4: 0x23,\n        CTRL_REG5: 0x24,\n\n        TEMP_CFG_REG: 0x1F,\n      },\n    },\n    initialize: {\n      value: function(opts) {\n        var state = priv.get(this);\n\n        state.reading = false;\n\n        this.address = opts.address || this.ADDRESSES[0];\n\n        opts.address = this.address;\n\n        this.io.i2cConfig(opts);\n\n\n        // Page 29\n        // 8.8 CTRL_REG1\n        // Table 24. CTRL_REG1 register\n        //\n        // ODR3 ODR2 ODR1 ODR0 LPen Zen Yen Xen\n        //\n        //\n        // Enable Axis\n        // 0b00000111\n        //        ZYX\n        //\n        var ctrl1 = 0x07; // 0b00000111\n        //\n        // Date Rate\n        // Table 26. Data rate configuration\n        //\n        // ODR3 ODR2 ODR1 ODR0 Power mode selection\n        // 0 0 0 1 = 1 Hz\n        // 0 0 1 0 = 10 Hz\n        // 0 0 1 1 = 25 Hz\n        // 0 1 0 0 = 50 Hz\n        // 0 1 0 1 = 100 Hz\n        // 0 1 1 0 = 200 Hz\n        // 0 1 1 1 = 400 Hz\n        //\n        // 0b0111 << 4 = 0b01110000\n        //\n        ctrl1  = (ctrl1 & ~(0xF0)) | (0x07 << 4);\n\n        // ctrl1 = 0b01110111\n        // 0b01110000 = 0x70 = 112\n        this.io.i2cWrite(this.address, this.REGISTER.CTRL_REG1, ctrl1);\n\n        // Page 31\n        // 8.11 CTRL_REG4\n        //\n        // Table 32. CTRL_REG4 register\n        //\n        // BDU BLE FS1 FS0 HR ST1 ST0 SIM\n        //\n        // BDU  Block data update. Default value: 0\n        //      0: Continuous update\n        //      1: Updated when MSB and LSB read\n        //\n        // HR   High resolution output mode: Default value: 0\n        //      0: Disable\n        //      1: Enable\n        //\n        // Setting BDU and HR:\n        // 0b1---1---\n        //\n        // 0b10001000 = 0x88 = 136\n        //\n        this.io.i2cWrite(this.address, this.REGISTER.CTRL_REG4, 0x88);\n        //\n        // Page 31\n        // 8.10 CTRL_REG3\n        //\n        // I1_DRDY1 -> ON\n        //\n        // 0b00010000 = 0x10 = 16\n        this.io.i2cWrite(this.address, this.REGISTER.CTRL_REG3, 0x10);\n\n        Object.assign(this.MODES, this.io.MODES);\n\n        for (var i = 0; i < 4; i++) {\n          if (i === 0) {\n            this.pins.push({\n              supportedModes: [],\n              mode: 0,\n              value: 0,\n              report: 0,\n              analogChannel: 0x7F\n            });\n          } else {\n            this.pins.push({\n              supportedModes: [ this.MODES.ANALOG ],\n              mode: 1,\n              value: 0,\n              report: 0,\n              analogChannel: i\n            });\n            this.analogPins.push(i);\n          }\n        }\n\n        this.name = \"LIS3DH\";\n        this.isReady = true;\n\n        this.emit(\"connect\");\n        this.emit(\"ready\");\n      },\n    },\n    normalize: {\n      value: function(pin) {\n        if (typeof pin === \"string\" && pin[0] === \"A\") {\n          return +pin.slice(1);\n        }\n        return pin;\n      },\n    },\n    pinMode: {\n      value: function(pin, mode) {\n        this.pins[pin].mode = mode;\n      },\n    },\n    analogRead: {\n      value: function(pin, callback) {\n        var state = priv.get(this);\n        var pinIndex = pin;\n\n        this.pins[pinIndex].report = 1;\n\n        this.on(\"analog-read-\" + pin, callback);\n\n        // Since this operation will read all 3 ADC pins,\n        // it only needs to be initiated once.\n        if (!state.reading) {\n          state.reading = true;\n\n          // Page 29\n          // 8.7 TEMP_CFG_REG (1Fh)\n          // Table 23. TEMP_CFG_REG description\n          //\n          // ADC_PD TEMP_EN 0 0 0 0 0 0\n          //\n          // 0b10000000 = 128 = 0x80\n          //\n          this.io.i2cWrite(this.address, this.REGISTER.TEMP_CFG_REG, 0x80);\n\n          // Page 23, 24, 25\n          // bit 1: MS bit. When 0, the address remains unchanged in multiple read/write commands.\n          // When 1, the address is auto incremented in multiple read/write commands.\n          this.io.i2cRead(this.address, this.REGISTER.OUT_ADC1_L | 0x80, 6, function(data) {\n            // V range is 900\n\n            // First, scale the value to range that these ADCs support, which is\n            //\n            // 1.8V - 0.9V\n            //\n            // Then, scale that value to the full 10-bit 0-3.3V range\n            //\n            this.pins[1].value = Fn.scale(Fn.int16(data[1], data[0]), -32512, 32512, 1023, 0);\n            this.pins[2].value = Fn.scale(Fn.int16(data[3], data[2]), -32512, 32512, 1023, 0);\n            this.pins[3].value = Fn.scale(Fn.int16(data[5], data[4]), -32512, 32512, 1023, 0);\n\n            for (var i = 1; i < 4; i++) {\n              if (this.pins[i].report) {\n                this.emit(\"analog-read-\" + i, this.pins[i].value);\n              }\n            }\n          }.bind(this));\n        }\n      },\n    },\n    i2cConfig: {\n      value: function() {\n        return this.io.i2cConfig.apply(this.io, arguments);\n      },\n    },\n    i2cWrite: {\n      value: function() {\n        return this.io.i2cWrite.apply(this.io, arguments);\n      },\n    },\n    i2cWriteReg: {\n      value: function() {\n        return this.io.i2cWriteReg.apply(this.io, arguments);\n      },\n    },\n    i2cRead: {\n      value: function() {\n        return this.io.i2cRead.apply(this.io, arguments);\n      },\n    },\n    i2cReadOnce: {\n      value: function() {\n        return this.io.i2cReadOnce.apply(this.io, arguments);\n      },\n    },\n  },\n};\n\nControllers[\"CD74HCT4067\"] = Controllers.CD74HC4067;\nControllers[\"74HC4067\"] = Controllers.CD74HC4067;\n\nControllers.PCF8574A = Object.assign({}, Controllers.PCF8574, {\n  ADDRESSES: {\n    value: [0x38]\n  }\n});\n\nvar methods = Object.keys(Board.prototype);\n\nObject.keys(Controllers).forEach(function(name) {\n  methods.forEach(function(key) {\n    if (Controllers[name][key] === undefined) {\n      Controllers[name][key] = {\n        writable: true,\n        configurable: true,\n        value: function() {\n          throw new Error(\"Expander:\" + name + \" does not support \" + key);\n        }\n      };\n    }\n  });\n});\n\nvar nonAddressable = [\n  \"74HC595\"\n];\n\nfunction Expander(opts) {\n  if (!(this instanceof Expander)) {\n    return new Expander(opts);\n  }\n\n  Base.call(this);\n\n  var expander = null;\n  var addressError = \"Expander cannot reuse an active address\";\n  var controller = null;\n  var state = {};\n  var controllerValue;\n\n  if (typeof opts === \"string\") {\n    controllerValue = opts;\n  }\n\n  Board.Component.call(\n    this, opts = Board.Options(opts), {\n      normalizePin: false,\n      requestPin: false\n    }\n  );\n\n  if (nonAddressable.includes(opts.controller) &&\n      typeof this.address === \"undefined\") {\n    this.address = Fn.uid();\n  }\n\n  expander = active.get(this.address);\n\n  if (expander) {\n    if (this.bus && (expander.bus !== undefined && expander.bus === this.bus)) {\n      addressError += \" on this bus\";\n    }\n    throw new Error(addressError);\n  }\n\n  if (typeof opts.controller === \"undefined\" && controllerValue) {\n    opts.controller = controllerValue;\n  }\n\n  if (opts.controller && typeof opts.controller === \"string\") {\n    controller = Controllers[opts.controller.toUpperCase()];\n  } else {\n    controller = opts.controller;\n  }\n\n  if (controller == null) {\n    throw new Error(\"Expander expects a valid controller\");\n  }\n\n  Board.Controller.call(this, controller, opts);\n\n  priv.set(this, state);\n\n  if (typeof this.initialize === \"function\") {\n    this.initialize(opts);\n  }\n\n  active.set(this.address, this);\n}\n\nutil.inherits(Expander, Base);\n\n\nExpander.get = function(required) {\n\n  if (!required.address || !required.controller) {\n    throw new Error(\"Expander.get(...) requires an address and controller\");\n  }\n\n  if (required.address !== undefined) {\n    required.address = Number(required.address);\n  }\n\n  if (Number.isNaN(required.address)) {\n    throw new Error(\"Expander.get(...) expects address to be a number\");\n  }\n\n  if (typeof required.controller !== \"string\") {\n    throw new Error(\"Expander.get(...) expects controller name to be a string\");\n  }\n\n  // If no address was sent them assume the request wants\n  // to re-use an active Expander, by controller name.\n  // if (!required.address) {\n  //   return Expander.byController(required.controller);\n  // }\n\n  var expander = active.get(required.address);\n\n  if (expander && (expander.name === required.controller.toUpperCase())) {\n    return expander;\n  }\n\n  return new Expander(required);\n};\n\nExpander.byAddress = function(address) {\n  return active.get(address);\n};\n\nExpander.byController = function(name) {\n  var controller = null;\n\n  active.forEach(function(value) {\n    if (value.name === name.toUpperCase()) {\n      controller = value;\n    }\n  });\n  return controller;\n};\n\nExpander.hasController = function(key) {\n  return Controllers[key] !== undefined;\n};\n\n/* istanbul ignore else */\nif (!!process.env.IS_TEST_MODE) {\n  Expander.Controllers = Controllers;\n  Expander.purge = function() {\n    priv.clear();\n    active.clear();\n  };\n}\n\nmodule.exports = Expander;\n","/home/travis/build/npmtest/node-npmtest-johnny-five/node_modules/johnny-five/lib/sleep.js":"module.exports = {\n  nano: function(ns) {\n    var start = process.hrtime();\n    while (process.hrtime() < start + ns) {}\n  }\n};\n","/home/travis/build/npmtest/node-npmtest-johnny-five/node_modules/johnny-five/lib/animation.js":"// TODO list\n// Use functions as keyFrames\n// Test metronomic on real animation\n\n// Create jquery FX like queue\n\nvar Emitter = require(\"events\").EventEmitter;\nvar util = require(\"util\");\nvar ease = require(\"ease-component\");\nvar Fn = require(\"./fn\");\nvar temporal;\n\n\n/**\n * The max time we want to allow a temporal animation segment to run.\n * When running, temporal can push CPU utilization to 100%. When this\n * time (in ms) is reached we will fall back to setInterval which is less\n * accurate (by nanoseconds) but perfectly serviceable.\n **/\nvar temporalTTL = 5000;\n\n/**\n * Placeholders for Symbol\n */\nAnimation.keys = \"@@keys\";\nAnimation.normalize = \"@@normalize\";\nAnimation.render = \"@@render\";\n\n/**\n * Temporal will run up the CPU. temporalFallback is used\n * for long running animations.\n */\nAnimation.TemporalFallback = function(animation) {\n  this.interval = setInterval(function() {\n    animation.loopFunction({\n      calledAt: Date.now()\n    });\n  }, animation.rate);\n};\n\nAnimation.TemporalFallback.prototype.stop = function() {\n  if (this.interval) {\n    clearInterval(this.interval);\n  }\n};\n\n/**\n * Animation\n * @constructor\n *\n * @param {target} A Servo or Servo.Collection to be animated\n *\n * Animating a single servo\n *\n *   var servo = new five.Servo(10);\n *   var animation = new five.Animation(servo);\n *   animation.enqueue({\n *     cuePoints: [0, 0.25, 0.75, 1],\n *     keyFrames: [{degrees: 90}, 60, -120, {degrees: 90}],\n *     duration: 2000\n *   });\n *\n *\n * Animating a servo array\n *\n *   var a = new five.Servo(9),\n *     b = new five.Servo(10);\n *   var servos = new five.Servo.Collection([a, b]);\n *   var animation = new five.Animation(servos);\n *   animation.enqueue({\n *     cuePoints: [0, 0.25, 0.75, 1],\n *     keyFrames: [\n *       [{degrees: 90}, 60, -120, {degrees: 90}],\n *       [{degrees: 180}, -120, 90, {degrees: 180}],\n *     ],\n *     duration: 2000\n *   });\n *\n */\n\nfunction Animation(target) {\n\n  // Necessary to avoid loading temporal unless necessary\n  if (!temporal) {\n    temporal = require(\"temporal\");\n  }\n\n  if (!(this instanceof Animation)) {\n    return new Animation(target);\n  }\n\n  Animation.Segment.call(this);\n\n  this.defaultTarget = target;\n}\n\nutil.inherits(Animation, Emitter);\n\n/**\n * Animation.Segment()\n *\n * Create a defaulted segment.\n *\n * Every property ever used on an animation segment\n * MUST be listed here, otherwise properties will\n * persist across segments. This default object is\n * primarily for resetting state.\n *\n */\nAnimation.Segment = function(options) {\n  this.cuePoints = [0, 1];\n  this.duration = 1000;\n  this.easing = \"linear\";\n  this.loop = false;\n  this.loopback = 0;\n  this.metronomic = false;\n  this.currentSpeed = 1;\n  this.progress = 0;\n  this.fps = 60;\n  this.rate = 1000 / 60;\n  this.paused = false;\n  this.segments = [];\n  this.onstart = null;\n  this.onpause = null;\n  this.onstop = null;\n  this.oncomplete = null;\n  this.onloop = null;\n\n  if (options) {\n    Object.assign(this, options);\n\n    if (options.segments) {\n      this.segments = options.segments.slice();\n    }\n  }\n};\n\n\n/**\n * Add an animation segment to the animation queue\n * @param {Object} opts Options: cuePoints, keyFrames, duration,\n *   easing, loop, metronomic, progress, fps, onstart, onpause,\n *   onstop, oncomplete, onloop\n */\nAnimation.prototype.enqueue = function(opts) {\n\n  opts = opts || {};\n\n  /* istanbul ignore else */\n  if (typeof opts.target === \"undefined\") {\n    opts.target = this.defaultTarget;\n  }\n\n  this.segments.push(new Animation.Segment(opts));\n\n\n  /* istanbul ignore if */\n  if (!this.paused) {\n    this.next();\n  }\n\n  return this;\n\n};\n\n/**\n * Plays next segment in queue\n * Users need not call this. It's automatic\n */\nAnimation.prototype.next = function() {\n\n  if (this.segments.length > 0) {\n\n    Object.assign(this, this.segments.shift());\n\n    this.paused = this.currentSpeed === 0 ? true : false;\n\n    if (this.onstart) {\n      this.onstart();\n    }\n\n    this.normalizeKeyframes();\n\n    if (this.reverse) {\n      this.currentSpeed *= -1;\n    }\n\n    if (this.currentSpeed !== 0) {\n      this.play();\n    } else {\n      this.paused = true;\n    }\n  } else {\n    this.playLoop.stop();\n  }\n\n  return this;\n};\n\n/**\n * pause\n *\n * Pause animation while maintaining progress, speed and segment queue\n *\n */\n\nAnimation.prototype.pause = function() {\n\n  this.emit(\"animation:pause\");\n\n  if (this.playLoop) {\n    this.playLoop.stop();\n  }\n  this.paused = true;\n\n  if (this.onpause) {\n    this.onpause();\n  }\n\n};\n\n/**\n * stop\n *\n * Stop all animations\n *\n */\n\nAnimation.prototype.stop = function() {\n\n  this.emit(\"animation:stop\");\n\n  this.segments = [];\n  if (this.playLoop) {\n    this.playLoop.stop();\n  }\n\n  if (this.onstop) {\n    this.onstop();\n  }\n\n};\n\n/**\n * speed\n *\n * Get or set the current playback speed\n *\n * @param {Number} speed\n *\n */\n\nAnimation.prototype.speed = function(speed) {\n\n  if (typeof speed === \"undefined\") {\n    return this.currentSpeed;\n  } else {\n    this.currentSpeed = speed;\n\n    // Find our timeline endpoints and refresh rate\n    this.scaledDuration = this.duration / Math.abs(this.currentSpeed);\n    this.startTime = Date.now() - this.scaledDuration * this.progress;\n    this.endTime = this.startTime + this.scaledDuration;\n\n    if (!this.paused) {\n      this.play();\n    }\n    return this;\n  }\n};\n\n/**\n * This function is called in each frame of our animation\n * Users need not call this. It's automatic\n */\n\nAnimation.prototype.loopFunction = function(loop) {\n\n  // Find the current timeline progress\n  var progress = this.calculateProgress(loop.calledAt);\n\n\n  // Find the left and right cuePoints/keyFrames;\n  var indices = this.findIndices(progress);\n\n  // call render function with tweened value\n  this.target[Animation.render](this.tweenedValue(indices, progress));\n\n  /**\n   * If this animation has been running in temporal for too long\n   * fall back to using setInterval so we don't melt the user's CPU\n   **/\n  if (loop.calledAt > this.fallBackTime) {\n    this.fallBackTime = Infinity;\n    if (this.playLoop) {\n      this.playLoop.stop();\n    }\n    this.playLoop = new Animation.TemporalFallback(this);\n  }\n\n  // See if we have reached the end of the animation\n  /* istanbul ignore else */\n  if ((this.progress === 1 && !this.reverse) || (progress === this.loopback && this.reverse)) {\n\n    if (this.loop || (this.metronomic && !this.reverse)) {\n\n      if (this.onloop) {\n        this.onloop();\n      }\n\n      if (this.metronomic) {\n        this.reverse = this.reverse ? false : true;\n      }\n\n      this.normalizeKeyframes();\n      this.progress = this.loopback;\n      this.startTime = Date.now() - this.scaledDuration * this.progress;\n      this.endTime = this.startTime + this.scaledDuration;\n    } else {\n\n      this.stop();\n\n      if (this.oncomplete) {\n        process.nextTick(this.oncomplete.bind(this));\n      }\n\n      if (this.segments.length > 0) {\n        this.next();\n      }\n    }\n  }\n};\n\n/**\n * play\n *\n * Start a segment\n */\n\nAnimation.prototype.play = function() {\n  var now = Date.now();\n\n  if (this.playLoop) {\n    this.playLoop.stop();\n  }\n\n  this.paused = false;\n\n  // Find our timeline endpoints and refresh rate\n  this.scaledDuration = this.duration / Math.abs(this.currentSpeed);\n  this.startTime = now - this.scaledDuration * this.progress;\n  this.endTime = this.startTime + this.scaledDuration;\n\n  // If our animation runs for more than 5 seconds switch to setTimeout\n  this.fallBackTime = now + temporalTTL;\n  this.frameCount = 0;\n\n  /* istanbul ignore else */\n  if (this.fps) {\n    this.rate = 1000 / this.fps;\n  }\n\n  this.rate = this.rate | 0;\n\n  this.playLoop = temporal.loop(this.rate, this.loopFunction.bind(this));\n};\n\nAnimation.prototype.findIndices = function(progress) {\n  var indices = {\n    left: null,\n    right: null\n  };\n\n  // Find our current before and after cuePoints\n  indices.right = this.cuePoints.findIndex(function(point) {\n    return point >= progress;\n  });\n\n  indices.left = indices.right === 0 ? /* istanbul ignore next */ 0 : indices.right - 1;\n\n  return indices;\n};\n\nAnimation.prototype.calculateProgress = function(calledAt) {\n\n  var progress = (calledAt - this.startTime) / this.scaledDuration;\n\n  if (progress > 1) {\n    progress = 1;\n  }\n\n  this.progress = progress;\n\n  if (this.reverse) {\n    progress = 1 - progress;\n  }\n\n  // Ease the timeline\n  // to do: When reverse replace inFoo with outFoo and vice versa. skip inOutFoo\n  progress = ease[this.easing](progress);\n  progress = Fn.constrain(progress, 0, 1);\n\n  return progress;\n};\n\nAnimation.prototype.tweenedValue = function(indices, progress) {\n\n  var tween = {\n    duration: null,\n    progress: null\n  };\n\n  var result = this.normalizedKeyFrames.map(function(keyFrame) {\n    // Note: \"this\" is bound to the animation object\n\n    var memberIndices = {\n      left: null,\n      right: null\n    };\n\n    // If the keyframe at indices.left is null, move left\n    for (memberIndices.left = indices.left; memberIndices.left > -1; memberIndices.left--) {\n      /* istanbul ignore else */\n      if (keyFrame[memberIndices.left] !== null) {\n        break;\n      }\n    }\n\n    // If the keyframe at indices.right is null, move right\n    memberIndices.right = keyFrame.findIndex(function(frame, index) {\n      return index >= indices.right && frame !== null;\n    });\n\n    // Find our progress for the current tween\n    tween.duration = this.cuePoints[memberIndices.right] - this.cuePoints[memberIndices.left];\n    tween.progress = (progress - this.cuePoints[memberIndices.left]) / tween.duration;\n\n    // Catch divide by zero\n    if (!Number.isFinite(tween.progress)) {\n      /* istanbul ignore next */\n      tween.progress = this.reverse ? 0 : 1;\n    }\n\n    var left = keyFrame[memberIndices.left],\n      right = keyFrame[memberIndices.right];\n\n    // Apply tween easing to tween.progress\n    // to do: When reverse replace inFoo with outFoo and vice versa. skip inOutFoo\n    tween.progress = ease[right.easing](tween.progress);\n\n    // Calculate this tween value\n    var calcValue;\n\n    if (right.position) {\n      // This is a tuple\n      calcValue = right.position.map(function(value, index) {\n        return (value - left.position[index]) *\n          tween.progress + left.position[index];\n      });\n    } else {\n      if (typeof right.value === \"number\" && typeof left.value === \"number\") {\n        calcValue = (right.value - left.value) * tween.progress + left.value;\n      } else {\n        calcValue = this.target[Animation.keys].reduce(function(accum, key) {\n          accum[key] = (right.value[key] - left.value[key]) * tween.progress + left.value[key];\n          return accum;\n        }, {});\n      }\n    }\n\n    return calcValue;\n  }, this);\n\n  return result;\n};\n\n// Make sure our keyframes conform to a standard\nAnimation.prototype.normalizeKeyframes = function() {\n\n  var previousVal,\n    keyFrameSet = Fn.cloneDeep(this.keyFrames),\n    cuePoints = this.cuePoints;\n\n  // Run through the target's normalization\n  keyFrameSet = this.target[Animation.normalize](keyFrameSet);\n\n  // keyFrames can be passed as a single dimensional array if\n  // there is just one servo/device. If the first element is not an\n  // array, nest keyFrameSet so we only have to deal with one format\n  if (!Array.isArray(keyFrameSet[0])) {\n    keyFrameSet = [keyFrameSet];\n  }\n\n  keyFrameSet.forEach(function(keyFrames) {\n\n    // Pad the right side of keyFrames arrays with null\n    for (var i = keyFrames.length; i < cuePoints.length; i++) {\n      keyFrames.push(null);\n    }\n\n    keyFrames.forEach(function(keyFrame, i, source) {\n\n      if (keyFrame !== null) {\n\n        // keyFrames need to be converted to objects\n        if (typeof keyFrame !== \"object\") {\n          keyFrame = {\n            step: keyFrame,\n            easing: \"linear\"\n          };\n        }\n\n        // Replace step values\n        if (typeof keyFrame.step !== \"undefined\") {\n          keyFrame.value = keyFrame.step === false ?\n            previousVal : previousVal + keyFrame.step;\n        }\n\n        // Set a default easing function\n        if (!keyFrame.easing) {\n          keyFrame.easing = \"linear\";\n        }\n\n        // Copy value from another frame\n        /* istanbul ignore if */\n        if (typeof keyFrame.copyValue !== \"undefined\") {\n          keyFrame.value = source[keyFrame.copyValue].value;\n        }\n\n        // Copy everything from another keyframe in this array\n        /* istanbul ignore if */\n        if (keyFrame.copyFrame) {\n          keyFrame = source[keyFrame.copyFrame];\n        }\n\n        previousVal = keyFrame.value;\n\n      } else {\n\n        if (i === source.length - 1) {\n          keyFrame = {\n            value: previousVal,\n            easing: \"linear\"\n          };\n        } else {\n          keyFrame = null;\n        }\n\n      }\n      source[i] = keyFrame;\n\n    }, this);\n  });\n\n  this.normalizedKeyFrames = keyFrameSet;\n\n  return this;\n};\n\nmodule.exports = Animation;\n","/home/travis/build/npmtest/node-npmtest-johnny-five/node_modules/johnny-five/lib/altimeter.js":"var Board = require(\"./board\");\nvar Fn = require(\"./fn\");\nvar Emitter = require(\"events\").EventEmitter;\nvar util = require(\"util\");\n\nvar Controllers = {\n  MPL3115A2: {\n    requirements: {\n      value: {\n        options: {\n          elevation: {\n            throws: false,\n            message: \"Missing `elevation` option. Without a specified base `elevation`, the altitude measurement will be inaccurate. Use the meters value shown on whatismyelevation.com\",\n            typeof: \"number\",\n          }\n        }\n      }\n    },\n    initialize: {\n      value: function(opts, dataHandler) {\n        var Multi = require(\"./imu\");\n        var driver = Multi.Drivers.get(this.board, \"MPL3115A2\", opts);\n        driver.on(\"data\", function(data) {\n          dataHandler(data.altitude);\n        });\n      }\n    },\n    toMeters: {\n      value: function(raw) {\n        // http://cache.freescale.com/files/sensors/doc/data_sheet/MPL3115A2.pdf\n        // Table 2, Note 3\n        // \"Smallest bit change in register represents minimum value change in\n        // Pascals or meters. Typical resolution to signify change in altitudeis 0.3 m\"\n        return Fn.toFixed(raw, 1);\n      }\n    }\n  },\n  MS5611: {\n    initialize: {\n      value: function(opts, dataHandler) {\n        var Multi = require(\"./imu\");\n        var driver = Multi.Drivers.get(this.board, \"MS5611\", opts);\n        driver.on(\"data\", function(data) {\n          dataHandler(data.altitude);\n        });\n      }\n    },\n    toMeters: {\n      value: function(raw) {\n        return Fn.toFixed(raw, 2);\n      }\n    }\n  },\n\n  BMP180: {\n    initialize: {\n      value: function(opts, dataHandler) {\n        var Multi = require(\"./imu\");\n        var driver = Multi.Drivers.get(this.board, \"BMP180\", opts);\n        driver.on(\"data\", function(data) {\n          dataHandler(data.altitude);\n        });\n      }\n    },\n    toMeters: {\n      value: function(raw) {\n        return Fn.toFixed(raw, 2);\n      }\n    }\n  },\n\n  BMP280: {\n    initialize: {\n      value: function(opts, dataHandler) {\n        var Multi = require(\"./imu\");\n        var driver = Multi.Drivers.get(this.board, \"BMP280\", opts);\n        driver.on(\"data\", function(data) {\n          dataHandler(data.altitude);\n        });\n      }\n    },\n    toMeters: {\n      value: function(raw) {\n        return Fn.toFixed(raw, 2);\n      }\n    }\n  },\n  BME280: {\n    initialize: {\n      value: function(opts, dataHandler) {\n        var Multi = require(\"./imu\");\n        var driver = Multi.Drivers.get(this.board, \"BME280\", opts);\n        driver.on(\"data\", function(data) {\n          dataHandler(data.altitude);\n        });\n      }\n    },\n    toMeters: {\n      value: function(raw) {\n        return Fn.toFixed(raw, 2);\n      }\n    }\n  },\n\n};\n\nControllers[\"BMP085\"] = Controllers[\"BMP-085\"] = Controllers.BMP180;\n\nvar priv = new Map();\n\nfunction Altimeter(opts) {\n  if (!(this instanceof Altimeter)) {\n    return new Altimeter(opts);\n  }\n\n  var controller = null;\n  var freq;\n  var last = null;\n  var raw = null;\n  var state = {};\n\n  Board.Component.call(\n    this, opts = Board.Options(opts)\n  );\n\n  freq = opts.freq || 25;\n\n\n  if (opts.controller && typeof opts.controller === \"string\") {\n    controller = Controllers[opts.controller.toUpperCase()];\n  } else {\n    controller = opts.controller;\n  }\n\n  if (controller == null) {\n    throw new Error(\"Altimeter expects a valid controller\");\n  }\n\n  priv.set(this, state);\n\n  Board.Controller.call(this, controller, opts);\n\n  if (!this.toMeters) {\n    this.toMeters = opts.toMeters || function(x) {\n      return x;\n    };\n  }\n\n  var descriptors = {\n    meters: {\n      get: function() {\n        return this.toMeters(raw);\n      }\n    },\n    feet: {\n      get: function() {\n        return Fn.toFixed(this.meters * 3.28084, 2);\n      }\n    }\n  };\n  // Convenience aliases\n  descriptors.m = descriptors.meters;\n  descriptors.ft = descriptors.feet;\n\n  Object.defineProperties(this, descriptors);\n\n\n  /* istanbul ignore else */\n  if (typeof this.initialize === \"function\") {\n    this.initialize(opts, function(data) {\n      raw = data;\n    });\n  }\n\n  setInterval(function() {\n    if (raw == null) {\n      return;\n    }\n\n    var data = {};\n    data.m = data.meters = this.meters;\n    data.ft = data.feet = this.feet;\n\n    this.emit(\"data\", data);\n\n    /* istanbul ignore else */\n    if (this.meters !== last) {\n      last = this.meters;\n      this.emit(\"change\", data);\n    }\n  }.bind(this), freq);\n}\n\nutil.inherits(Altimeter, Emitter);\n\n/* istanbul ignore else */\nif (!!process.env.IS_TEST_MODE) {\n  Altimeter.Controllers = Controllers;\n  Altimeter.purge = function() {\n    priv.clear();\n  };\n}\n\n\nmodule.exports = Altimeter;\n","/home/travis/build/npmtest/node-npmtest-johnny-five/node_modules/johnny-five/lib/barometer.js":"var Emitter = require(\"events\").EventEmitter;\nvar util = require(\"util\");\n\nvar Board = require(\"./board\");\nvar Fn = require(\"./fn\");\n\nvar toFixed = Fn.toFixed;\n\n\nvar Controllers = {\n  MPL115A2: {\n    initialize: {\n      value: function(opts, dataHandler) {\n        var Multi = require(\"./imu\");\n        var driver = Multi.Drivers.get(this.board, \"MPL115A2\", opts);\n        driver.on(\"data\", function(data) {\n          dataHandler.call(this, data.pressure);\n        }.bind(this));\n      }\n    },\n    // kPa (Kilopascals)\n    toPressure: {\n      value: function(raw) {\n        // http://cache.freescale.com/files/sensors/doc/data_sheet/MPL115A2.pdf\n        // P. 6, Eqn. 2\n        return ((65 / 1023) * raw) + 50;\n      }\n    }\n  },\n  MPL3115A2: {\n    initialize: {\n      value: function(opts, dataHandler) {\n        var Multi = require(\"./imu\");\n        var driver = Multi.Drivers.get(this.board, \"MPL3115A2\", opts);\n        driver.on(\"data\", function(data) {\n          dataHandler.call(this, data.pressure);\n        }.bind(this));\n      }\n    },\n    // kPa (Kilopascals)\n    toPressure: {\n      value: function(raw) {\n        // formulas extracted from code example:\n        // https://github.com/adafruit/Adafruit_MPL3115A2_Library\n        var inches = (raw / 4) / 3377;\n        return inches * 3.39;\n      }\n    }\n  },\n  BMP180: {\n    initialize: {\n      value: function(opts, dataHandler) {\n        var Multi = require(\"./imu\");\n        var driver = Multi.Drivers.get(this.board, \"BMP180\", opts);\n        driver.on(\"data\", function(data) {\n          dataHandler.call(this, data.pressure);\n        }.bind(this));\n      }\n    },\n    // kPa (Kilopascals)\n    toPressure: {\n      value: function(raw) {\n        return raw / 1000;\n      }\n    }\n  },\n  BMP280: {\n    initialize: {\n      value: function(opts, dataHandler) {\n        var Multi = require(\"./imu\");\n        var driver = Multi.Drivers.get(this.board, \"BMP280\", opts);\n        driver.on(\"data\", function(data) {\n          dataHandler.call(this, data.pressure);\n        }.bind(this));\n      }\n    },\n    // kPa (Kilopascals)\n    toPressure: {\n      value: function(raw) {\n        return raw / 1000;\n      }\n    }\n  },\n  BME280: {\n    initialize: {\n      value: function(opts, dataHandler) {\n        var Multi = require(\"./imu\");\n        var driver = Multi.Drivers.get(this.board, \"BME280\", opts);\n        driver.on(\"data\", function(data) {\n          dataHandler.call(this, data.pressure);\n        }.bind(this));\n      }\n    },\n    // kPa (Kilopascals)\n    toPressure: {\n      value: function(raw) {\n        return raw / 1000;\n      }\n    }\n  },\n  MS5611: {\n    initialize: {\n      value: function(opts, dataHandler) {\n        var Multi = require(\"./imu\");\n        var driver = Multi.Drivers.get(this.board, \"MS5611\", opts);\n        driver.on(\"data\", function(data) {\n          dataHandler.call(this, data.pressure);\n        }.bind(this));\n      }\n    },\n    // kPa (Kilopascals)\n    toPressure: {\n      value: function(raw) {\n        return raw / 1000;\n      }\n    }\n  },\n};\n\nControllers.BMP085 = Controllers.BMP180;\n\n/**\n * Barometer\n * @constructor\n *\n * five.Barometer(opts);\n *\n * five.Barometer({\n *   controller: \"CONTROLLER\"\n *   address: 0x00\n * });\n *\n *\n * @param {Object} opts [description]\n *\n */\n\nfunction Barometer(opts) {\n  if (!(this instanceof Barometer)) {\n    return new Barometer(opts);\n  }\n\n  var controller = null;\n  var last = null;\n  var raw = null;\n\n  Board.Component.call(\n    this, opts = Board.Options(opts)\n  );\n\n  var freq = opts.freq || 25;\n\n  if (opts.controller && typeof opts.controller === \"string\") {\n    controller = Controllers[opts.controller.toUpperCase()];\n  } else {\n    controller = opts.controller;\n  }\n\n  if (controller == null) {\n    // controller = Controllers[\"ANALOG\"];\n    throw new Error(\"Missing Barometer controller\");\n  }\n\n  Board.Controller.call(this, controller, opts);\n\n  if (!this.toPressure) {\n    this.toPressure = opts.toPressure || function(raw) {\n      return raw;\n    };\n  }\n\n  if (typeof this.initialize === \"function\") {\n    this.initialize(opts, function(data) {\n      raw = data;\n    });\n  }\n\n  Object.defineProperties(this, {\n    pressure: {\n      get: function() {\n        return toFixed(this.toPressure(raw), 4);\n      }\n    }\n  });\n\n  setInterval(function() {\n    if (raw === null) {\n      return;\n    }\n\n    var data = {\n      pressure: this.pressure\n    };\n\n    this.emit(\"data\", data);\n\n    if (this.pressure !== last) {\n      last = this.pressure;\n      this.emit(\"change\", data);\n    }\n  }.bind(this), freq);\n}\n\nutil.inherits(Barometer, Emitter);\n\n/* istanbul ignore else */\nif (!!process.env.IS_TEST_MODE) {\n  Barometer.Controllers = Controllers;\n  Barometer.purge = function() {};\n}\n\nmodule.exports = Barometer;\n","/home/travis/build/npmtest/node-npmtest-johnny-five/node_modules/johnny-five/lib/button.js":"var Board = require(\"./board\");\nvar Collection = require(\"./mixins/collection\");\nvar EVS = require(\"./evshield\");\nvar Pins = Board.Pins;\nvar Fn = require(\"./fn\");\nvar Emitter = require(\"events\").EventEmitter;\nvar util = require(\"util\");\n\n// Button instance private data\nvar priv = new Map();\nvar aliases = {\n  down: [\"down\", \"press\", \"tap\", \"impact\", \"hit\"],\n  up: [\"up\", \"release\"]\n};\n\n\n\nvar Controllers = {\n  DEFAULT: {\n    initialize: {\n      value: function(opts, dataHandler) {\n        var state = priv.get(this);\n\n        if (Pins.isFirmata(this) && typeof opts.pinValue === \"string\" && opts.pinValue[0] === \"A\") {\n          opts.pinValue = this.io.analogPins[+opts.pinValue.slice(1)];\n        }\n\n        this.pin = Number.isNaN(+opts.pinValue) ? opts.pinValue : +opts.pinValue;\n\n        this.io.pinMode(this.pin, this.io.MODES.INPUT);\n\n        // Enable the pullup resistor after setting pin mode\n        if (this.pullup) {\n          this.io.digitalWrite(this.pin, this.io.HIGH);\n        }\n\n        // Enable the pulldown resistor after setting pin mode\n        if (this.pulldown) {\n          this.io.digitalWrite(this.pin, this.io.LOW);\n        }\n\n        this.io.digitalRead(this.pin, function(data) {\n          if (data !== state.last) {\n            dataHandler(data);\n          }\n        });\n      }\n    },\n    toBoolean: {\n      value: function(raw) {\n        return raw === this.downValue;\n      }\n    }\n  },\n\n  TINKERKIT: {\n    initialize: {\n      value: function(opts, dataHandler) {\n        var state = priv.get(this);\n        var value = 0;\n\n        this.io.pinMode(this.pin, this.io.MODES.ANALOG);\n\n        this.io.analogRead(this.pin, function(data) {\n          data = data > 512 ?  1 : 0;\n\n          // This condition simulates digitalRead's\n          // behavior of limiting calls to changes in\n          // pin value.\n          /* istanbul ignore else */\n          if (data !== value && data !== state.last) {\n            dataHandler(data);\n          }\n\n          value = data;\n        });\n      }\n    },\n    toBoolean: {\n      value: function(raw) {\n        return raw === this.downValue;\n      }\n    }\n  },\n\n  EVS_EV3: {\n    initialize: {\n      value: function(opts, dataHandler) {\n        var state = priv.get(this);\n\n        state.previous = 0;\n        state.shield = EVS.shieldPort(opts.pin);\n        state.register = EVS.Touch;\n\n        state.ev3 = new EVS(Object.assign(opts, {\n          io: this.io\n        }));\n        state.ev3.setup(state.shield, EVS.Type_EV3_TOUCH);\n        state.ev3.read(state.shield, EVS.Touch, EVS.Touch_Bytes, function(data) {\n          var value = data[0];\n          // Since i2cRead is continuous regardless of the reading,\n          // and digitalRead is continuous but only called for changes\n          // in reading value, we need to suppress repeated calls to\n          // dataHandler by limiting to only changed values.\n          /* istanbul ignore else */\n          if (state.previous !== value) {\n            dataHandler(value);\n          }\n          state.previous = value;\n        });\n      }\n    },\n    toBoolean: {\n      value: function(raw) {\n        return raw === this.downValue;\n      }\n    }\n  },\n  EVS_NXT: {\n    initialize: {\n      value: function(opts, dataHandler) {\n        var state = priv.get(this);\n\n        state.previous = 0;\n        state.shield = EVS.shieldPort(opts.pin);\n\n        state.ev3 = new EVS(Object.assign(opts, {\n          io: this.io\n        }));\n        state.ev3.setup(state.shield, EVS.Type_ANALOG);\n        state.ev3.read(state.shield, state.shield.analog, EVS.Analog_Bytes, function(data) {\n          var value = data[0] | (data[1] << 8);\n          // Since i2cRead is continuous regardless of the reading,\n          // and digitalRead is continuous but only called for changes\n          // in reading value, we need to suppress repeated calls to\n          // dataHandler by limiting to only changed values.\n          value = value < 300 ? 1 : 0;\n\n          /* istanbul ignore else */\n          if (state.previous !== value) {\n            dataHandler(value);\n          }\n          state.previous = value;\n        });\n      }\n    },\n    toBoolean: {\n      value: function(raw) {\n        return raw === this.downValue;\n      }\n    }\n  }\n};\n\n/**\n * Button\n * @constructor\n *\n * five.Button();\n *\n * five.Button({\n *   pin: 10\n * });\n *\n *\n * @param {Object} opts [description]\n *\n */\n\nfunction Button(opts) {\n  if (!(this instanceof Button)) {\n    return new Button(opts);\n  }\n\n  var pinValue;\n  var raw;\n  var invert = false;\n  var downValue = 1;\n  var upValue = 0;\n  var controller = null;\n  var state = {\n    interval: null,\n    last: null\n  };\n\n  // Create a debounce boundary on event triggers\n  // this avoids button events firing on\n  // press noise and false positives\n  var trigger = Fn.debounce(function(key) {\n    aliases[key].forEach(function(type) {\n      this.emit(type);\n    }, this);\n  }, 7);\n\n  pinValue = typeof opts === \"object\" ? opts.pin : opts;\n\n  Board.Component.call(\n    this, opts = Board.Options(opts)\n  );\n\n  opts.pinValue = pinValue;\n\n  if (opts.controller && typeof opts.controller === \"string\") {\n    controller = Controllers[opts.controller.toUpperCase()];\n  } else {\n    controller = opts.controller;\n  }\n\n  if (controller == null) {\n    controller = Controllers.DEFAULT;\n  }\n\n  Board.Controller.call(this, controller, opts);\n\n  // `holdtime` is used by an interval to determine\n  // if the button has been released within a specified\n  // time frame, in milliseconds.\n  this.holdtime = opts.holdtime || 500;\n\n  // `opts.isPullup` is included as part of an effort to\n  // phase out \"isFoo\" options properties\n  this.pullup = opts.pullup || opts.isPullup || false;\n\n  this.pulldown = opts.pulldown || opts.isPulldown || false;\n\n  // Turns out some button circuits will send\n  // 0 for up and 1 for down, and some the inverse,\n  // so we can invert our function with this option.\n  // Default to invert in pullup mode, but use opts.invert\n  // if explicitly defined (even if false)\n  invert = typeof opts.invert !== \"undefined\" ?\n    opts.invert : (this.pullup || false);\n\n  if (invert) {\n    downValue = downValue ^ 1;\n    upValue = upValue ^ 1;\n  }\n\n  state.last = upValue;\n\n  // Create a \"state\" entry for privately\n  // storing the state of the button\n  priv.set(this, state);\n\n  Object.defineProperties(this, {\n    value: {\n      get: function() {\n        return Number(this.isDown);\n      }\n    },\n    invert: {\n      get: function() {\n        return invert;\n      },\n      set: function(value) {\n        invert = value;\n        downValue = invert ? 0 : 1;\n        upValue = invert ? 1 : 0;\n\n        state.last = upValue;\n      }\n    },\n    downValue: {\n      get: function() {\n        return downValue;\n      },\n      set: function(value) {\n        downValue = value;\n        upValue = value ^ 1;\n        invert = value ? true : false;\n\n        state.last = upValue;\n      }\n    },\n    upValue: {\n      get: function() {\n        return upValue;\n      },\n      set: function(value) {\n        upValue = value;\n        downValue = value ^ 1;\n        invert = value ? true : false;\n\n        state.last = downValue;\n      }\n    },\n    isDown: {\n      get: function() {\n        return this.toBoolean(raw);\n      }\n    }\n  });\n\n  /* istanbul ignore else */\n  if (typeof this.initialize === \"function\") {\n    this.initialize(opts, function(data) {\n      // Update the raw data value, which\n      // is used by isDown = toBoolean()\n      raw = data;\n\n      if (!this.isDown) {\n        /* istanbul ignore else */\n        if (state.interval) {\n          clearInterval(state.interval);\n        }\n        trigger.call(this, \"up\");\n      }\n\n      if (this.isDown) {\n        trigger.call(this, \"down\");\n\n        state.interval = setInterval(function() {\n          /* istanbul ignore else */\n          if (this.isDown) {\n            this.emit(\"hold\");\n          }\n        }.bind(this), this.holdtime);\n      }\n\n      state.last = data;\n    }.bind(this));\n  }\n}\n\nutil.inherits(Button, Emitter);\n\n\n/**\n * Fired when the button is pressed down\n *\n * @event\n * @name down\n * @memberOf Button\n */\n\n/**\n * Fired when the button is held\n *\n * @event\n * @name hold\n * @memberOf Button\n */\n\n/**\n * Fired when the button is released\n *\n * @event\n * @name up\n * @memberOf Button\n */\n\n\n/**\n * Buttons()\n * new Buttons()\n */\n\nfunction Buttons(numsOrObjects) {\n  if (!(this instanceof Buttons)) {\n    return new Buttons(numsOrObjects);\n  }\n\n  Object.defineProperty(this, \"type\", {\n    value: Button\n  });\n\n  Collection.Emitter.call(this, numsOrObjects);\n}\n\nutil.inherits(Buttons, Collection.Emitter);\n\nCollection.installMethodForwarding(\n  Buttons.prototype, Button.prototype\n);\n\n// Assign Buttons Collection class as static \"method\" of Button.\nButton.Collection = Buttons;\n\n/* istanbul ignore else */\nif (!!process.env.IS_TEST_MODE) {\n  Button.Controllers = Controllers;\n  Button.purge = function() {\n    priv.clear();\n  };\n}\n\n\nmodule.exports = Button;\n","/home/travis/build/npmtest/node-npmtest-johnny-five/node_modules/johnny-five/lib/evshield.js":"var Emitter = require(\"events\").EventEmitter;\nvar util = require(\"util\");\nvar shared;\n\nfunction Bank(options) {\n  this.address = options.address;\n  this.io = options.io;\n  this.io.i2cConfig(options);\n}\n\nBank.prototype.read = function(register, numBytes, callback) {\n  if (register) {\n    this.io.i2cRead(this.address, register, numBytes, callback);\n  } else {\n    this.io.i2cRead(this.address, numBytes, callback);\n  }\n};\n\nBank.prototype.write = function(register, bytes) {\n  if (!Array.isArray(bytes)) {\n    bytes = [bytes];\n  }\n  this.io.i2cWrite(this.address, register, bytes);\n};\n\n// http://www.nr.edu/csc200/labs-ev3/ev3-user-guide-EN.pdf\n\nfunction EVS(options) {\n  if (shared) {\n    return shared;\n  }\n\n  this.bank = {\n    a: new Bank({\n      address: EVS.BANK_A,\n      io: options.io,\n    }),\n    b: new Bank({\n      address: EVS.BANK_B,\n      io: options.io,\n    })\n  };\n\n  shared = this;\n}\n\nEVS.shieldPort = function(pin) {\n  var port = EVS[pin];\n\n  if (port === undefined) {\n    throw new Error(\"Invalid EVShield pin name\");\n  }\n\n  var address, analog, bank, motor, mode, offset, sensor;\n  var endsWithS1 = false;\n\n  if (pin.startsWith(\"BA\")) {\n    address = EVS.BANK_A;\n    bank = \"a\";\n  } else {\n    address = EVS.BANK_B;\n    bank = \"b\";\n  }\n\n  if (pin.includes(\"M\")) {\n    motor = pin.endsWith(\"M1\") ? EVS.S1 : EVS.S2;\n  }\n\n  if (pin.includes(\"S\")) {\n    endsWithS1 = pin.endsWith(\"S1\");\n\n    // Used for reading 2 byte integer values from raw sensors\n    analog = endsWithS1 ? EVS.S1_ANALOG : EVS.S2_ANALOG;\n    // Sensor Mode (1 or 2?)\n    mode = endsWithS1 ? EVS.S1_MODE : EVS.S2_MODE;\n    // Used for read registers\n    offset = endsWithS1 ? EVS.S1_OFFSET : EVS.S2_OFFSET;\n    // Used to address \"sensor type\"\n    sensor = endsWithS1 ? EVS.S1 : EVS.S2;\n  }\n\n  return {\n    address: address,\n    analog: analog,\n    bank: bank,\n    mode: mode,\n    motor: motor,\n    offset: offset,\n    port: port,\n    sensor: sensor,\n  };\n};\n\nEVS.isRawSensor = function(port) {\n  return port.analog === EVS.S1_ANALOG || port.analog === EVS.S2_ANALOG;\n};\n\nutil.inherits(EVS, Emitter);\n\nEVS.prototype.setup = function(port, type) {\n  this.bank[port.bank].write(port.mode, [type]);\n};\n\nEVS.prototype.read = function(port, register, numBytes, callback) {\n\n  if (port.sensor && port.offset && !EVS.isRawSensor(port)) {\n    register += port.offset;\n  }\n\n  this.bank[port.bank].read(register, numBytes, callback);\n};\n\nEVS.prototype.write = function(port, register, data) {\n  this.bank[port.bank].write(register, data);\n};\n\n/*\n * Shield Registers\n */\n\nEVS.BAS1 = 0x01;\nEVS.BAS2 = 0x02;\nEVS.BBS1 = 0x03;\nEVS.BBS2 = 0x04;\n\nEVS.BAM1 = 0x05;\nEVS.BAM2 = 0x06;\nEVS.BBM1 = 0x07;\nEVS.BBM2 = 0x08;\n\nEVS.BANK_A = 0x1A;\nEVS.BANK_B = 0x1B;\n\nEVS.S1 = 0x01;\nEVS.S2 = 0x02;\n\nEVS.M1 = 0x01;\nEVS.M2 = 0x02;\nEVS.MM = 0x03;\n\nEVS.Type_NONE = 0x00;\nEVS.Type_SWITCH = 0x01;\nEVS.Type_ANALOG = 0x02;\n\nEVS.Type_I2C = 0x09;\n\n/*\n * Sensor Mode NXT\n */\nEVS.Type_NXT_LIGHT_REFLECTED = 0x03;\nEVS.Type_NXT_LIGHT = 0x04;\nEVS.Type_NXT_COLOR = 0x0D;\nEVS.Type_NXT_COLOR_RGBRAW = 0x04;\nEVS.Type_NXT_COLORRED = 0x0E;\nEVS.Type_NXT_COLORGREEN = 0x0F;\nEVS.Type_NXT_COLORBLUE = 0x10;\nEVS.Type_NXT_COLORNONE = 0x11;\n\n\nEVS.Type_DATABIT0_HIGH = 0x40;\n\n/*\n * Sensor Port Controls\n */\nEVS.S1_MODE = 0x6F;\n// EVS.S1_EV3_MODE = 0x6F;\nEVS.S1_ANALOG = 0x70;\nEVS.S1_OFFSET = 0;\n\nEVS.S2_MODE = 0xA3;\n// EVS.S2_EV3_MODE = 0x6F;\nEVS.S2_ANALOG = 0xA4;\nEVS.S2_OFFSET = 52;\n\n/*\n * Sensor Mode EV3\n */\nEVS.Type_EV3_LIGHT_REFLECTED = 0x00;\nEVS.Type_EV3_LIGHT = 0x01;\nEVS.Type_EV3_COLOR = 0x02;\nEVS.Type_EV3_COLOR_REFRAW = 0x03;\nEVS.Type_EV3_COLOR_RGBRAW = 0x04;\nEVS.Type_EV3_TOUCH = 0x12;\nEVS.Type_EV3 = 0x13;\n\n/*\n * Sensor Read Registers\n */\nEVS.Light = 0x83;\nEVS.Bump = 0x84;\nEVS.ColorMeasure = 0x83;\nEVS.Proximity = 0x83;\nEVS.Touch = 0x83;\nEVS.Ultrasonic = 0x81;\nEVS.Mode = 0x81;\n\n/*\n * Sensor Read Byte Counts\n */\nEVS.Light_Bytes = 2;\nEVS.Analog_Bytes = 2;\nEVS.Bump_Bytes = 1;\nEVS.ColorMeasure_Bytes = 2;\nEVS.Proximity_Bytes = 2;\nEVS.Touch_Bytes = 1;\n\n\n/*\n * Motor selection\n */\nEVS.Motor_1 = 0x01;\nEVS.Motor_2 = 0x02;\nEVS.Motor_Both = 0x03;\n\n/*\n * Motor next action\n */\n// stop and let the motor coast.\nEVS.Motor_Next_Action_Float = 0x00;\n// apply brakes, and resist change to tachometer, but if tach position is forcibly changed, do not restore position\nEVS.Motor_Next_Action_Brake = 0x01;\n// apply brakes, and restore externally forced change to tachometer\nEVS.Motor_Next_Action_BrakeHold = 0x02;\n\nEVS.Motor_Stop = 0x60;\nEVS.Motor_Reset = 0x52;\n\n/*\n * Motor direction\n */\n\nEVS.Motor_Reverse = 0x00;\nEVS.Motor_Forward = 0x01;\n\n/*\n * Motor Tachometer movement\n */\n\n// Move the tach to absolute value provided\nEVS.Motor_Move_Absolute = 0x00;\n// Move the tach relative to previous position\nEVS.Motor_Move_Relative = 0x01;\n\n/*\n * Motor completion\n */\n\nEVS.Motor_Completion_Dont_Wait = 0x00;\nEVS.Motor_Completion_Wait_For = 0x01;\n\n/*\n * 0-100\n */\nEVS.Speed_Full = 90;\nEVS.Speed_Medium = 60;\nEVS.Speed_Slow = 25;\n\n/*\n * Motor Port Controls\n */\nEVS.CONTROL_SPEED = 0x01;\nEVS.CONTROL_RAMP = 0x02;\nEVS.CONTROL_RELATIVE = 0x04;\nEVS.CONTROL_TACHO = 0x08;\nEVS.CONTROL_BRK = 0x10;\nEVS.CONTROL_ON = 0x20;\nEVS.CONTROL_TIME = 0x40;\nEVS.CONTROL_GO = 0x80;\n\nEVS.STATUS_SPEED = 0x01;\nEVS.STATUS_RAMP = 0x02;\nEVS.STATUS_MOVING = 0x04;\nEVS.STATUS_TACHO = 0x08;\nEVS.STATUS_BREAK = 0x10;\nEVS.STATUS_OVERLOAD = 0x20;\nEVS.STATUS_TIME = 0x40;\nEVS.STATUS_STALL = 0x80;\n\nEVS.COMMAND = 0x41;\nEVS.VOLTAGE = 0x6E;\n\nEVS.SETPT_M1 = 0x42;\nEVS.SPEED_M1 = 0x46;\nEVS.TIME_M1 = 0x47;\nEVS.CMD_B_M1 = 0x48;\nEVS.CMD_A_M1 = 0x49;\n\nEVS.SETPT_M2 = 0x4A;\nEVS.SPEED_M2 = 0x4E;\nEVS.TIME_M2 = 0x4F;\nEVS.CMD_B_M2 = 0x50;\nEVS.CMD_A_M2 = 0x51;\n\n\n/*\n * Motor Read registers.\n */\nEVS.POSITION_M1 = 0x52;\nEVS.POSITION_M2 = 0x56;\nEVS.STATUS_M1 = 0x5A;\nEVS.STATUS_M2 = 0x5B;\nEVS.TASKS_M1 = 0x5C;\nEVS.TASKS_M2 = 0x5D;\n\nEVS.ENCODER_PID = 0x5E;\nEVS.SPEED_PID = 0x64;\nEVS.PASS_COUNT = 0x6A;\nEVS.TOLERANCE = 0x6B;\n\n/*\n * Built-in components\n */\nEVS.BTN_PRESS = 0xDA;\nEVS.RGB_LED = 0xD7;\nEVS.CENTER_RGB_LED = 0xDE;\n\n\n\nmodule.exports = EVS;\n","/home/travis/build/npmtest/node-npmtest-johnny-five/node_modules/johnny-five/lib/color.js":"var Board = require(\"./board\");\nvar EVS = require(\"./evshield\");\nvar Emitter = require(\"events\").EventEmitter;\nvar util = require(\"util\");\nvar Fn = require(\"./fn\");\nvar priv = new Map();\n\n\nfunction pad(value, length) {\n  return Array(length - String(value).length + 1).join(\"0\") + value;\n}\n\nvar Controllers = {\n  EVS_EV3: {\n    initialize: {\n      value: function(opts, dataHandler) {\n        var state = priv.get(this);\n\n        if (opts.mode) {\n          opts.mode = opts.mode.toUpperCase();\n        }\n\n        state.mode = opts.mode === \"RAW\" ? EVS.Type_EV3_COLOR_RGBRAW : EVS.Type_EV3_COLOR;\n        state.bytes = state.mode === EVS.Type_EV3_COLOR_RGBRAW ? 6 : 2;\n\n        // Do not change the order of these items. They are listed such that the\n        // index corresponds to the color code produced by the EV3 color sensor.\n        // The range is very limited.\n        state.colors = [\n          [],\n          [0, 0, 0],\n          [0, 0, 255],\n          [0, 128, 0],\n          [255, 255, 0],\n          [255, 0, 0],\n          [255, 255, 255],\n          [139, 69, 19],\n        ];\n\n        state.shield = EVS.shieldPort(opts.pin);\n        state.ev3 = new EVS(Object.assign(opts, {\n          io: this.io\n        }));\n\n        state.ev3.setup(state.shield, EVS.Type_EV3);\n        state.ev3.write(state.shield, 0x81 + state.shield.offset, state.mode);\n        state.ev3.read(state.shield, EVS.ColorMeasure, state.bytes, function(data) {\n          var value = \"\";\n          if (state.bytes === 2) {\n            value += String((data[0] | (data[1] << 8)) || 1);\n          } else {\n            for (var i = 0; i < 3; i++) {\n              value += pad(data[i * 2].toString(16), 2);\n            }\n          }\n          dataHandler(value);\n        });\n      }\n    },\n    toRGB: {\n      value: function(raw) {\n        var state = priv.get(this);\n\n        if (state.mode === EVS.Type_EV3_COLOR) {\n          return raw > 0 && raw < 8 ? state.colors[raw] : state.colors[0];\n        } else {\n          raw = String(raw);\n          return [0, 0, 0].map(function(zero, index) {\n            return parseInt(raw.slice(index * 2, index * 2 + 2), 16);\n          });\n        }\n      }\n    }\n  },\n  EVS_NXT: {\n    initialize: {\n      value: function(opts, dataHandler) {\n        var state = priv.get(this);\n\n        if (opts.mode) {\n          opts.mode = opts.mode.toUpperCase();\n        }\n\n        state.mode = opts.mode === \"RAW\" ? EVS.Type_NXT_COLOR_RGBRAW : EVS.Type_NXT_COLOR;\n        state.bytes = state.mode === EVS.Type_NXT_COLOR_RGBRAW ? 10 : 1;\n\n        if (state.mode === EVS.Type_NXT_COLOR_RGBRAW) {\n          throw new Error(\"Raw RGB is not currently supported for the NXT.\");\n        }\n\n        // Do not change the order of these items. They are listed such that the\n        // index corresponds to the color code produced by the EV3 color sensor.\n        // The range is very limited.\n        state.colors = [\n          [],\n          [0, 0, 0],\n          [0, 0, 255],\n          [0, 128, 0],\n          [255, 255, 0],\n          [255, 0, 0],\n          [255, 255, 255],\n        ];\n\n        state.shield = EVS.shieldPort(opts.pin);\n        state.ev3 = new EVS(Object.assign(opts, {\n          io: this.io\n        }));\n        state.ev3.setup(state.shield, EVS.Type_NXT_COLOR);\n        state.ev3.read(state.shield, 0x70 + state.shield.offset, state.bytes, function(data) {\n          var value = \"\";\n\n          if (state.bytes === 1) {\n            value += String(data[0]);\n          } else {\n\n            // One day I'll figure this out :|\n            // There is a lot of documentation that\n            // claims this is possible, but I couldn't\n            // figure out how to make sense of the\n            // data that's returned.\n            //\n            // http://www.mathworks.com/help/supportpkg/legomindstormsnxt/ref/legomindstormsnxtcolorsensor.html#zmw57dd0e700\n            // https://msdn.microsoft.com/en-us/library/ff631052.aspx\n            // http://www.lejos.org/nxt/nxj/api/lejos/nxt/ColorSensor.html\n            // http://www.robotc.net/forums/viewtopic.php?f=52&t=6939\n            // http://code.metager.de/source/xref/lejos/classes/src/lejos/nxt/SensorPort.java#calData\n            // http://code.metager.de/source/xref/lejos/classes/src/lejos/nxt/SensorPort.java#SP_MODE_INPUT\n            // http://code.metager.de/source/xref/lejos/classes/src/lejos/nxt/SensorPort.java#416\n          }\n\n          // if (data[4] !== 0) {\n          dataHandler(value);\n          // }\n        });\n      }\n    },\n    toRGB: {\n      value: function(raw) {\n        var state = priv.get(this);\n\n        if (state.mode === EVS.Type_NXT_COLOR) {\n          return raw > 0 && raw < 7 ? state.colors[raw] : state.colors[0];\n        } else {\n          raw = String(raw);\n          return [0, 0, 0].map(function(zero, index) {\n            return parseInt(raw.slice(index * 2, index * 2 + 2), 16);\n          });\n        }\n      }\n    }\n  },\n  ISL29125: {\n    // http://www.intersil.com/content/dam/Intersil/documents/isl2/isl29125.pdf\n    REGISTER: {\n      value: {\n        RESET: 0x00,\n        // mode/lux range\n        CONFIG1: 0x01,\n        // ir adjust/filtering\n        CONFIG2: 0x02,\n        // interrupt control\n        CONFIG3: 0x03,\n        // Same as \"GREEN DATA - LOW BYTE\"\n        READ: 0x09\n      }\n    },\n    initialize: {\n      value: function(opts, dataHandler) {\n        // Cannot change address, so all values const/closed.\n        var address = opts.address || 0x44;\n\n        // TODO: make configs user \"definable\"\n\n        opts.address = address;\n\n        this.io.i2cConfig();\n\n        // Reset chip\n        this.io.i2cWriteReg(address, this.REGISTER.RESET, 0x46);\n\n        // RGB | 10K Lux | 12bits\n        this.io.i2cWriteReg(address, this.REGISTER.CONFIG1, 0x05 | 0x08 | 0x00);\n\n        // High adjust\n        this.io.i2cWriteReg(address, this.REGISTER.CONFIG2, 0x3F);\n\n        // No Interrupts\n        this.io.i2cWriteReg(address, this.REGISTER.CONFIG3, 0x00);\n\n        this.io.i2cRead(address, this.REGISTER.READ, 6, function(data) {\n          var value = \"\";\n\n          // Register order: GLSB, GMSB, RLSB, RMSB, BLSB, BMSB\n          var g = (data[1] << 8) | data[0];\n          var r = (data[3] << 8) | data[2];\n          var b = (data[5] << 8) | data[4];\n\n          var rgb = [r >> 2, g >> 2, b >> 2].map(function(value) {\n            return Fn.constrain(value, 0, 255);\n          });\n\n          for (var i = 0; i < 3; i++) {\n            value += pad(rgb[i].toString(16), 2);\n          }\n\n          dataHandler(value);\n        });\n      }\n    },\n    toRGB: {\n      value: function(raw) {\n        raw = String(raw);\n        return [0, 0, 0].map(function(zero, index) {\n          return parseInt(raw.slice(index * 2, index * 2 + 2), 16);\n        });\n      }\n    }\n  },\n};\n\n\nvar colorNames = [\"red\", \"green\", \"blue\"];\n\n\n/**\n * Color\n * @constructor\n *\n */\n\nfunction Color(opts) {\n\n  if (!(this instanceof Color)) {\n    return new Color(opts);\n  }\n\n  var controller = null;\n  var state = {};\n  var freq = opts.freq || 25;\n  var raw = 0;\n  var last = null;\n\n  Board.Component.call(\n    this, opts = Board.Options(opts)\n  );\n\n  if (typeof opts.controller === \"string\") {\n    controller = Controllers[opts.controller];\n  } else {\n    controller = opts.controller;\n  }\n\n  if (controller == null) {\n    throw new Error(\"Color expects a valid controller\");\n  }\n\n  priv.set(this, state);\n\n  Board.Controller.call(this, controller, opts);\n\n  if (!this.toRGB) {\n    this.toRGB = opts.toRGB || function(x) {\n      return x;\n    };\n  }\n\n  Object.defineProperties(this, {\n    value: {\n      get: function() {\n        return raw;\n      }\n    },\n    rgb: {\n      get: function() {\n        return this.toRGB(raw).reduce(function(accum, value, index) {\n          accum[colorNames[index]] = value;\n          return accum;\n        }, {});\n      }\n    }\n  });\n\n  if (typeof this.initialize === \"function\") {\n    this.initialize(opts, function(data) {\n      raw = data;\n    });\n  }\n\n  setInterval(function() {\n    if (raw === undefined) {\n      return;\n    }\n\n    var data = {\n      rgb: this.rgb,\n    };\n\n    this.emit(\"data\", data);\n\n    if (raw !== last) {\n      last = raw;\n      this.emit(\"change\", data);\n    }\n  }.bind(this), freq);\n}\n\nutil.inherits(Color, Emitter);\n\nColor.hexCode = function(rgb) {\n  if (rgb.red === undefined || rgb.green === undefined || rgb.blue === undefined) {\n    return null;\n  }\n  return rgb.length === 0 ? \"unknown\" : colorNames.reduce(function(accum, name) {\n    return accum += pad(rgb[name].toString(16), 2);\n  }, \"\");\n};\n\n\n/* istanbul ignore else */\nif (!!process.env.IS_TEST_MODE) {\n  Color.Controllers = Controllers;\n  Color.purge = function() {\n    priv.clear();\n  };\n}\n\nmodule.exports = Color;\n","/home/travis/build/npmtest/node-npmtest-johnny-five/node_modules/johnny-five/lib/compass.js":"var Board = require(\"./board\");\nvar Emitter = require(\"events\").EventEmitter;\nvar util = require(\"util\");\nvar Fn = require(\"./fn\");\nvar int16 = Fn.int16;\nvar TAU = Fn.TAU;\n\nvar priv = new Map();\n\nvar Controllers = {\n\n  // https://cdn-shop.adafruit.com/datasheets/HMC5883L_3-Axis_Digital_Compass_IC.pdf\n  HMC5883L: {\n    REGISTER: {\n      value: {\n        // Page 11\n        // Table 2: Register List\n        //\n        // Configuration Register A\n        CRA: 0x00,\n        // Configuration Register B\n        // This may change, depending on gauss\n        CRB: 0x01,\n        // Mode Register\n        MODE: 0x02,\n        // Data Output X MSB Register\n        READ: 0x03,\n      }\n    },\n    initialize: {\n      value: function(opts, dataHandler) {\n        var state = priv.get(this);\n        var address = opts.address || 0x1E;\n        var READLENGTH = 6;\n\n        state.scale = 1;\n\n        Object.assign(state, new Compass.Scale(opts.gauss || 0.88));\n\n        opts.address = address;\n\n        this.io.i2cConfig(opts);\n\n        // Page 18\n        // OPERATIONAL EXAMPLES...\n        //\n        // 1. Write CRA (00) – send 0x3C 0x00 0x70 (8-average, 15 Hz default, normal measurement)\n        //\n        // Set CRA\n        // Page 12\n        this.io.i2cWrite(address, this.REGISTER.CRA, 0x70);\n\n        // Set CRB\n        // Page 13\n        this.io.i2cWrite(address, this.REGISTER.CRB, 0x40);\n\n        // Page 14\n        // Measurement: Continuous\n        this.io.i2cWrite(address, this.REGISTER.MODE, 0x00);\n\n        this.io.i2cRead(address, this.REGISTER.READ, READLENGTH, function(bytes) {\n          dataHandler({\n            x: int16(bytes[0], bytes[1]),\n            y: int16(bytes[4], bytes[5]),\n            z: int16(bytes[2], bytes[3]),\n          });\n        });\n      }\n    },\n    toScaledHeading: {\n      value: function(raw) {\n        var state = priv.get(this);\n\n        return ToHeading(raw.x * state.scale, raw.y * state.scale);\n      }\n    }\n  },\n\n  /**\n   * HMC6352: 2-Axis Compass Module\n   * 0x42\n   *\n   * http://www.sparkfun.com/datasheets/Components/HMC6352.pdf\n   * http://bildr.org/2011/01/hmc6352/\n   */\n  HMC6352: {\n    REGISTER: {\n      value: {\n        READ: 0x41\n      }\n    },\n    initialize: {\n      value: function(opts, dataHandler) {\n        var state = priv.get(this);\n        var address = opts.address || 0x21;\n        var READLENGTH = 2;\n\n        state.scale = 1;\n\n        opts.delay = 10;\n        opts.address = address;\n\n        this.io.i2cConfig(opts);\n\n        this.io.i2cWrite(address, this.REGISTER.READ);\n\n        // Initialize continuous read\n        this.io.i2cRead(address, this.REGISTER.READ, READLENGTH, function(bytes) {\n          dataHandler({\n            x: (((bytes[0] << 8) + bytes[1]) / 10) | 0,\n            y: null,\n            z: null,\n          });\n        });\n      }\n    },\n    toScaledHeading: {\n      value: function(raw) {\n        var state = priv.get(this);\n        return raw.x * state.scale;\n      },\n    },\n  },\n\n  BNO055: {\n    initialize: {\n      value: function(opts, dataHandler) {\n        var IMU = require(\"./imu\");\n        var driver = IMU.Drivers.get(this.board, \"BNO055\", opts);\n        var state = priv.get(this);\n\n        // AF p.32, Table 3-19: Magnetometer Unit settings\n        state.sensitivity = 16;\n\n        driver.on(\"data\", function(data) {\n          dataHandler(data.magnetometer);\n        });\n      }\n    },\n    toScaledHeading: {\n      value: function(raw) {\n        var state = priv.get(this);\n\n        var x = raw.x / state.sensitivity;\n        var y = raw.y / state.sensitivity;\n\n        return ToHeading(x, y);\n      },\n    },\n  },\n\n  // http://www.nxp.com/files/sensors/doc/data_sheet/MAG3110.pdf\n  MAG3110: {\n    REGISTER: {\n      value: {\n        // Page 15\n        // Table 11 Register Address Map\n        // DR_STATUS\n        STATUS: 0x00,\n        // OUT_X_MSB\n        READ: 0x01,\n        // OFF_X_MSB\n        OFFSETS: 0x09,\n        // CTRL_REG1\n        CTRL_REG1: 0x10,\n        // CTRL_REG2\n        CTRL_REG2: 0x11,\n      }\n    },\n    initialize: {\n      value: function(opts, dataHandler) {\n        var state = priv.get(this);\n\n        // MAG3110 has only one possible address\n        var address = 0x0E;\n        var isDataPending = false;\n        var temp;\n\n        state.isCalibrated = false;\n        state.isPreCalibrated = false;\n        state.hasEmittedCalibration = false;\n        state.measurements = 20;\n\n        state.offsets = {\n          x: 0,\n          y: 0,\n          z: 0,\n        };\n        state.accum = {\n          x: { offset: null, high: 0, low: 0 },\n          y: { offset: null, high: 0, low: 0 },\n          z: { offset: null, high: 0, low: 0 },\n        };\n        opts.delay = 2;\n        opts.address = address;\n\n        if (opts.offsets) {\n          state.isCalibrated = true;\n          state.isPreCalibrated = true;\n\n          if (Array.isArray(opts.offsets)) {\n            temp = opts.offsets.slice();\n            opts.offsets = {\n              x: temp[0],\n              y: temp[1],\n              z: temp[2],\n            };\n          }\n\n          state.accum.x.low = opts.offsets.x[0];\n          state.accum.x.high = opts.offsets.x[1];\n          state.accum.x.offset = (state.accum.x.low + state.accum.x.high) / 2;\n\n          state.accum.y.low = opts.offsets.y[0];\n          state.accum.y.high = opts.offsets.y[1];\n          state.accum.y.offset = (state.accum.y.low + state.accum.y.high) / 2;\n\n          state.accum.z.low = opts.offsets.z[0];\n          state.accum.z.high = opts.offsets.z[1];\n          state.accum.z.offset = (state.accum.z.low + state.accum.z.high) / 2;\n        }\n\n        /*\n          Page 14\n          4.2.7 MAG3110 Setup Examples\n\n          Continuous measurements with ODR = 80 Hz, OSR = 1\n\n          1. Enable automatic magnetic sensor resets by setting bit AUTO_MRST_EN in CTRL_REG2.\n            (CTRL_REG2 = 0x80)\n          2. Put MAG3110 in active mode 80 Hz ODR with OSR = 1 by writing 0x01 to CTRL_REG1\n            (CTRL_REG1 = 0x01)\n          3. At this point it is possible to sync with MAG3110 utilizing INT1 pin or\n              using polling of the DR_STATUS register as explained in section 4.2.5.\n        */\n\n        this.io.i2cConfig(opts);\n        /*\n          Page 21\n          5.5.2 CTRL_REG2 (0x11)\n          Table 33.\n          CTRL_REG2 Register\n\n          | 7 | 6 | 5 | 4 | 3 | 2 | 1 | 0 |\n          |---|---|---|---|---|---|---|---|\n          | A |   | R | M |   |   |   |   |\n\n          A: Automatic Magnetic Sensor Reset. Default value: 0.\n          R: Data output correction. Default value: 0.\n          M: Magnetic Sensor Reset (One-Shot). Default value: 0.\n\n          | 7 | 6 | 5 | 4 | 3 | 2 | 1 | 0 |\n          |---|---|---|---|---|---|---|---|\n          | 1 |   | 0 | 0 |   |   |   |   |\n\n          0b10000000 = 128 = 0x80\n\n          RAW\n          0b10100000 = 160 = 0xA0\n        */\n        this.io.i2cWrite(address, this.REGISTER.CTRL_REG2, 0x80);\n        // this.io.i2cWrite(address, this.REGISTER.CTRL_REG2, 0xA0);\n\n        /*\n          Page 20\n          5.5.1 CTRL_REG1 (0x10)\n          Table 30. CTRL_REG1 Register\n          | 7 | 6 | 5 | 4 | 3 | 2 | 1 | 0 |\n          |---|---|---|---|---|---|---|---|\n          |DR2|DR1|DR0|OS1|OS0|FR |TM |AC |\n\n          See Table 31. CTRL_REG1 Description for complete descriptions\n\n          (Active mode, 80Hz)\n\n          | 7 | 6 | 5 | 4 | 3 | 2 | 1 | 0 |\n          |---|---|---|---|---|---|---|---|\n          | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 1 |\n\n          0b00000001 = 1 = 0x01\n        */\n        this.io.i2cWrite(address, this.REGISTER.CTRL_REG1, 0x01);\n\n        var measured = {\n          x: 0,\n          y: 0,\n          z: 0,\n        };\n\n        var readCycle = function() {\n          this.io.i2cReadOnce(address, this.REGISTER.STATUS, 1, function(data) {\n            /*\n              Page 16\n              5.1.1 DR_STATUS (0x00)\n\n              Table 12\n              | 7 | 6 | 5 | 4 | 3 | 2 | 1 | 0 |\n              |---|---|---|---|---|---|---|---|\n              |OVR|ZOW|XOW|YOW|DR |ZDR|YDR|XDR|\n\n              Table 13\n              (Contains Complete descriptions)\n\n              OVR (ZYXOW) (X, Y, Z-axis Data Overwrite. Default value: 0.)\n                0: No Data overwritten\n                1: Previous X, Y, Z has been overwritten\n\n              ZOW, YOW, XOW:\n                0: No Data overwritten\n                1: Previous X, Y, Z has been overwritten\n\n              DR (ZYXDR) (X or Y or Z-axis new Data Ready. Default value: 0.)\n                0: No new data is ready\n                1: New full set of data is ready\n\n              ZDR, YDR, XDR:\n                0: No new data is ready\n                1: New X, Y, Z data is ready\n\n              | 7 | 6 | 5 | 4 | 3 | 2 | 1 | 0 |\n              |---|---|---|---|---|---|---|---|\n              | 0 | 0 | 0 | 0 | 1 | 1 | 1 | 1 |\n\n\n              0b00001111 = 15 = 0x0F: A complete set of axis data is available\n\n              0b11111111 = 255 = 0xFF: All data is newly written\n\n            */\n            if (!isDataPending && (data[0] === 0x0F || data[0] === 0xFF)) {\n              isDataPending = true;\n\n              this.io.i2cReadOnce(address, this.REGISTER.READ, 6, function(bytes) {\n                var timeout = 0;\n\n                isDataPending = false;\n\n                measured.x = int16(bytes[0], bytes[1]);\n                measured.y = int16(bytes[2], bytes[3]);\n                measured.z = int16(bytes[4], bytes[5]);\n\n                if (!state.isCalibrated) {\n\n                  if (state.accum.x.offset === null) {\n                    state.accum.x.offset = measured.x;\n                    state.accum.x.low = measured.x;\n                    state.accum.x.high = measured.x;\n                  }\n\n                  if (state.accum.y.offset === null) {\n                    state.accum.y.offset = measured.y;\n                    state.accum.y.low = measured.y;\n                    state.accum.y.high = measured.y;\n                  }\n\n                  state.accum.x.low = Math.min(state.accum.x.low, measured.x);\n                  state.accum.x.high = Math.max(state.accum.x.high, measured.x);\n                  state.accum.x.offset = Math.trunc((state.accum.x.low + state.accum.x.high) / 2);\n\n                  state.accum.y.low = Math.min(state.accum.y.low, measured.y);\n                  state.accum.y.high = Math.max(state.accum.y.high, measured.y);\n                  state.accum.y.offset = Math.trunc((state.accum.y.low + state.accum.y.high) / 2);\n\n                  state.accum.z.low = Math.min(state.accum.z.low, measured.z);\n                  state.accum.z.high = Math.max(state.accum.z.high, measured.z);\n                  state.accum.z.offset = Math.trunc((state.accum.z.low + state.accum.z.high) / 2);\n\n                  --state.measurements;\n\n                  if (!state.measurements) {\n                    state.isCalibrated = true;\n                  }\n                }\n\n                if (state.isCalibrated) {\n                  if (!state.hasEmittedCalibration) {\n                    state.hasEmittedCalibration = true;\n\n                    state.offsets.x = state.accum.x.offset;\n                    state.offsets.y = state.accum.y.offset;\n                    state.offsets.z = state.accum.z.offset;\n\n                    this.io.i2cWrite(address, this.REGISTER.OFFSETS, [\n                      state.offsets.x >> 7, (state.offsets.x << 1) & 0xFF,\n                      state.offsets.y >> 7, (state.offsets.y << 1) & 0xFF,\n                      state.offsets.z >> 7, (state.offsets.z << 1) & 0xFF,\n                    ]);\n\n                    this.emit(\"calibrated\", {\n                      x: [state.accum.x.low, state.accum.x.high],\n                      y: [state.accum.y.low, state.accum.y.high],\n                      z: [state.accum.z.low, state.accum.z.high],\n                    });\n                  }\n\n                  timeout = Math.floor(1000 / 80);\n\n                  dataHandler(measured);\n                }\n\n                // MAG3110 is set to read at 80Hz (do this after calibration)\n                setTimeout(readCycle, timeout);\n              }.bind(this));\n            } else {\n              readCycle();\n            }\n          }.bind(this));\n        }.bind(this);\n\n        readCycle();\n      }\n    },\n    calibrate: {\n      value: function(measurements) {\n        var state = priv.get(this);\n\n        state.isCalibrated = false;\n        state.measurements = measurements;\n      }\n    },\n    toScaledHeading: {\n      value: function(raw) {\n        var state = priv.get(this);\n        var scale = {\n          x: 1 / (state.accum.x.high - state.accum.x.low),\n          y: 1 / (state.accum.y.high - state.accum.y.low),\n        };\n\n        var heading = Math.atan2(-raw.y * scale.y, raw.x * scale.x);\n\n        if (heading < 0) {\n          heading += TAU;\n        }\n\n        return Math.trunc(heading * Fn.RAD_TO_DEG);\n      },\n    },\n  },\n};\n\n\n/**\n * Compass\n * @constructor\n *\n * five.Compass();\n *\n * five.Compass({\n *  controller: \"HMC5883L\",\n *  freq: 50,\n * });\n *\n *\n * Device Shorthands:\n *\n * \"HMC5883L\": new five.Magnetometer()\n *\n *\n * @param {Object} opts [description]\n *\n */\n\nfunction Compass(opts) {\n\n  if (!(this instanceof Compass)) {\n    return new Compass(opts);\n  }\n\n  Board.Component.call(\n    this, opts = Board.Options(opts)\n  );\n\n  var freq = opts.freq || 25;\n  var controller = null;\n  var raw = {\n    x: null,\n    y: null,\n    z: null,\n  };\n  var state = {\n    x: 0,\n    y: 0,\n    z: 0,\n    scale: 0,\n    register: 0,\n    heading: 0\n  };\n\n  if (opts.controller && typeof opts.controller === \"string\") {\n    controller = Controllers[opts.controller.toUpperCase()];\n  } else {\n    controller = opts.controller;\n  }\n\n  if (controller == null) {\n    throw new Error(\"Compass expects a valid controller\");\n  }\n\n  Board.Controller.call(this, controller, opts);\n\n  if (!this.toScaledHeading) {\n    this.toScaledHeading = opts.toScaledHeading || function(raw) {\n      return raw;\n    };\n  }\n\n  priv.set(this, state);\n\n  if (typeof this.initialize === \"function\") {\n    this.initialize(opts, function(data) {\n      raw = data;\n    });\n  }\n\n  setInterval(function() {\n    if (raw.x === null) {\n      return;\n    }\n    var isChange = false;\n\n    state.x = raw.x;\n    state.y = raw.y;\n    state.z = raw.z;\n\n    var heading = this.heading;\n\n    if (heading !== state.heading) {\n      state.heading = heading;\n      isChange = true;\n    }\n\n    this.emit(\"data\", {\n      heading: state.heading\n    });\n\n    if (isChange) {\n      this.emit(\"change\", {\n        heading: state.heading\n      });\n    }\n  }.bind(this), freq);\n\n  Object.defineProperties(this, {\n    /**\n     * [read-only] Bearing information\n     * @name bearing\n     * @property\n     * @type Object\n     *\n     *\n        name\n        abbr\n        low\n        mid\n        high\n        heading\n     *\n     */\n\n    bearing: {\n      get: function() {\n        var length = Compass.Points.length;\n        var heading = Math.floor(this.heading);\n        var point;\n\n        for (var i = 0; i < length; i++) {\n          point = Compass.Points[i];\n\n          if (point.range.includes(heading)) {\n            // Specify fields to return to avoid returning the\n            // range array (too much noisy data)\n            return {\n              name: point.name,\n              abbr: point.abbr,\n              low: point.low,\n              high: point.high,\n              heading: heading\n            };\n          }\n        }\n      }\n    },\n\n    /**\n     * [read-only] Heading (azimuth)\n     * @name heading\n     * @property\n     * @type number\n     */\n    heading: {\n      get: function() {\n        return this.toScaledHeading(raw);\n      }\n    }\n  });\n}\n\n\nutil.inherits(Compass, Emitter);\n\nfunction ToHeading(x, y) {\n  /**\n   *\n   * Applications of Magnetoresistive Sensors in Navigation Systems\n   * by Michael J. Caruso of Honeywell Inc.\n   * http://www.ssec.honeywell.com/position-sensors/datasheets/sae.pdf\n   *\n   *\n   * Azimuth (x=0, y<0)   = 90.0 (3)\n   * Azimuth (x=0, y>0)   = 270.0\n   * Azimuth (x<0)        = 180 - [arcTan(y/x)]*180/PI\n   * Azimuth (x>0, y<0)   = - [arcTan(y/x)]*180/PI\n   * Azimuth (x>0, y>0)   = 360 - [arcTan(y/x)]*180/PI\n   *\n   *\n   *\n   *\n   *\n   */\n  /**\n   *\n   *\n   * http://bildr.org/2012/02/hmc5883l_arduino/\n   * @type {[type]}\n   * Copyright (C) 2011 Love Electronics (loveelectronics.co.uk)\n\n   This program is free software: you can redistribute it and/or modify it under the terms of the version 3 GNU General Public License as published by the Free Software Foundation.\n\n   This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License for more details.\n\n   You should have received a copy of the GNU General Public License along with this program. If not, see <http://www.gnu.org/licenses/>.\n\n   */\n\n  var radians = Math.atan2(y, x);\n\n  if (radians < 0) {\n    radians += TAU;\n  }\n\n  if (radians > TAU) {\n    radians -= TAU;\n  }\n\n  return radians * Fn.RAD_TO_DEG;\n}\n\n\n/**\n * Compass.scale Set the scale gauss for compass readings\n * @param  {Number} gauss [description]\n * @return {register}       [description]\n *\n * Ported from:\n * http://bildr.org/2012/02/hmc5883l_arduino/\n */\n\nCompass.Scale = function(gauss) {\n\n  if (gauss === 0.88) {\n    this.register = 0x00;\n    this.scale = 0.73;\n  } else if (gauss === 1.3) {\n    this.register = 0x01;\n    this.scale = 0.92;\n  } else if (gauss === 1.9) {\n    this.register = 0x02;\n    this.scale = 1.22;\n  } else if (gauss === 2.5) {\n    this.register = 0x03;\n    this.scale = 1.52;\n  } else if (gauss === 4.0) {\n    this.register = 0x04;\n    this.scale = 2.27;\n  } else if (gauss === 4.7) {\n    this.register = 0x05;\n    this.scale = 2.56;\n  } else if (gauss === 5.6) {\n    this.register = 0x06;\n    this.scale = 3.03;\n  } else if (gauss === 8.1) {\n    this.register = 0x07;\n    this.scale = 4.35;\n  } else {\n    this.register = 0x00;\n    this.scale = 1;\n  }\n\n  // Setting is in the top 3 bits of the register.\n  this.register = this.register << 5;\n};\n\n\n/**\n * Compass.Points\n *\n * 32 Point Compass\n * +1 for North\n *\n */\n\nCompass.Points = [{\n  name: \"North\",\n  abbr: \"N\",\n  low: 354.38,\n  high: 360\n}, {\n  name: \"North\",\n  abbr: \"N\",\n  low: 0,\n  high: 5.62\n}, {\n  name: \"North by East\",\n  abbr: \"NbE\",\n  low: 5.63,\n  high: 16.87\n}, {\n  name: \"North-NorthEast\",\n  abbr: \"NNE\",\n  low: 16.88,\n  high: 28.12\n}, {\n  name: \"NorthEast by North\",\n  abbr: \"NEbN\",\n  low: 28.13,\n  high: 39.37\n}, {\n  name: \"NorthEast\",\n  abbr: \"NE\",\n  low: 39.38,\n  high: 50.62\n}, {\n  name: \"NorthEast by East\",\n  abbr: \"NEbE\",\n  low: 50.63,\n  high: 61.87\n}, {\n  name: \"East-NorthEast\",\n  abbr: \"ENE\",\n  low: 61.88,\n  high: 73.12\n}, {\n  name: \"East by North\",\n  abbr: \"EbN\",\n  low: 73.13,\n  high: 84.37\n}, {\n  name: \"East\",\n  abbr: \"E\",\n  low: 84.38,\n  high: 95.62\n}, {\n  name: \"East by South\",\n  abbr: \"EbS\",\n  low: 95.63,\n  high: 106.87\n}, {\n  name: \"East-SouthEast\",\n  abbr: \"ESE\",\n  low: 106.88,\n  high: 118.12\n}, {\n  name: \"SouthEast by East\",\n  abbr: \"SEbE\",\n  low: 118.13,\n  high: 129.37\n}, {\n  name: \"SouthEast\",\n  abbr: \"SE\",\n  low: 129.38,\n  high: 140.62\n}, {\n  name: \"SouthEast by South\",\n  abbr: \"SEbS\",\n  low: 140.63,\n  high: 151.87\n}, {\n  name: \"South-SouthEast\",\n  abbr: \"SSE\",\n  low: 151.88,\n  high: 163.12\n}, {\n  name: \"South by East\",\n  abbr: \"SbE\",\n  low: 163.13,\n  high: 174.37\n}, {\n  name: \"South\",\n  abbr: \"S\",\n  low: 174.38,\n  high: 185.62\n}, {\n  name: \"South by West\",\n  abbr: \"SbW\",\n  low: 185.63,\n  high: 196.87\n}, {\n  name: \"South-SouthWest\",\n  abbr: \"SSW\",\n  low: 196.88,\n  high: 208.12\n}, {\n  name: \"SouthWest by South\",\n  abbr: \"SWbS\",\n  low: 208.13,\n  high: 219.37\n}, {\n  name: \"SouthWest\",\n  abbr: \"SW\",\n  low: 219.38,\n  high: 230.62\n}, {\n  name: \"SouthWest by West\",\n  abbr: \"SWbW\",\n  low: 230.63,\n  high: 241.87\n}, {\n  name: \"West-SouthWest\",\n  abbr: \"WSW\",\n  low: 241.88,\n  high: 253.12\n}, {\n  name: \"West by South\",\n  abbr: \"WbS\",\n  low: 253.13,\n  high: 264.37\n}, {\n  name: \"West\",\n  abbr: \"W\",\n  low: 264.38,\n  high: 275.62\n}, {\n  name: \"West by North\",\n  abbr: \"WbN\",\n  low: 275.63,\n  high: 286.87\n}, {\n  name: \"West-NorthWest\",\n  abbr: \"WNW\",\n  low: 286.88,\n  high: 298.12\n}, {\n  name: \"NorthWest by West\",\n  abbr: \"NWbW\",\n  low: 298.13,\n  high: 309.37\n}, {\n  name: \"NorthWest\",\n  abbr: \"NW\",\n  low: 309.38,\n  high: 320.62\n}, {\n  name: \"NorthWest by North\",\n  abbr: \"NWbN\",\n  low: 320.63,\n  high: 331.87\n}, {\n  name: \"North-NorthWest\",\n  abbr: \"NNW\",\n  low: 331.88,\n  high: 343.12\n}, {\n  name: \"North by West\",\n  abbr: \"NbW\",\n  low: 343.13,\n  high: 354.37\n}];\n\n// Add ranges to each compass point record\nCompass.Points.forEach(function(point, k) {\n  Compass.Points[k].range = Fn.range(Math.floor(point.low), Math.floor(point.high));\n});\n\n\n\n/**\n * Fires once every N ms, equal to value of `freq`. Defaults to 66ms\n *\n * @event\n * @name read\n * @memberOf Compass\n */\n\n\n/**\n * Fires when the calculated heading has changed\n *\n * @event\n * @name headingchange\n * @memberOf Compass\n */\n\n\n/* istanbul ignore else */\nif (!!process.env.IS_TEST_MODE) {\n  Compass.Controllers = Controllers;\n  Compass.purge = function() {\n    priv.clear();\n  };\n}\n\nmodule.exports = Compass;\n\n\n// http://en.wikipedia.org/wiki/Relative_direction\n","/home/travis/build/npmtest/node-npmtest-johnny-five/node_modules/johnny-five/lib/esc.js":"var Board = require(\"./board\");\nvar Expander = require(\"./expander\");\nvar Pins = Board.Pins;\nvar Collection = require(\"./mixins/collection\");\nvar Fn = require(\"./fn\");\nvar Emitter = require(\"events\").EventEmitter;\nvar util = require(\"util\");\n\nvar priv = new Map();\n\n\nvar Controllers = {\n  PCA9685: {\n    initialize: {\n      value: function(opts) {\n        var state = priv.get(this);\n\n        this.address = opts.address || 0x40;\n        this.pwmRange = opts.pwmRange || [544, 2400];\n        this.frequency = opts.frequency || 50;\n\n        state.expander = Expander.get({\n          address: this.address,\n          controller: this.controller,\n          bus: this.bus,\n          pwmRange: this.pwmRange,\n          frequency: this.frequency,\n        });\n\n        this.pin = state.expander.normalize(opts.pin);\n      }\n    },\n    write: {\n      writable: true,\n      value: function(pin, degrees) {\n        var state = priv.get(this);\n        state.expander.servoWrite(pin, degrees);\n      }\n    }\n  },\n  DEFAULT: {\n    initialize: {\n      value: function(opts) {\n\n        // When in debug mode, if pin is not a PWM pin, emit an error\n        if (opts.debug && !this.board.pins.isServo(this.pin)) {\n          Board.Pins.Error({\n            pin: this.pin,\n            type: \"PWM\",\n            via: \"Servo\",\n          });\n        }\n\n        this.io.servoConfig(this.pin, this.pwmRange[0], this.pwmRange[1]);\n      }\n    },\n    write: {\n      writable: true,\n      value: function(pin, degrees) {\n        this.io.servoWrite(pin, degrees);\n      }\n    }\n  }\n};\n\nvar Devices = {\n  FORWARD: {\n    deviceName: {\n      get: function() {\n        return \"FORWARD\";\n      }\n    },\n    dir: {\n      value: function(speed, dir) {\n        if (dir.name === \"forward\") {\n          return this.speed(speed);\n        }\n      }\n    }\n  },\n  FORWARD_REVERSE: {\n    deviceName: {\n      get: function() {\n        return \"FORWARD_REVERSE\";\n      }\n    },\n    dir: {\n      value: function(speed, dir) {\n        if (dir.name === \"forward\") {\n          return this.speed(Fn.fscale(speed, 0, 100, this.neutral, this.range[1]));\n        } else {\n          return this.speed(Fn.fscale(speed, 0, 100, this.neutral, this.range[0]));\n        }\n      }\n    }\n  },\n  FORWARD_BRAKE_REVERSE: {\n    deviceName: {\n      get: function() {\n        return \"FORWARD_BRAKE_REVERSE\";\n      }\n    },\n    dir: {\n      value: function(speed, dir) {\n\n        /*\n          As far as I can tell, this isn't possible.\n\n          To enable reverse, the brakes must first be applied,\n          but it's not nearly as simple as it sounds since there\n          appears to be a timing factor that differs across\n          speed controllers.\n         */\n\n        if (dir.name === \"forward\") {\n          this.speed(Fn.fscale(speed, 0, 100, this.neutral, this.range[1]));\n        } else {\n          this.speed(Fn.fscale(speed, 0, 100, this.neutral, this.range[0]));\n        }\n      }\n    }\n  }\n};\n\n/**\n * ESC\n * @constructor\n *\n * @param {Object} opts Options: pin, range\n * @param {Number} pin  Pin number\n */\n\nfunction ESC(opts) {\n  if (!(this instanceof ESC)) {\n    return new ESC(opts);\n  }\n\n  var controller = null;\n  var pinValue;\n  var device;\n  var state = {\n    // All speed history for this ESC\n    // history = [\n    //   {\n    //     timestamp: Date.now(),\n    //     speed: speed\n    //   }\n    // ];\n    history: [],\n    value: 0\n  };\n\n  Board.Component.call(\n    this, opts = Board.Options(opts)\n  );\n\n  priv.set(this, state);\n\n  this.startAt = typeof opts.startAt !== \"undefined\" ? opts.startAt : null;\n  this.neutral = opts.neutral;\n  this.range = opts.range || [0, 100];\n  this.pwmRange = opts.pwmRange || [544, 2400];\n  this.interval = null;\n\n  // StandardFirmata on Arduino allows controlling\n  // servos from analog pins.\n  // If we're currently operating with an Arduino\n  // and the user has provided an analog pin name\n  // (eg. \"A0\", \"A5\" etc.), parse out the numeric\n  // value and capture the fully qualified analog\n  // pin number.\n  if (typeof opts.controller === \"undefined\" && Pins.isFirmata(this)) {\n    if (typeof pinValue === \"string\" && pinValue[0] === \"A\") {\n      pinValue = this.io.analogPins[+pinValue.slice(1)];\n    }\n\n    pinValue = +pinValue;\n\n    // If the board's default pin normalization\n    // came up with something different, use the\n    // the local value.\n    if (!Number.isNaN(pinValue) && this.pin !== pinValue) {\n      this.pin = pinValue;\n    }\n  }\n\n  // Allow users to pass in custom device types\n  device = typeof opts.device === \"string\" ?\n    Devices[opts.device] : opts.device;\n\n  if (!device) {\n    device = Devices.FORWARD;\n  }\n\n  if (opts.controller && typeof opts.controller === \"string\") {\n    controller = Controllers[opts.controller.toUpperCase()];\n  } else {\n    controller = opts.controller;\n  }\n\n  if (!controller) {\n    controller = Controllers.DEFAULT;\n  }\n\n  Object.defineProperties(this, Object.assign({}, device, controller, {\n    value: {\n      get: function() {\n        return state.value;\n      }\n    },\n    history: {\n      get: function() {\n        return state.history.slice(-5);\n      }\n    },\n    last: {\n      get: function() {\n        return state.history[state.history.length - 1] || {\n          last: null\n        };\n      }\n    }\n  }));\n\n  this.initialize(opts);\n\n  if (this.deviceName !== \"FORWARD\") {\n    if (Number.isNaN(+this.neutral)) {\n      throw new Error(\"Directional speed controllers require a neutral point from 0-100 (number)\");\n    }\n\n    this.startAt = this.neutral;\n  }\n\n  // Match either null or undefined, but not 0\n  if (this.startAt !== null && this.startAt !== undefined) {\n    this.speed(this.startAt);\n  }\n}\n\nutil.inherits(ESC, Emitter);\n\n/**\n * speed\n *\n * Set the ESC's speed\n *\n * @param  {Float} speed 0...100 (full range)\n *\n * @return {ESC} instance\n */\n\nESC.prototype.speed = function(speed) {\n  var state = priv.get(this);\n  var history = state.history;\n  var noInterval = false;\n  var steps = 0;\n  var lspeed, hspeed;\n\n  speed = Fn.constrain(speed, this.range[0], this.range[1]);\n\n  if (this.interval) {\n    // Bail out if speed is the same as whatever was\n    // last _provided_\n    if (this.value === speed) {\n      return this;\n    } else {\n      clearInterval(this.interval);\n      this.interval = null;\n    }\n  }\n\n  state.value = speed;\n\n  // This is the very first speed command being received.\n  // Safe to assume that the ESC and Brushless motor are\n  // not yet moving.\n  if (history.length === 0) {\n    noInterval = true;\n  }\n\n  // Bail out if speed is the same as whatever was\n  // last _written_\n\n  if (this.last.speed === speed) {\n    return this;\n  }\n\n  lspeed = this.last.speed;\n  hspeed = speed;\n  steps = Math.ceil(Math.abs(lspeed - hspeed));\n\n  if (!steps || steps === 1) {\n    noInterval = true;\n  }\n\n  if (noInterval) {\n    this.write(this.pin, Fn.fscale(speed, 0, 100, 0, 180));\n\n    history.push({\n      timestamp: Date.now(),\n      speed: speed\n    });\n    return this;\n  }\n\n  var throttle = lspeed;\n\n  this.interval = setInterval(function() {\n\n    if (hspeed > throttle) {\n      throttle++;\n    } else {\n      throttle--;\n    }\n\n    this.write(this.pin, (throttle * 180 / 100));\n\n    history.push({\n      timestamp: Date.now(),\n      speed: throttle\n    });\n\n    if (steps) {\n      steps--;\n\n      if (!steps) {\n        clearInterval(this.interval);\n        this.interval = null;\n      }\n    }\n  }.bind(this), 1);\n\n  return this;\n};\n\n\n/**\n * brake Stop the ESC by hitting the brakes ;)\n * @return {Object} instance\n */\nESC.prototype.brake = function() {\n  var state = priv.get(this);\n  var speed = this.neutral || 0;\n\n  this.speed(speed);\n\n  state.history.push({\n    timestamp: Date.now(),\n    speed: speed\n  });\n\n  return this;\n};\n\n[\n  /**\n   * forward Set forward speed\n   * fwd Set forward speed\n   *\n   * @param  {Number} 0-100, 0 is stopped, 100 is fastest\n   * @return {Object} this\n   */\n  {\n    name: \"forward\",\n    abbr: \"fwd\",\n    value: 1\n  },\n  /**\n   * reverse Set revese speed\n   * rev Set revese speed\n   *\n   * @param  {Number} 0-100, 0 is stopped, 100 is fastest\n   * @return {Object} this\n   */\n  {\n    name: \"reverse\",\n    abbr: \"rev\",\n    value: 0\n  }\n].forEach(function(dir) {\n  var method = function(speed) {\n    this.dir(speed, dir);\n    return this;\n  };\n\n  ESC.prototype[dir.name] = ESC.prototype[dir.abbr] = method;\n});\n\n\n/**\n * stop Stop the ESC\n * @return {Object} instance\n */\nESC.prototype.stop = function() {\n  var state = priv.get(this);\n  var history = state.history;\n  var speed = this.type === \"bidirectional\" ? this.neutral : 0;\n\n  this.write(this.pin, Fn.fscale(speed, 0, 100, 0, 180));\n\n  history.push({\n    timestamp: Date.now(),\n    speed: speed\n  });\n\n  return this;\n};\n\n/**\n * ESC.Collection()\n * new ESC.Collection()\n *\n * Constructs an Array-like instance of all escs\n */\nfunction ESCs(numsOrObjects) {\n  if (!(this instanceof ESCs)) {\n    return new ESCs(numsOrObjects);\n  }\n\n  Object.defineProperty(this, \"type\", {\n    value: ESC\n  });\n\n  Collection.call(this, numsOrObjects);\n}\n\nutil.inherits(ESCs, Collection);\n\n/**\n *\n * ESCs, speed(0-100%)\n *\n * set all escs to the specified speed from 0-100%\n *\n * eg. array.min();\n\n * ESCs, min()\n *\n * set all escs to the minimum throttle\n *\n * eg. array.min();\n\n * ESCs, max()\n *\n * set all escs to the maximum throttle\n *\n * eg. array.max();\n\n * ESCs, stop()\n *\n * stop all escs\n *\n * eg. array.stop();\n */\n\nCollection.installMethodForwarding(\n  ESCs.prototype, ESC.prototype\n);\n\n\n// Assign ESCs Collection class as static \"method\" of ESC.\n// TODO: Eliminate .Array for 1.0.0\nESC.Array = ESCs;\nESC.Collection = ESCs;\n\n/* istanbul ignore else */\nif (!!process.env.IS_TEST_MODE) {\n  ESC.Controllers = Controllers;\n  ESC.purge = function() {\n    priv.clear();\n  };\n}\n\nmodule.exports = ESC;\n","/home/travis/build/npmtest/node-npmtest-johnny-five/node_modules/johnny-five/lib/gps.js":"var events = require(\"events\");\nvar util = require(\"util\");\n\nvar Board = require(\"./board\");\nvar Fn = require(\"./fn\");\nvar Pin = require(\"./pin\");\n\nvar toFixed = Fn.toFixed;\n\n\nvar priv = new Map();\n\nvar Breakouts = {\n\n  /*\n   * https://www.adafruit.com/products/746\n   */\n  ADAFRUIT_ULTIMATE_GPS: {\n    receiver: {\n      value: \"FGPMMOPA6H\"\n    }\n  }\n\n};\n\n// GPS Antenna Modules\nvar Receivers = {\n\n  /*\n   * http://www.gtop-tech.com/en/product/LadyBird-1-PA6H/MT3339_GPS_Module_04.html\n   */\n  FGPMMOPA6H: {\n    // Later, when we add logging that code will go here\n    chip: {\n      value: \"MT3339\"\n    }\n  }\n\n};\n\n// GPS chips\nvar Chips = {\n\n  DEFAULT: {\n    baud: {\n      value: 9600,\n      writable: true\n    },\n    configure: {\n      value: function(callback) {\n        process.nextTick(callback);\n      }\n    }\n  },\n\n  /*\n   * http://www.mediatek.com/en/products/connectivity/gps/mt3339/\n   */\n  MT3339: {\n    baud: {\n      value: 9600,\n      writable: true\n    },\n    configure: {\n      value: function(callback) {\n        process.nextTick(callback);\n      }\n    },\n    frequency: {\n      get: function() {\n        var state = priv.get(this);\n        return state.frequency;\n      },\n      set: function(frequency) {\n        var state = priv.get(this);\n\n        // Enforce maximum frequency of 10hz\n        if (frequency < 10) {\n          frequency = 10;\n        }\n\n        state.frequency = frequency;\n        this.sendCommand(\"$PMTK220,\" + String(1000 / state.frequency));\n      }\n    },\n    restart: {\n      // Reboot the receiver\n      value: function(coldRestart) {\n\n        if (coldRestart === true) {\n          this.sendCommand(\"$PMTK103\");\n        } else {\n          this.sendCommand(\"$PMTK101\");\n          setTimeout(function() {\n            this.sendCommand(\"\");\n          }.bind(this), 1000);\n        }\n\n      }\n    }\n  }\n\n};\n\n\n/**\n *\n * @constructor\n *\n * @param {Object} opts Options: pin(s), chip, receiver, breakout, fixed, serialport, frequency\n *\n * Sample initialization\n *\n *    new five.GPS({ pins: {rx: 10, tx: 11});\n *\n */\n\nfunction GPS(opts) {\n\n  var breakout, receiver, chip, state;\n\n  if (!(this instanceof GPS)) {\n    return new GPS(opts);\n  }\n\n  // Allow users to pass in a 2 element array for rx and tx pins\n  if (Array.isArray(opts)) {\n    opts = {\n      pins: {\n        rx: opts[0],\n        tx: opts[1],\n        onOff: opts[2]\n      }\n    };\n  }\n\n  if (typeof opts.pins === \"undefined\") {\n    opts.pins = {};\n  }\n\n  Board.Component.call(\n    this, opts = Board.Options(opts)\n  );\n\n\n\n  // Get user values for breakout, receiver and chip\n  breakout = opts.breakout || {};\n  receiver = opts.receiver;\n  chip = opts.chip;\n\n  // If a breakout is defined check for receiver and chip\n  if (Breakouts[breakout]) {\n    if (!receiver && Breakouts[breakout].receiver) {\n      receiver = Breakouts[breakout].receiver.value;\n    }\n\n    if (!chip && Breakouts[breakout].chip) {\n      chip = Breakouts[breakout].chip.value;\n    }\n  }\n\n  // If a receiver was defined or derived but chip was not\n  if (!chip) {\n    if (receiver && Receivers[receiver].chip) {\n      chip = Receivers[receiver].chip.value;\n    } else {\n      chip = \"DEFAULT\";\n    }\n  }\n\n  // Allow users to pass in custom chip types\n  chip = typeof chip === \"string\" ?\n    Chips[chip] : opts.chip;\n\n  // Allow users to pass in custom receiver types\n  receiver = typeof receiver === \"string\" ?\n    Receivers[receiver] : opts.receiver;\n\n  // Chip decorates the instance\n  Object.defineProperties(this, chip);\n\n  // Receiver decorates this instance\n  if (receiver) {\n    Object.defineProperties(this, receiver);\n  }\n\n  // breakout decorates the instance\n  if (opts.breakout) {\n    breakout = typeof opts.breakout === \"string\" ?\n      Breakouts[opts.breakout] : opts.breakout;\n\n    Board.Controller.call(this, breakout, opts);\n  }\n\n  // If necessary set default property values\n  this.fixed = opts.fixed || 6;\n  this.baud = opts.baud || this.baud;\n\n  // Create a \"state\" entry for privately\n  // storing the state of the instance\n  state = {\n    sat: {},\n    latitude: 0.0,\n    longitude: 0.0,\n    altitude: 0.0,\n    speed: 0.0,\n    course: 0.0,\n    frequency: 1,\n    lowPowerMode: false\n  };\n\n  priv.set(this, state);\n\n  // Getters for private state values\n  Object.defineProperties(this, {\n    latitude: {\n      get: function() {\n        return state.latitude;\n      }\n    },\n    longitude: {\n      get: function() {\n        return state.longitude;\n      }\n    },\n    altitude: {\n      get: function() {\n        return state.altitude;\n      }\n    },\n    sat: {\n      get: function() {\n        return state.sat;\n      }\n    },\n    speed: {\n      get: function() {\n        return state.speed;\n      }\n    },\n    course: {\n      get: function() {\n        return state.course;\n      }\n    },\n    time: {\n      get: function() {\n        return state.time;\n      }\n    }\n  });\n\n  if (this.initialize) {\n    this.initialize(opts);\n  }\n\n}\n\nutil.inherits(GPS, events.EventEmitter);\n\n/*\n * Default intialization for serial GPS\n */\nGPS.prototype.initialize = function(opts) {\n\n  var state = priv.get(this);\n  state.portId = opts.serialPort || opts.portId || opts.port || opts.bus || this.io.SERIAL_PORT_IDs.DEFAULT;\n\n  // Set the pin modes\n  [\"tx\", \"rx\"].forEach(function(pin) {\n    if (this.pins[pin]) {\n      this.io.pinMode(this.pins[pin], this.io.MODES.SERIAL);\n    }\n  }, this);\n\n  if (this.pins.onOff) {\n    this.io.pinMode(this.pins.onOff, this.io.MODES.OUTPUT);\n    this.onOff = new Pin(this.pins.onOff);\n  }\n\n  this.io.serialConfig({\n    portId: state.portId,\n    baud: this.baud,\n    rxPin: this.pins.rx,\n    txPin: this.pins.tx\n  });\n\n  if (this.configure) {\n    this.configure(function() {\n      this.listen();\n      if (opts.frequency) {\n        this.frequency = opts.frequency;\n      }\n    }.bind(this));\n  }\n\n};\n\nGPS.prototype.sendCommand = function(string) {\n\n  var state = priv.get(this);\n  var cc = [];\n\n  // Convert the string to a charCode array\n  for (var i = 0; i < string.length; ++i) {\n    cc[i] = string.charCodeAt(i);\n  }\n\n  // Append *, checksum and cr/lf\n  var hexsum = getNmeaChecksum(string.substring(1));\n  cc.push(42, hexsum.charCodeAt(0), hexsum.charCodeAt(1), 13, 10);\n\n  this.io.serialWrite(state.portId, cc);\n};\n\nGPS.prototype.listen = function() {\n\n  var state = priv.get(this);\n  var input = \"\";\n\n  // Start the read loop\n  this.io.serialRead(state.portId, function(data) {\n\n    input += new Buffer(data).toString(\"ascii\");\n    var sentences = input.split(\"\\r\\n\");\n\n    if (sentences.length > 1) {\n      for (var i = 0; i < sentences.length - 1; i++) {\n        this.parseNmeaSentence(sentences[i]);\n      }\n      input = sentences[sentences.length - 1];\n    }\n  }.bind(this));\n};\n\n/*\n * NMEA Sentence Information\n * http://aprs.gids.nl/nmea\n */\nGPS.prototype.parseNmeaSentence = function(sentence) {\n\n  var state = priv.get(this);\n  var cksum = sentence.split(\"*\");\n\n  // Check for valid sentence\n  if (cksum[1] !== getNmeaChecksum(cksum[0].substring(1))) {\n    return;\n  }\n\n  this.emit(\"sentence\", sentence);\n\n  var segments = cksum[0].split(\",\");\n  var last = {\n    latitude: state.latitude,\n    longitude: state.longitude,\n    altitude: state.altitude,\n    speed: state.speed,\n    course: state.course\n  };\n\n  switch (segments[0]) {\n    case \"$GPGGA\":\n      // Time, position and fix related data\n      state.time = segments[1];\n      state.latitude = degToDec(segments[2], 2, segments[3], this.fixed);\n      state.longitude = degToDec(segments[4], 3, segments[5], this.fixed);\n      state.altitude = Number(segments[9]);\n      break;\n\n    case \"$GPGSA\":\n      // Operating details\n      state.sat.satellites = segments.slice(3, 15);\n      state.sat.pdop = Number(segments[15]);\n      state.sat.hdop = Number(segments[16]);\n      state.sat.vdop = Number(segments[17]);\n      this.emit(\"operations\", sentence);\n      break;\n\n    case \"$GPRMC\":\n      // GPS & Transit data\n      state.time = segments[1];\n      state.latitude = degToDec(segments[3], 2, segments[4], this.fixed);\n      state.longitude = degToDec(segments[5], 3, segments[6], this.fixed);\n      state.course = Number(segments[8]);\n      state.speed = toFixed(segments[7] * 0.514444, this.fixed);\n      break;\n\n    case \"$GPVTG\":\n      // Track Made Good and Ground Speed\n      state.course = Number(segments[1]);\n      state.speed = toFixed(segments[5] * 0.514444, this.fixed);\n      break;\n\n    case \"$GPGSV\":\n      // Satellites in view\n      break;\n\n    case \"$PGACK\":\n      // Acknowledge command\n      this.emit(\"acknowledge\", sentence);\n      break;\n\n    default:\n      this.emit(\"unknown\", sentence);\n      break;\n  }\n\n  this.emit(\"data\", {\n    latitude: state.latitude,\n    longitude: state.longitude,\n    altitude: state.altitude,\n    speed: state.speed,\n    course: state.course,\n    sat: state.sat,\n    time: state.time\n  });\n\n  if (last.latitude !== state.latitude ||\n    last.longitude !== state.longitude ||\n    last.altitude !== state.altitude) {\n\n    this.emit(\"change\", {\n      latitude: state.latitude,\n      longitude: state.longitude,\n      altitude: state.altitude\n    });\n  }\n\n  if (last.speed !== state.speed ||\n    last.course !== state.course) {\n\n    this.emit(\"navigation\", {\n      speed: state.speed,\n      course: state.course\n    });\n  }\n\n};\n\n// Convert Lat or Lng to decimal degrees\nfunction degToDec(degrees, intDigitsLength, cardinal, fixed) {\n  if (degrees) {\n    var decimal = Number(degrees.substring(0, intDigitsLength)) + Number(degrees.substring(intDigitsLength)) / 60;\n\n    if (cardinal === \"S\" || cardinal === \"W\") {\n      decimal *= -1;\n    }\n    return Number(decimal.toFixed(fixed));\n  } else {\n    return 0;\n  }\n}\n\nfunction getNmeaChecksum(string) {\n  var cksum = 0x00;\n  for (var i = 0; i < string.length; ++i) {\n    cksum ^= string.charCodeAt(i);\n  }\n  cksum = cksum.toString(16).toUpperCase();\n\n  if (cksum.length < 2) {\n    cksum = (\"00\" + cksum).slice(-2);\n  }\n\n  return cksum;\n}\n\n/* istanbul ignore else */\nif (!!process.env.IS_TEST_MODE) {\n  GPS.Breakouts = Breakouts;\n  GPS.Chips = Chips;\n  GPS.Receivers = Receivers;\n  GPS.purge = function() {\n    priv.clear();\n  };\n}\nmodule.exports = GPS;\n","/home/travis/build/npmtest/node-npmtest-johnny-five/node_modules/johnny-five/lib/pin.js":"var Board = require(\"./board\");\nvar Emitter = require(\"events\").EventEmitter;\nvar util = require(\"util\");\nvar Collection = require(\"./mixins/collection\");\n\nvar priv = new Map();\nvar modes = {\n  INPUT: 0x00,\n  OUTPUT: 0x01,\n  ANALOG: 0x02,\n  PWM: 0x03,\n  SERVO: 0x04\n};\n\n/**\n * Pin\n * @constructor\n *\n * @description Direct Pin access objects\n *\n * @param {Object} opts Options: pin, freq, range\n */\n\nfunction Pin(opts) {\n  if (!(this instanceof Pin)) {\n    return new Pin(opts);\n  }\n  if (opts === undefined || (typeof opts === \"object\" &&\n      opts.addr === undefined && opts.pin === undefined)) {\n    throw new Error(\"Pins must have a pin number\");\n  }\n\n  var pinValue = typeof opts === \"object\" ? (opts.addr || opts.pin || 0) : opts;\n  var isAnalogInput = Pin.isAnalog(opts);\n  var isDTOA = false;\n\n  Board.Component.call(\n    this, opts = Board.Options(opts)\n  );\n\n  opts.addr = opts.addr || opts.pin;\n\n  if (this.io.analogPins.includes(pinValue)) {\n    isAnalogInput = false;\n    isDTOA = true;\n  }\n\n  var isPin = typeof opts !== \"object\";\n  var addr = isDTOA ? pinValue : (isPin ? opts : opts.addr);\n  var type = opts.type || (isAnalogInput ? \"analog\" : \"digital\");\n\n  // Create a private side table\n  var state = {\n    mode: null,\n    last: null,\n    value: 0\n  };\n\n  priv.set(this, state);\n\n  // Create read-only \"addr(address)\" property\n  Object.defineProperties(this, {\n    type: {\n      get: function() {\n        return type;\n      }\n    },\n    addr: {\n      get: function() {\n        return addr;\n      }\n    },\n    value: {\n      get: function() {\n        return state.value;\n      }\n    },\n    mode: {\n      set: function(mode) {\n        var state = priv.get(this);\n        state.mode = mode;\n        this.io.pinMode(this.addr, mode);\n      },\n      get: function() {\n        return priv.get(this).mode;\n      }\n    }\n  });\n\n  this.mode = typeof opts.as !== \"undefined\" ? opts.as :\n    (typeof opts.mode !== \"undefined\" ? opts.mode : (isAnalogInput ? 0x02 : 0x01));\n\n  this.freq = typeof opts.freq !== \"undefined\" ? opts.freq : 20;\n\n  if (this.mode === 0 || this.mode === 2) {\n    read(this);\n  }\n\n  if (type === \"digital\") {\n    Object.defineProperties(this, {\n      isHigh: {\n        get: function() {\n          return !!state.value;\n        }\n      },\n      isLow: {\n        get: function() {\n          return !state.value;\n        }\n      },\n    });\n  }\n}\n\n\nfunction read(pin) {\n  var state = priv.get(pin);\n\n  pin.io[pin.type + \"Read\"](pin.addr, function(data) {\n    state.value = data;\n  });\n\n  setInterval(function() {\n    var isNot, emit;\n\n    isNot = state.value ? \"low\" : \"high\";\n    emit = state.value ? \"high\" : \"low\";\n\n    if (state.mode === modes.INPUT) {\n      if (state.last === null) {\n        state.last = isNot;\n      }\n      if (state.last === isNot) {\n        state.last = emit;\n        pin.emit(emit, state.value);\n        pin.emit(\"change\", state.value);\n      }\n    }\n    pin.emit(\"data\", state.value);\n  }, pin.freq);\n}\n\nutil.inherits(Pin, Emitter);\n\n/**\n * Pin.@@MODE\n *\n * Read-only constants\n * Pin.INPUT   = 0x00\n * Pin.OUTPUT  = 0x01\n * Pin.ANALOG  = 0x02\n * Pin.PWM     = 0x03\n * Pin.SERVO   = 0x04\n *\n */\nObject.keys(modes).forEach(function(mode) {\n  Object.defineProperty(Pin, mode, {\n    value: modes[mode]\n  });\n});\n\n\nPin.isAnalog = function(opts) {\n  if (typeof opts === \"string\" && Pin.isPrefixed(opts, [\"I\", \"A\"])) {\n    return true;\n  }\n\n  if (typeof opts === \"object\") {\n    return Pin.isAnalog(\n      typeof opts.addr !== \"undefined\" ? opts.addr : opts.pin\n    );\n  }\n};\n\nPin.isPrefixed = function(value, prefixes) {\n  value = value[0];\n\n  return prefixes.reduce(function(resolution, prefix) {\n    if (!resolution) {\n      return prefix === value;\n    }\n    return resolution;\n  }, false);\n};\n\nPin.write = function(pin, val) {\n  var state = priv.get(pin);\n\n  state.value = val;\n\n  // Set the correct mode (OUTPUT)\n  // This will only set if it needs to be set, otherwise a no-op\n  pin.mode = modes.OUTPUT;\n\n  // Create the correct type of write command\n  pin.io[pin.type + \"Write\"](pin.addr, val);\n\n  pin.emit(\"write\", null, val);\n};\n\nPin.read = function(pin, callback) {\n  // Set the correct mode (INPUT)\n  // This will only set if it needs to be set, otherwise a no-op\n\n  var isChanging = false;\n\n  if (pin.type === \"digital\" && pin.mode !== 0) {\n    isChanging = true;\n    pin.mode = modes.INPUT;\n  }\n\n  if (pin.type === \"analog\" && pin.mode !== 2) {\n    isChanging = true;\n    pin.mode = modes.ANALOG;\n  }\n\n  if (isChanging) {\n    read(pin);\n  }\n\n  pin.on(\"data\", function() {\n    callback.call(pin, null, pin.value);\n  });\n};\n\n\n// Pin.prototype.isDigital = function() {\n//   return this.addr > 1;\n// };\n\n// Pin.prototype.isAnalog = function() {\n//   return this.board > 1;\n// };\n\n// Pin.prototype.isPWM = function() {\n// };\n\n// Pin.prototype.isServo = function() {\n// };\n\n// Pin.prototype.isI2C = function() {\n// };\n\n// Pin.prototype.isSerial = function() {\n// };\n\n// Pin.prototype.isInterrupt = function() {\n// };\n\n// Pin.prototype.isVersion = function() {\n// };\n\n\nPin.prototype.query = function(callback) {\n  var index = this.addr;\n\n  if (this.type === \"analog\") {\n    index = this.io.analogPins[this.addr];\n  }\n\n  function handler() {\n    callback(this.io.pins[index]);\n  }\n\n  this.io.queryPinState(index, handler.bind(this));\n\n  return this;\n};\n\n/**\n * high  Write high/1 to the pin\n * @return {Pin}\n */\n\nPin.prototype.high = function() {\n  var value = this.type === \"analog\" ? 255 : 1;\n  Pin.write(this, value);\n  this.emit(\"high\");\n  return this;\n};\n\n/**\n * low  Write low/0 to the pin\n * @return {Pin}\n */\n\nPin.prototype.low = function() {\n  Pin.write(this, 0);\n  this.emit(\"low\");\n  return this;\n};\n\n/**\n * read  Read from the pin, value is passed to callback continuation\n * @return {Pin}\n */\n\n/**\n * write  Write to a pin\n * @return {Pin}\n */\n[\"read\", \"write\"].forEach(function(operation) {\n  Pin.prototype[operation] = function(valOrCallback) {\n    Pin[operation](this, valOrCallback);\n    return this;\n  };\n});\n\n\n/**\n * Pins()\n * new Pins()\n *\n * Constructs an Array-like instance of all servos\n */\nfunction Pins(numsOrObjects) {\n  if (!(this instanceof Pins)) {\n    return new Pins(numsOrObjects);\n  }\n\n  Object.defineProperty(this, \"type\", {\n    value: Pin\n  });\n\n  Collection.call(this, numsOrObjects);\n}\n\nutil.inherits(Pins, Collection);\n\n[\n  \"high\", \"low\", \"write\"\n].forEach(function(method) {\n  Pins.prototype[method] = function() {\n    var length = this.length;\n\n    for (var i = 0; i < length; i++) {\n      this[i][method].apply(this[i], arguments);\n    }\n    return this;\n  };\n});\n\n\n// Assign Pins Collection class as static \"method\" of Pin.\n// TODO: Eliminate .Array for 1.0.0\nPin.Array = Pins;\nPin.Collection = Pins;\n\n/* istanbul ignore else */\nif (!!process.env.IS_TEST_MODE) {\n  Pin.purge = function() {\n    priv.clear();\n  };\n}\n\nmodule.exports = Pin;\n","/home/travis/build/npmtest/node-npmtest-johnny-five/node_modules/johnny-five/lib/gripper.js":"var Servo = require(\"./servo\"),\n  __ = require(\"./fn\");\n\n/**\n * Gripper\n *\n * Supports:\n *   [Parallax Boe-Bot gripper](http://www.parallax.com/Portals/0/Downloads/docs/prod/acc/GripperManual-v3.0.pdf)\n *\n *   [DFRobot LG-NS](http://www.dfrobot.com/index.php?route=product/product&filter_name=gripper&product_id=628#.UCvGymNST_k)\n *\n *\n * @param {[type]} servo [description]\n */\n\nfunction Gripper(opts) {\n\n  if (!(this instanceof Gripper)) {\n    return new Gripper(opts);\n  }\n\n  // Default options mode, assume only when opts is a pin number\n  if (typeof opts === \"number\") {\n    opts = {\n      servo: {\n        pin: opts,\n        range: [0, 180]\n      },\n      scale: [0, 10]\n    };\n  }\n\n  // Default set() args to 0-10\n  this.scale = opts.scale || [0, 10];\n\n  // Setup servo\n  // Allows pre-constructed servo or creating new servo.\n  // Defaults for new Servo creation fall back to Servo defaults\n  this.servo = opts.servo instanceof Servo ?\n    opts.servo : new Servo(opts.servo);\n}\n\n[\n  /**\n   * open Open the gripper\n   *\n   * @return {Object} this\n   */\n  {\n    name: \"open\",\n    args: function() {\n      return this.servo.range[0];\n    }\n  },\n  /**\n   * close Close the gripper\n   *\n   * @return {Object} this\n   */\n  {\n    name: \"close\",\n    args: function() {\n      return this.servo.range[1];\n    }\n  },\n  /**\n   * set Set the gripper's open width\n   *\n   * @param  {Number} 0-10, 0 is closed, 10 is open\n   *\n   * @return {Object} this\n   */\n  {\n    name: \"set\",\n    args: function(position) {\n      // Map/Scale position value to a value within\n      // the servo's lo/hi range\n      return Math.floor(\n        __.map(\n          position,\n          this.scale[0], this.scale[1],\n          this.servo.range[1], this.servo.range[0]\n        )\n      );\n    }\n  }\n].forEach(function(api) {\n  Gripper.prototype[api.name] = function() {\n    return this.servo.to(\n      api.args.apply(this, [].slice.call(arguments))\n    );\n  };\n});\n\nmodule.exports = Gripper;\n","/home/travis/build/npmtest/node-npmtest-johnny-five/node_modules/johnny-five/lib/servo.js":"var Board = require(\"./board\");\nvar Pins = Board.Pins;\nvar Expander = require(\"./expander\");\nvar Emitter = require(\"events\").EventEmitter;\nvar util = require(\"util\");\nvar Collection = require(\"./mixins/collection\");\nvar Fn = require(\"./fn\");\nvar Animation = require(\"./animation\");\n\n// Servo instance private data\nvar priv = new Map();\n\nvar Controllers = {\n  PCA9685: {\n    initialize: {\n      value: function(opts) {\n        var state = priv.get(this);\n\n        this.address = opts.address || 0x40;\n        this.pwmRange = opts.pwmRange || [450, 1850];\n        this.frequency = opts.frequency || 50;\n\n        state.expander = Expander.get({\n          address: this.address,\n          controller: this.controller,\n          bus: this.bus,\n          pwmRange: this.pwmRange,\n          frequency: this.frequency,\n        });\n\n        this.pin = state.expander.normalize(opts.pin);\n      }\n    },\n    update: {\n      writable: true,\n      value: function(degrees) {\n        var state = priv.get(this);\n        state.expander.servoWrite(this.pin, degrees);\n      }\n    }\n  },\n  Standard: {\n    initialize: {\n      value: function(opts) {\n\n        // When in debug mode, if pin is not a PWM pin, emit an error\n        if (opts.debug && !this.board.pins.isServo(this.pin)) {\n          Board.Pins.Error({\n            pin: this.pin,\n            type: \"PWM\",\n            via: \"Servo\",\n          });\n        }\n\n        if (Array.isArray(opts.pwmRange)) {\n          this.io.servoConfig(this.pin, opts.pwmRange[0], opts.pwmRange[1]);\n        } else {\n          this.io.pinMode(this.pin, this.mode);\n        }\n      }\n    },\n    update: {\n      writable: true,\n      value: function(degrees) {\n        // Servo is restricted to integers\n        degrees |= 0;\n\n        // If same degrees return immediately.\n        if (this.last && this.last.degrees === degrees) {\n          return this;\n        }\n\n        this.io.servoWrite(this.pin, degrees);\n      }\n    }\n  }\n};\n\n/**\n * Servo\n * @constructor\n *\n * @param {Object} opts Options: pin, type, id, range\n */\n\nfunction Servo(opts) {\n\n  if (!(this instanceof Servo)) {\n    return new Servo(opts);\n  }\n\n  var history = [];\n  var pinValue = typeof opts === \"object\" ? opts.pin : opts;\n  var controller = null;\n\n  Board.Component.call(\n    this, opts = Board.Options(opts)\n  );\n\n  this.range = opts.range || [0, 180];\n  this.deadband = opts.deadband || [90, 90];\n  this.fps = opts.fps || 100;\n  this.offset = opts.offset || 0;\n  this.mode = this.io.MODES.SERVO;\n  this.interval = null;\n  this.value = null;\n\n  // StandardFirmata on Arduino allows controlling\n  // servos from analog pins.\n  // If we're currently operating with an Arduino\n  // and the user has provided an analog pin name\n  // (eg. \"A0\", \"A5\" etc.), parse out the numeric\n  // value and capture the fully qualified analog\n  // pin number.\n  if (typeof opts.controller === \"undefined\" && Pins.isFirmata(this)) {\n    if (typeof pinValue === \"string\" && pinValue[0] === \"A\") {\n      pinValue = this.io.analogPins[+pinValue.slice(1)];\n    }\n\n    pinValue = +pinValue;\n\n    // If the board's default pin normalization\n    // came up with something different, use the\n    // the local value.\n    if (!Number.isNaN(pinValue) && this.pin !== pinValue) {\n      this.pin = pinValue;\n    }\n  }\n\n\n  // The type of servo determines certain alternate\n  // behaviours in the API\n  this.type = opts.type || \"standard\";\n\n  // Invert the value of all servoWrite operations\n  // eg. 80 => 100, 90 => 90, 0 => 180\n  if (opts.isInverted) {\n    console.warn(\"The 'isInverted' property has been renamed 'invert'\");\n  }\n  this.invert = opts.isInverted || opts.invert || false;\n\n  // Allow \"setup\"instructions to come from\n  // constructor options properties\n  this.startAt = 90;\n\n  // Collect all movement history for this servo\n  // history = [\n  //   {\n  //     timestamp: Date.now(),\n  //     degrees: degrees\n  //   }\n  // ];\n\n  if (opts.controller && typeof opts.controller === \"string\") {\n    controller = Controllers[opts.controller.toUpperCase()];\n  } else {\n    controller = opts.controller;\n  }\n\n  if (controller == null) {\n    controller = Controllers.Standard;\n  }\n\n  priv.set(this, {\n    history: history\n  });\n\n  Board.Controller.call(this, controller, opts);\n\n  Object.defineProperties(this, {\n    history: {\n      get: function() {\n        return history.slice(-5);\n      }\n    },\n    last: {\n      get: function() {\n        return history[history.length - 1];\n      }\n    },\n    position: {\n      get: function() {\n        return history.length ? history[history.length - 1].degrees : -1;\n      }\n    }\n  });\n\n  this.initialize(opts);\n\n  // If \"startAt\" is defined and center is falsy\n  // set servo to min or max degrees\n  if (opts.startAt !== undefined) {\n    this.startAt = opts.startAt;\n    this.to(opts.startAt);\n  }\n\n  // If \"center\" true set servo to 90deg\n  if (opts.center) {\n    this.center();\n  }\n\n  if (opts.type === \"continuous\") {\n    this.stop();\n  }\n}\n\nutil.inherits(Servo, Emitter);\n\n\n/**\n * to\n *\n * Set the servo horn's position to given degree over time.\n *\n * @param  {Number} degrees   Degrees to turn servo to.\n * @param  {Number} time      Time to spend in motion.\n * @param  {Number} rate      The rate of the motion transiton\n *\n * - or -\n *\n * @param {Object} an Animation() segment config object\n *\n * @return {Servo} instance\n */\n\nServo.prototype.to = function(degrees, time, rate) {\n\n  var state = priv.get(this);\n  var options = {};\n\n  if (typeof degrees === \"object\") {\n\n    Object.assign(options, degrees);\n\n    options.duration = degrees.duration || degrees.interval || 1000;\n    options.cuePoints = degrees.cuePoints || [0, 1.0];\n    options.keyFrames = degrees.keyFrames || [\n      null,\n      {\n        value: typeof degrees.degrees === \"number\" ? degrees.degrees : this.startAt\n      }\n    ];\n\n    options.oncomplete = function() {\n      // Enforce async execution for user \"oncomplete\"\n      process.nextTick(function() {\n        if (typeof degrees.oncomplete === \"function\") {\n          degrees.oncomplete();\n        }\n        this.emit(\"move:complete\");\n      }.bind(this));\n    }.bind(this);\n\n\n    state.isRunning = true;\n    state.animation = state.animation || new Animation(this);\n    state.animation.enqueue(options);\n\n  } else {\n\n    var target = degrees;\n\n    // Enforce limited range of motion\n    degrees = Fn.constrain(degrees, this.range[0], this.range[1]);\n    degrees += this.offset;\n\n    this.value = degrees;\n\n    if (this.invert) {\n      degrees = Fn.map(\n        degrees,\n        0, 180,\n        180, 0\n      );\n    }\n\n    if (typeof time !== \"undefined\") {\n\n      options.duration = time;\n      options.keyFrames = [null, {\n        degrees: degrees\n      }];\n      options.fps = rate || this.fps;\n\n      this.to(options);\n\n    } else {\n      this.update(degrees);\n\n      if (state.history.length > 5) {\n        state.history.shift();\n      }\n\n      state.history.push({\n        timestamp: Date.now(),\n        degrees: degrees,\n        target: target\n      });\n    }\n  }\n\n  // return this instance\n  return this;\n};\n\n\n/**\n * Animation.normalize\n *\n * @param [number || object] keyFrames An array of step values or a keyFrame objects\n */\n\nServo.prototype[Animation.normalize] = function(keyFrames) {\n\n  var last = this.last ? this.last.target : this.startAt;\n\n  // If user passes null as the first element in keyFrames use current position\n  if (keyFrames[0] === null) {\n    keyFrames[0] = {\n      value: last\n    };\n  }\n  return keyFrames.map(function(frame) {\n    var value = frame;\n\n    /* istanbul ignore else */\n    if (frame !== null) {\n      // frames that are just numbers represent _step_\n      if (typeof frame === \"number\") {\n        frame = {\n          step: value,\n        };\n      } else {\n        if (typeof frame.degrees === \"number\") {\n          frame.value = frame.degrees;\n          delete frame.degrees;\n        }\n        if (typeof frame.copyDegrees === \"number\") {\n          frame.copyValue = frame.copyDegrees;\n          delete frame.copyDegrees;\n        }\n      }\n\n      /* istanbul ignore else */\n      if (!frame.easing) {\n        frame.easing = \"linear\";\n      }\n    }\n    return frame;\n  });\n};\n\n/**\n * Animation.render\n *\n * @position [number] value to set the servo to\n */\nServo.prototype[Animation.render] = function(position) {\n  return this.to(position[0]);\n};\n\n/**\n * step\n *\n * Update the servo horn's position by specified degrees (over time)\n *\n * @param  {Number} degrees   Degrees to turn servo to.\n * @param  {Number} time      Time to spend in motion.\n *\n * @return {Servo} instance\n */\n\nServo.prototype.step = function(degrees, time) {\n  return this.to(this.last.target + degrees, time);\n};\n\n/**\n * move Alias for Servo.prototype.to\n */\nServo.prototype.move = function(degrees, time) {\n  console.warn(\"Servo.prototype.move has been renamed to Servo.prototype.to\");\n\n  return this.to(degrees, time);\n};\n\n/**\n * min Set Servo to minimum degrees, defaults to 0deg\n * @param  {Number} time      Time to spend in motion.\n * @param  {Number} rate      The rate of the motion transiton\n * @return {Object} instance\n */\n\nServo.prototype.min = function(time, rate) {\n  return this.to(this.range[0], time, rate);\n};\n\n/**\n * max Set Servo to maximum degrees, defaults to 180deg\n * @param  {Number} time      Time to spend in motion.\n * @param  {Number} rate      The rate of the motion transiton\n * @return {[type]} [description]\n */\nServo.prototype.max = function(time, rate) {\n  return this.to(this.range[1], time, rate);\n};\n\n/**\n * center Set Servo to centerpoint, defaults to 90deg\n * @param  {Number} time      Time to spend in motion.\n * @param  {Number} rate      The rate of the motion transiton\n * @return {[type]} [description]\n */\nServo.prototype.center = function(time, rate) {\n  return this.to(Math.abs((this.range[0] + this.range[1]) / 2), time, rate);\n};\n\n/**\n * home Return Servo to startAt position\n */\nServo.prototype.home = function() {\n  return this.to(this.startAt);\n};\n\n/**\n * sweep Sweep the servo between min and max or provided range\n * @param  {Array} range constrain sweep to range\n *\n * @param {Object} options Set range or interval.\n *\n * @return {[type]} [description]\n */\nServo.prototype.sweep = function(opts) {\n\n  var options = {\n    keyFrames: [{\n      value: this.range[0]\n    }, {\n      value: this.range[1]\n    }],\n    metronomic: true,\n    loop: true,\n    easing: \"inOutSine\"\n  };\n\n  // If opts is an array, then assume a range was passed\n  if (Array.isArray(opts)) {\n    options.keyFrames = rangeToKeyFrames(opts);\n  } else {\n    if (typeof opts === \"object\" && opts !== null) {\n      Object.assign(options, opts);\n      /* istanbul ignore else */\n      if (Array.isArray(options.range)) {\n        options.keyFrames = rangeToKeyFrames(options.range);\n      }\n    }\n  }\n\n  return this.to(options);\n};\n\nfunction rangeToKeyFrames(range) {\n  return range.map(function(value) {\n    return { value: value };\n  });\n}\n\n/**\n * stop Stop a moving servo\n * @return {[type]} [description]\n */\nServo.prototype.stop = function() {\n  var state = priv.get(this);\n\n  if (state.animation) {\n    state.animation.stop();\n  }\n\n  if (this.type === \"continuous\") {\n    this.to(\n      this.deadband.reduce(function(a, b) {\n        return Math.round((a + b) / 2);\n      })\n    );\n  } else {\n    clearInterval(this.interval);\n  }\n\n  return this;\n};\n\n//\n[\"clockWise\", \"cw\", \"counterClockwise\", \"ccw\"].forEach(function(api) {\n  Servo.prototype[api] = function(rate) {\n    var range;\n    rate = rate === undefined ? 1 : rate;\n    /* istanbul ignore if */\n    if (this.type !== \"continuous\") {\n      this.board.error(\n        \"Servo\",\n        \"Servo.prototype.\" + api + \" is only available for continuous servos\"\n      );\n    }\n    if (api === \"cw\" || api === \"clockWise\") {\n      range = [rate, 0, 1, this.deadband[1] + 1, this.range[1]];\n    } else {\n      range = [rate, 0, 1, this.deadband[0] - 1, this.range[0]];\n    }\n    return this.to(Fn.scale.apply(null, range) | 0);\n  };\n});\n\n\n/**\n *\n * Static API\n *\n *\n */\n\nServo.Continuous = function(pinOrOpts) {\n  var opts = {};\n\n  if (typeof pinOrOpts === \"object\") {\n    Object.assign(opts, pinOrOpts);\n  } else {\n    opts.pin = pinOrOpts;\n  }\n\n  opts.type = \"continuous\";\n  return new Servo(opts);\n};\n\nServo.Continuous.speeds = {\n  // seconds to travel 60 degrees\n  \"@4.8V\": 0.23,\n  \"@5.0V\": 0.17,\n  \"@6.0V\": 0.18\n};\n\n/**\n * Servos()\n * new Servos()\n */\nfunction Servos(numsOrObjects) {\n  if (!(this instanceof Servos)) {\n    return new Servos(numsOrObjects);\n  }\n\n  Object.defineProperty(this, \"type\", {\n    value: Servo\n  });\n\n  Collection.call(this, numsOrObjects);\n}\n\nutil.inherits(Servos, Collection);\n\n/*\n * Servos, center()\n *\n * centers all servos to 90deg\n *\n * eg. array.center();\n\n * Servos, min()\n *\n * set all servos to the minimum degrees\n * defaults to 0\n *\n * eg. array.min();\n\n * Servos, max()\n *\n * set all servos to the maximum degrees\n * defaults to 180\n *\n * eg. array.max();\n\n * Servos, stop()\n *\n * stop all servos\n *\n * eg. array.stop();\n */\n\nCollection.installMethodForwarding(\n  Servos.prototype, Servo.prototype\n);\n\n\n/**\n * Animation.normalize\n *\n * @param [number || object] keyFrames An array of step values or a keyFrame objects\n */\nServos.prototype[Animation.normalize] = function(keyFrameSet) {\n  return keyFrameSet.map(function(keyFrames, index) {\n    if (keyFrames !== null) {\n      var servo = this[index];\n\n      // If servo is a servoArray then user servo[0] for default values\n      if (servo instanceof Servos) {\n        servo = servo[0];\n      }\n\n      var last = servo.last ? servo.last.target : servo.startAt;\n\n      // If the first keyFrameSet is null use the current position\n      if (keyFrames[0] === null) {\n        keyFrames[0] = {\n          value: last\n        };\n      }\n\n      if (Array.isArray(keyFrames)) {\n        if (keyFrames[0] === null) {\n          keyFrameSet[index][0] = {\n            value: last\n          };\n        }\n      }\n\n      return this[index][Animation.normalize](keyFrames);\n    }\n    return keyFrames;\n  }, this);\n};\n\n/**\n * Animation.render\n *\n * @position [number] array of values to set the servos to\n */\nServos.prototype[Animation.render] = function(position) {\n  return this.each(function(servo, i) {\n    servo.to(position[i]);\n  });\n};\n\n\n// Assign Servos Collection class as static \"method\" of Servo.\n// TODO: Eliminate .Array for 1.0.0\nServo.Array = Servos;\nServo.Collection = Servos;\n\n// Alias\n// TODO: Deprecate and REMOVE\nServo.prototype.write = Servo.prototype.move;\n\n/* istanbul ignore else */\nif (!!process.env.IS_TEST_MODE) {\n  Servo.Controllers = Controllers;\n  Servo.purge = function() {\n    priv.clear();\n  };\n}\n\nmodule.exports = Servo;\n// References\n//\n// http://www.societyofrobots.com/actuators_servos.shtml\n// http://www.parallax.com/Portals/0/Downloads/docs/prod/motors/900-00008-CRServo-v2.2.pdf\n// http://arduino.cc/en/Tutorial/SecretsOfArduinoPWM\n// http://servocity.com/html/hs-7980th_servo.html\n// http://mbed.org/cookbook/Servo\n\n// Further API info:\n// http://www.tinkerforge.com/doc/Software/Bricks/Servo_Brick_Python.html#servo-brick-python-api\n// http://www.tinkerforge.com/doc/Software/Bricks/Servo_Brick_Java.html#servo-brick-java-api\n","/home/travis/build/npmtest/node-npmtest-johnny-five/node_modules/johnny-five/lib/gyro.js":"var Board = require(\"./board\");\nvar events = require(\"events\");\nvar util = require(\"util\");\nvar Fn = require(\"./fn\");\n\nvar sum = Fn.sum;\nvar toFixed = Fn.toFixed;\n\nvar priv = new Map();\nvar axes = [\"x\", \"y\", \"z\"];\n\nvar Controllers = {\n  ANALOG: {\n    initialize: {\n      value: function(opts, dataHandler) {\n        var pins = opts.pins || [],\n          sensitivity, resolution,\n          state = priv.get(this),\n          dataPoints = {};\n\n        if (opts.sensitivity === undefined) {\n          throw new Error(\"Expected a Sensitivity\");\n        }\n\n        // 4.88mV / (0.167mV/dps * 2)\n        // 0.67 = 4X\n        // 0.167 = 1X\n        sensitivity = opts.sensitivity;\n        resolution = opts.resolution || 4.88;\n        state.K = resolution / sensitivity;\n\n        pins.forEach(function(pin, index) {\n          this.io.pinMode(pin, this.io.MODES.ANALOG);\n          this.io.analogRead(pin, function(data) {\n            var axis = axes[index];\n            dataPoints[axis] = data;\n            dataHandler(dataPoints);\n          }.bind(this));\n        }, this);\n      }\n    },\n    toNormal: {\n      value: function(raw) {\n        return raw >> 2;\n      }\n    },\n    toDegreesPerSecond: {\n      value: function(raw, rawCenter) {\n        var normal = this.toNormal(raw);\n        var center = this.toNormal(rawCenter);\n        var state = priv.get(this);\n\n        return ((normal - center) * state.K) | 0;\n      }\n    }\n  },\n  // http://www.invensense.com/mems/gyro/mpu6050.html\n  // Default to the +- 250 which has a 131 LSB/dps\n  MPU6050: {\n    initialize: {\n      value: function(opts, dataHandler) {\n        var IMU = require(\"./imu\");\n        var state = priv.get(this),\n          driver = IMU.Drivers.get(this.board, \"MPU6050\", opts);\n\n        state.sensitivity = opts.sensitivity || 131;\n\n        driver.on(\"data\", function(data) {\n          dataHandler(data.gyro);\n        });\n      }\n    },\n    toNormal: {\n      value: function(raw) {\n        return (raw >> 11) + 127;\n      }\n    },\n    toDegreesPerSecond: {\n      value: function(raw, rawCenter) {\n        var state = priv.get(this);\n\n        return (raw - rawCenter) / state.sensitivity;\n      }\n    }\n  },\n  BNO055: {\n    initialize: {\n      value: function(opts, dataHandler) {\n        var IMU = require(\"./imu\");\n        var state = priv.get(this),\n          driver = IMU.Drivers.get(this.board, \"BNO055\", opts);\n\n        // AF p.14, OUTPUT SIGNAL GYROSCOPE, set this to 16 as according to AF.51 the default for the unit register\n        // is degrees. and there may be a bug in the Ada fruit code as it has the setting to radians disabled\n        // but the sensitivity / scale set to 900 which is used for radian reps\n        state.sensitivity = 16;\n\n        driver.on(\"data\", function(data) {\n          dataHandler(data.gyro);\n        });\n      }\n    },\n    toNormal: {\n      value: function(raw) {\n        return raw;\n      }\n    },\n    toDegreesPerSecond: {\n      value: function(raw) {\n        var state = priv.get(this);\n        return raw / state.sensitivity;\n      }\n    }\n  },\n};\n\nfunction Gyro(opts) {\n  if (!(this instanceof Gyro)) {\n    return new Gyro(opts);\n  }\n\n  var controller = null;\n  var isCalibrated = false;\n  var sampleSize = 100;\n\n  var state = {\n    x: {\n      angle: 0,\n      value: 0,\n      previous: 0,\n      calibration: [],\n      stash: [0, 0, 0, 0, 0],\n      center: 0,\n      hasValue: false\n    },\n    y: {\n      angle: 0,\n      value: 0,\n      previous: 0,\n      calibration: [],\n      stash: [0, 0, 0, 0, 0],\n      center: 0,\n      hasValue: false\n    },\n    z: {\n      angle: 0,\n      value: 0,\n      previous: 0,\n      calibration: [],\n      stash: [0, 0, 0, 0, 0],\n      center: 0,\n      hasValue: false\n    }\n  };\n\n  Board.Component.call(\n    this, opts = Board.Options(opts)\n  );\n\n  if (opts.controller && typeof opts.controller === \"string\") {\n    controller = Controllers[opts.controller.toUpperCase()];\n  } else {\n    controller = opts.controller;\n  }\n\n  if (controller == null) {\n    controller = Controllers.ANALOG;\n  }\n\n  Board.Controller.call(this, controller, opts);\n\n  if (!this.toNormal) {\n    this.toNormal = opts.toNormal || function(raw) {\n      return raw;\n    };\n  }\n\n  if (!this.toDegreesPerSecond) {\n    this.toDegreesPerSecond = opts.toDegreesPerSecond || function(raw) {\n      return raw;\n    };\n  }\n\n  priv.set(this, state);\n\n  if (typeof this.initialize === \"function\") {\n    this.initialize(opts, function(data) {\n      var isChange = false;\n\n      Object.keys(data).forEach(function(axis) {\n        var value = data[axis];\n        var sensor = state[axis];\n\n        sensor.previous = sensor.value;\n        sensor.stash.shift();\n        sensor.stash.push(value);\n        sensor.hasValue = true;\n        sensor.value = (sum(sensor.stash) / 5) | 0;\n\n        if (!isCalibrated &&\n          (state.x.calibration.length === sampleSize &&\n            state.y.calibration.length === sampleSize &&\n            (this.z === undefined || state.z.calibration.length === sampleSize))) {\n\n          isCalibrated = true;\n          state.x.center = (sum(state.x.calibration) / sampleSize) | 0;\n          state.y.center = (sum(state.y.calibration) / sampleSize) | 0;\n          state.z.center = (sum(state.z.calibration) / sampleSize) | 0;\n\n          state.x.calibration.length = 0;\n          state.y.calibration.length = 0;\n          state.z.calibration.length = 0;\n        } else {\n          if (sensor.calibration.length < sampleSize) {\n            sensor.calibration.push(value);\n          }\n        }\n\n        if (sensor.previous !== sensor.value) {\n          isChange = true;\n        }\n      }, this);\n\n      if (isCalibrated) {\n        state.x.angle += this.rate.x / 100;\n        state.y.angle += this.rate.y / 100;\n        state.z.angle += this.rate.z / 100;\n\n        this.emit(\"data\", {\n          x: this.x,\n          y: this.y,\n          z: this.z\n        });\n\n        if (isChange) {\n          this.emit(\"change\", {\n            x: this.x,\n            y: this.y,\n            z: this.z\n          });\n        }\n      }\n    }.bind(this));\n  }\n\n  Object.defineProperties(this, {\n    isCalibrated: {\n      get: function() {\n        return isCalibrated;\n      },\n      set: function(value) {\n        if (typeof value === \"boolean\") {\n          isCalibrated = value;\n        }\n      }\n    },\n    pitch: {\n      get: function() {\n        return {\n          rate: toFixed(this.rate.y, 2),\n          angle: toFixed(state.y.angle, 2)\n        };\n      }\n    },\n    roll: {\n      get: function() {\n        return {\n          rate: toFixed(this.rate.x, 2),\n          angle: toFixed(state.x.angle, 2)\n        };\n      }\n    },\n    yaw: {\n      get: function() {\n        return {\n          rate: this.z !== undefined ? toFixed(this.rate.z, 2) : 0,\n          angle: this.z !== undefined ? toFixed(state.z.angle, 2) : 0\n        };\n      }\n    },\n    x: {\n      get: function() {\n        return toFixed(this.toNormal(state.x.value), 4);\n      }\n    },\n    y: {\n      get: function() {\n        return toFixed(this.toNormal(state.y.value), 4);\n      }\n    },\n    z: {\n      get: function() {\n        return state.z.hasValue ? toFixed(this.toNormal(state.z.value), 4) : undefined;\n      }\n    },\n    rate: {\n      get: function() {\n        var x = this.toDegreesPerSecond(state.x.value, state.x.center);\n        var y = this.toDegreesPerSecond(state.y.value, state.y.center);\n        var z = state.z.hasValue ?\n          this.toDegreesPerSecond(state.z.value, state.z.center) : 0;\n\n        return {\n          x: toFixed(x, 2),\n          y: toFixed(y, 2),\n          z: toFixed(z, 2)\n        };\n      }\n    }\n  });\n}\n\nObject.defineProperties(Gyro, {\n  TK_4X: {\n    value: 0.67\n  },\n  TK_1X: {\n    value: 0.167\n  }\n});\n\n\nutil.inherits(Gyro, events.EventEmitter);\n\nGyro.prototype.recalibrate = function() {\n  this.isCalibrated = false;\n};\n\n/* istanbul ignore else */\nif (!!process.env.IS_TEST_MODE) {\n  Gyro.Controllers = Controllers;\n  Gyro.purge = function() {\n    priv.clear();\n  };\n}\nmodule.exports = Gyro;\n","/home/travis/build/npmtest/node-npmtest-johnny-five/node_modules/johnny-five/lib/hygrometer.js":"var Board = require(\"./board\");\nvar Fn = require(\"./fn\");\nvar Emitter = require(\"events\").EventEmitter;\nvar util = require(\"util\");\n\nvar toFixed = Fn.toFixed;\nvar priv = new Map();\n\nvar Controllers = {\n  // https://cdn-shop.adafruit.com/product-files/2857/Sensirion_Humidity_SHT3x_Datasheet_digital-767294.pdf\n  SHT31D: {\n    initialize: {\n      value: function(opts, dataHandler) {\n        var Multi = require(\"./imu\");\n        var driver = Multi.Drivers.get(this.board, \"SHT31D\", opts);\n        driver.on(\"data\", function(data) {\n          dataHandler(data.humidity);\n        });\n      }\n    },\n    toRelativeHumidity: {\n      value: function(raw) {\n        // Based on the \"Relative Humidity Conversion\" formula\n        // https://cdn-shop.adafruit.com/product-files/2857/Sensirion_Humidity_SHT3x_Datasheet_digital-767294.pdf\n        // Page 2\n        // Table 1\n        // 1.1 Humidity Sensor Performance\n        //\n        // Page 14\n        // 4.13 Conversion of Signal Output\n        // RH = 100 * (Srh / ((2 ** 26) - 1))\n        // Srh = Sensor raw humidity\n        return toFixed((100 * raw / 65535), 2);\n      }\n    }\n  },\n\n  // https://www.adafruit.com/datasheets/1899_HTU21D.pdf\n  HTU21D: {\n    initialize: {\n      value: function(opts, dataHandler) {\n        var Multi = require(\"./imu\");\n        var driver = Multi.Drivers.get(this.board, \"HTU21D\", opts);\n        driver.on(\"data\", function(data) {\n          dataHandler(data.humidity);\n        });\n      }\n    },\n    toRelativeHumidity: {\n      value: function(raw) {\n        // Page 15\n        // CONVERSION OF SIGNAL OUTPUTS\n        // RH = -6 + 125 * (Srh / (2 ** 26))\n        // Srh = Sensor raw humidity\n        return (125 * raw / 65536) - 6;\n      }\n    }\n  },\n\n  HIH6130: {\n    initialize: {\n      value: function(opts, dataHandler) {\n        var Multi = require(\"./imu\");\n        var driver = Multi.Drivers.get(this.board, \"HIH6130\", opts);\n        driver.on(\"data\", function(data) {\n          dataHandler(data.humidity);\n        });\n      }\n    },\n    toRelativeHumidity: {\n      value: function(raw) {\n        // Page 3\n        // Equation 1: Humidity Conversion Function\n        return toFixed(raw * 100 / (Fn.POW_2_14 - 1), 2);\n      }\n    }\n  },\n\n  DHT_I2C_NANO_BACKPACK: {\n    initialize: {\n      value: function(opts, dataHandler) {\n        var Multi = require(\"./imu\");\n        var driver = Multi.Drivers.get(this.board, \"DHT_I2C_NANO_BACKPACK\", opts);\n        driver.on(\"data\", function(data) {\n          dataHandler(data.humidity);\n        });\n      }\n    },\n    toRelativeHumidity: {\n      value: function(raw) {\n        return raw / 100;\n      }\n    }\n  },\n\n  TH02: {\n    initialize: {\n      value: function(opts, dataHandler) {\n        var Multi = require(\"./imu\");\n        var driver = Multi.Drivers.get(this.board, \"TH02\", opts);\n        driver.on(\"data\", function(data) {\n          dataHandler(data.humidity);\n        });\n      }\n    },\n    toRelativeHumidity: {\n      value: function(raw) {\n        if (raw > 100) {\n          raw = 0;\n        }\n        return toFixed(raw || 0, 2);\n      }\n    }\n  },\n\n  SI7020: {\n    initialize: {\n      value: function(opts, dataHandler) {\n        var Multi = require(\"./imu\");\n        var driver = Multi.Drivers.get(this.board, \"SI7020\", opts);\n        driver.on(\"data\", function(data) {\n          dataHandler(data.humidity);\n        });\n      }\n    },\n    toRelativeHumidity: {\n      value: function(raw) {\n        // https://www.silabs.com/Support%20Documents/TechnicalDocs/Si7020-A20.pdf\n        // P. 22\n        return (125 * raw / 65536) - 6;\n      }\n    }\n  },\n\n  BME280: {\n    initialize: {\n      value: function(opts, dataHandler) {\n        var Multi = require(\"./imu\");\n        var driver = Multi.Drivers.get(this.board, \"BME280\", opts);\n        driver.on(\"data\", function(data) {\n          dataHandler(data.humidity);\n        });\n      }\n    },\n    toRelativeHumidity: {\n      value: function(raw) {\n        // https://cdn.sparkfun.com/assets/learn_tutorials/4/1/9/BST-BME280_DS001-10.pdf\n        // Page 23\n        // 47445 / 1024 = 46.333 %RH\n        return toFixed(raw / 1024, 3);\n      }\n    }\n  }\n};\n\nControllers.DHT11_I2C_NANO_BACKPACK = Controllers.DHT_I2C_NANO_BACKPACK;\nControllers.DHT21_I2C_NANO_BACKPACK = Controllers.DHT_I2C_NANO_BACKPACK;\nControllers.DHT22_I2C_NANO_BACKPACK = Controllers.DHT_I2C_NANO_BACKPACK;\nControllers.SI7021 = Controllers.SI7020;\n\n\nfunction Hygrometer(opts) {\n  if (!(this instanceof Hygrometer)) {\n    return new Hygrometer(opts);\n  }\n\n  var controller = null;\n  var last = null;\n  var raw = null;\n\n  Board.Component.call(\n    this, opts = Board.Options(opts)\n  );\n\n  var freq = opts.freq || 25;\n\n  if (opts.controller && typeof opts.controller === \"string\") {\n    controller = Controllers[opts.controller.toUpperCase()];\n  } else {\n    controller = opts.controller;\n  }\n\n  if (controller == null) {\n    throw new Error(\"Missing Hygrometer controller\");\n  }\n\n  priv.set(this, {});\n\n  Board.Controller.call(this, controller, opts);\n\n  if (!this.toRelativeHumidity) {\n    this.toRelativeHumidity = opts.toRelativeHumidity || function(x) {\n      return x;\n    };\n  }\n\n  var propDescriptors = {\n    relativeHumidity: {\n      get: function() {\n        return this.toRelativeHumidity(raw);\n      }\n    }\n  };\n  // Convenience aliases\n  propDescriptors.RH = propDescriptors.relativeHumidity;\n\n  Object.defineProperties(this, propDescriptors);\n\n  if (typeof this.initialize === \"function\") {\n    this.initialize(opts, function(data) {\n      raw = data;\n    });\n  }\n\n  setInterval(function() {\n    if (raw == null) {\n      return;\n    }\n\n    if (Number.isNaN(this.relativeHumidity)) {\n      return;\n    }\n\n    var data = {};\n    data.RH = data.relativeHumidity = this.relativeHumidity;\n\n    this.emit(\"data\", data);\n\n    if (this.relativeHumidity !== last) {\n      last = this.relativeHumidity;\n      this.emit(\"change\", data);\n    }\n  }.bind(this), freq);\n}\n\nutil.inherits(Hygrometer, Emitter);\n\n/* istanbul ignore else */\nif (!!process.env.IS_TEST_MODE) {\n  Hygrometer.Controllers = Controllers;\n  Hygrometer.purge = function() {\n    priv.clear();\n  };\n}\n\nmodule.exports = Hygrometer;\n","/home/travis/build/npmtest/node-npmtest-johnny-five/node_modules/johnny-five/lib/imu.js":"var Board = require(\"./board\");\nvar Emitter = require(\"events\").EventEmitter;\nvar util = require(\"util\");\nvar Fn = require(\"./fn\");\nvar int16 = Fn.int16;\nvar uint16 = Fn.uint16;\nvar uint24 = Fn.uint24;\n\nvar priv = new Map();\nvar activeDrivers = new Map();\n\n// TODO: make real const\nvar ACCELEROMETER = \"accelerometer\";\nvar ALTIMETER = \"altimeter\";\nvar BAROMETER = \"barometer\";\nvar GYRO = \"gyro\";\nvar HYGROMETER = \"hygrometer\";\nvar MAGNETOMETER = \"magnetometer\";\nvar ORIENTATION = \"orientation\";\nvar THERMOMETER = \"thermometer\";\n\n\nfunction Components(controller, options) {\n  var state = priv.get(this);\n  var descriptors = Object.create(null);\n\n  this.components.forEach(function(component) {\n\n    // TODO: Can this be put inside the get accessor?\n    // - Lazy init?\n    state[component] = new Components[component](\n      Object.assign({\n        controller: options.controller || controller,\n        freq: options.freq,\n        board: this.board,\n      }, options)\n    );\n\n    descriptors[component] = {\n      get: function() {\n        return state[component];\n      }\n    };\n\n    if (backwardCompatibilityGarbageHacks[component]) {\n      descriptors[backwardCompatibilityGarbageHacks[component]] = descriptors[component];\n    }\n  });\n\n  Object.defineProperties(this, descriptors);\n}\n\nComponents.accelerometer = require(\"./accelerometer\");\nComponents.altimeter = require(\"./altimeter\");\nComponents.barometer = require(\"./barometer\");\nComponents.gyro = require(\"./gyro\");\nComponents.hygrometer = require(\"./hygrometer\");\nComponents.magnetometer = require(\"./compass\");\nComponents.orientation = require(\"./orientation\");\nComponents.thermometer = require(\"./thermometer\");\n\nvar backwardCompatibilityGarbageHacks = {\n  thermometer: \"temperature\",\n};\n\nvar Drivers = {\n  // https://cdn-shop.adafruit.com/product-files/2857/Sensirion_Humidity_SHT3x_Datasheet_digital-767294.pdf\n  SHT31D: {\n    ADDRESSES: {\n      value: [0x44]\n    },\n    REGISTER: {\n      value: {\n        // Values are in 16-bit form\n        // to coincide with datasheet\n        //\n        // Table 13\n        SOFT_RESET: 0x30A2,\n        // Table 8\n        MEASURE_HIGH_REPEATABILITY: 0x2400,\n      }\n    },\n    initialize: {\n      value: function(board, opts) {\n        var READLENGTH = 6;\n        var io = board.io;\n        var address = opts.address || this.ADDRESSES[0];\n\n        opts.address = address;\n\n        io.i2cConfig(opts);\n\n        // Soft Reset\n        io.i2cWrite(address, [\n          // Page 12\n          // Table 13\n          // See diagram\n          this.REGISTER.SOFT_RESET >> 8,\n          this.REGISTER.SOFT_RESET & 0xFF,\n        ]);\n\n        var computed = {\n          temperature: null,\n          humidity: null,\n        };\n\n        // temp msb, temp lsb, temp CRC, humidity msb, humidity lsb, humidity CRC\n        var readCycle = function() {\n          // Page 10\n          // Table 8\n          // Send high repeatability measurement command\n          io.i2cWrite(address, [\n            this.REGISTER.MEASURE_HIGH_REPEATABILITY >> 8,\n            this.REGISTER.MEASURE_HIGH_REPEATABILITY & 0xFF,\n          ]);\n\n          setTimeout(function() {\n            io.i2cReadOnce(address, READLENGTH, function(data) {\n              computed.temperature = uint16(data[0], data[1]);\n              computed.humidity = uint16(data[3], data[4]);\n              this.emit(\"data\", computed);\n              readCycle();\n            }.bind(this));\n          }.bind(this), 16);\n        }.bind(this);\n\n        readCycle();\n      }\n    },\n    identifier: {\n      value: function(opts) {\n        var address = opts.address || Drivers.SHT31D.ADDRESSES.value[0];\n        return \"sht-31d-\" + address;\n      }\n    }\n  },\n\n  // https://www.adafruit.com/datasheets/1899_HTU21D.pdf\n  HTU21D: {\n    ADDRESSES: {\n      value: [0x40]\n    },\n    REGISTER: {\n      value: {\n        HUMIDITY: 0xE5,\n        TEMPERATURE: 0xE3,\n        SOFT_RESET: 0xFE,\n      }\n    },\n    initialize: {\n      value: function(board, opts) {\n        var io = board.io;\n        var address = opts.address || this.ADDRESSES[0];\n\n        opts.address = address;\n\n        // The \"no hold\" measurement requires waiting\n        // _at least_ 22ms between register write and\n        // register read. Delay is measured in μs:\n        // 22ms = 22000μs; recommend 50ms = 50000μs\n        opts.delay = 50000;\n\n        io.i2cConfig(opts);\n        io.i2cWrite(address, this.REGISTER.SOFT_RESET);\n\n        var computed = {\n          temperature: null,\n          humidity: null,\n        };\n\n        var cycle = 0;\n        var readCycle = function() {\n          // Despite the registers being back to back, the HTU21D\n          // does not like when 5 bytes are requested, so we put\n          // the two data sources on their own read channels.\n          var isTemperatureCycle = cycle === 0;\n          var register = isTemperatureCycle ? this.REGISTER.TEMPERATURE : this.REGISTER.HUMIDITY;\n\n          io.i2cReadOnce(address, register, 2, function(data) {\n            if (isTemperatureCycle) {\n              computed.temperature = uint16(data[0], data[1]);\n            } else {\n              computed.humidity = uint16(data[0], data[1]);\n            }\n\n            if (++cycle === 2) {\n              cycle = 0;\n              this.emit(\"data\", computed);\n            }\n\n            readCycle();\n          }.bind(this));\n        }.bind(this);\n\n        readCycle();\n      }\n    },\n    identifier: {\n      value: function(opts) {\n        var address = opts.address || Drivers.HTU21D.ADDRESSES.value[0];\n        return \"htu-s1d-\" + address;\n      }\n    }\n  },\n  // http://www.phanderson.com/arduino/I2CCommunications.pdf\n  // http://www.phanderson.com/arduino/CommandModeInstructions.pdf\n  // http://cdn.sparkfun.com/datasheets/Prototyping/1443945.pdf\n  HIH6130: {\n    ADDRESSES: {\n      value: [0x27]\n    },\n    initialize: {\n      value: function(board, opts) {\n        var io = board.io;\n        var address = opts.address || this.ADDRESSES[0];\n\n        opts.address = address;\n\n        io.i2cConfig(opts);\n\n        var computed = {\n          humidity: null,\n          temperature: null,\n        };\n\n        var delay = 36.65;\n\n        var measureCycle = function() {\n          // The most common use cases involve continuous\n          // sampling of sensor data, so that's what this\n          // controller-driver will provide.\n          io.i2cWrite(address, 0xA0, [0x00, 0x00]);\n\n          setTimeout(function() {\n            io.i2cWrite(address, 0x80, [0x00, 0x00]);\n            io.i2cReadOnce(address, 4, function(data) {\n              // Page 2\n              // Figure 4. Humidity and Temperature Data Fetch, Four Byte Data Read\n              // B7:6 Contain status bits\n              var status = data[0] >> 6;\n              // Mask out B7:6 status bits from H MSB\n              computed.humidity = int16(data[0] & 0x3F, data[1]);\n              // Shift off B1:0 (which are empty)\n              computed.temperature = int16(data[2], data[3] >> 2);\n\n              // Page 3\n              // 2.6 Status Bits\n              //\n              // 0 0 Normal\n              // 0 1 Stale\n              // 1 0 Command Mode\n              // 1 1 Diagnostic Condition\n              //\n              // When the two status bits read \"01\", \"stale\" data is\n              // indicated. This means that the data that already\n              // exists in the sensor's output buffer has already\n              // been fetched by the Master, and has not yet been\n              // updated with the next data from the current measurement\n              // cycle. This can happen when the Master polls the\n              // data quicker than the sensor can update the output buffer.\n              if (status === 0) {\n                delay--;\n              }\n\n              if (status === 1) {\n                delay++;\n              }\n\n              this.emit(\"data\", computed);\n\n              measureCycle();\n            }.bind(this));\n          // Page 3\n          // 3.0 Measurement Cycle\n          // The measurement cycle duration is typically\n          // 36.65 ms for temperature and humidity readings.\n          }.bind(this), delay);\n        }.bind(this);\n\n        measureCycle();\n      }\n    },\n    identifier: {\n      value: function(opts) {\n        var address = opts.address || Drivers.HIH6130.ADDRESSES.value[0];\n        return \"hih6130-\" + address;\n      }\n    }\n  },\n  DHT_I2C_NANO_BACKPACK: {\n    ADDRESSES: {\n      value: [0x0A]\n    },\n    REGISTER: {\n      value: {\n        READ: 0x00,\n      }\n    },\n    initialize: {\n      value: function(board, opts) {\n        var io = board.io;\n        var address = opts.address || this.ADDRESSES[0];\n        // Correspond to firmware variables\n        var dhtPin = 2;\n        var dhtType = 11;\n\n        opts.address = address;\n\n        io.i2cConfig(opts);\n\n        var dhtVariantExec = /(\\d{2})/.exec(opts.controller);\n        var dhtVariant = dhtVariantExec && dhtVariantExec.length && dhtVariantExec[0];\n\n        if (dhtVariant) {\n          dhtType = +dhtVariant;\n\n          if (Number.isNaN(dhtType)) {\n            dhtType = 11;\n          }\n        }\n\n        var computed = {\n          temperature: null,\n          humidity: null,\n        };\n\n        io.i2cWrite(address, [dhtPin, dhtType]);\n        io.i2cRead(address, 4, function(data) {\n          computed.humidity = int16(data[0], data[1]);\n          computed.temperature = int16(data[2], data[3]);\n          this.emit(\"data\", computed);\n        }.bind(this));\n      }\n    },\n    identifier: {\n      value: function(opts) {\n        var address = opts.address || Drivers.DHT_I2C_NANO_BACKPACK.ADDRESSES.value[0];\n        return \"dht_i2c_nano_backpack-\" + address;\n      }\n    }\n  },\n  // Based on the example code from\n  // http://playground.arduino.cc/Main/MPU-6050\n  // http://www.invensense.com/mems/gyro/mpu6050.html\n  MPU6050: {\n    ADDRESSES: {\n      value: [0x68, 0x69]\n    },\n    REGISTER: {\n      value: {\n        SETUP: [0x6B, 0x00], // += 250\n        READ: 0x3B\n      }\n    },\n    initialize: {\n      value: function(board, opts) {\n        var READLENGTH = 14;\n        var io = board.io;\n        var address = opts.address || this.ADDRESSES[0];\n\n        opts.address = address;\n\n        var computed = {\n          accelerometer: {},\n          temperature: {},\n          gyro: {}\n        };\n\n        io.i2cConfig(opts);\n        io.i2cWrite(address, this.REGISTER.SETUP);\n\n        io.i2cRead(address, this.REGISTER.READ, READLENGTH, function(data) {\n          computed.accelerometer = {\n            x: int16(data[0], data[1]),\n            y: int16(data[2], data[3]),\n            z: int16(data[4], data[5])\n          };\n\n          computed.temperature = int16(data[6], data[7]);\n\n          computed.gyro = {\n            x: int16(data[8], data[9]),\n            y: int16(data[10], data[11]),\n            z: int16(data[12], data[13])\n          };\n\n          this.emit(\"data\", computed);\n        }.bind(this));\n      },\n    },\n    identifier: {\n      value: function(opts) {\n        var address = opts.address || Drivers.MPU6050.ADDRESSES.value[0];\n        return \"mpu-6050-\" + address;\n      }\n    }\n  },\n  BNO055: {\n    ADDRESSES: {\n      value: [0x28, 0x29]\n    },\n    REGISTER: {\n      value: {\n        //\n        // 4.2.1 Register map Page 0\n        //\n        READ: {\n          /*\n            All motion data is in the following order:\n            X LSB\n            X MSB\n            Y LSB\n            Y MSB\n            Z LSB\n            Z MSB\n\n            The quarternion data is WXYZ\n            W LSB\n            W MSB\n            X LSB\n            X MSB\n            Y LSB\n            Y MSB\n            Z LSB\n            Z MSB\n\n           */\n\n          // m/s^2 by default\n          ACCEL: 0x08, // X LSB\n\n          // ? by default\n          MAG: 0x0E, // X LSB\n\n          // dps by default\n          GYRO: 0x14, // X LSB\n\n          //euler angles - degrees\n          EULER: 0x1A, // heading LSB\n\n          //quarternion\n          QUARTERNION: 0x20, // W LSB\n\n          // °C by default\n          TEMP: 0x34,\n        },\n\n        LENGTH: {\n          ACCEL: 6,\n          MAG: 6,\n          GYRO: 6,\n          EULER: 6,\n          QUARTERNION: 8,\n          TEMP: 1,\n        },\n\n        OPR_MODE_ADDR: 0x3D,\n        OPR_MODES: {\n          CONFIG: 0x00,\n          ACCONLY: 0x01,\n          MAGONLY: 0x02,\n          GYRONLY: 0x03,\n          ACCMAG: 0x04,\n          ACCGYRO: 0x05,\n          MAGGYRO: 0x06,\n          AMG: 0x07,\n          IMUPLUS: 0x08,\n          COMPASS: 0x09,\n          M4G: 0x0A,\n          NDOF_FMC_OFF: 0x0B,\n          NDOF: 0x0C,\n        },\n\n        PWR_MODE_ADDR: 0x3E,\n        PWR_MODES: {\n          NORMAL: 0x00,\n          LOW: 0x01,\n          SUSPEND: 0x02,\n        },\n\n        PAGE_ID_ADDR: 0x07,\n        PAGE_STATES: {\n          ZERO: 0x00,\n        },\n\n        CALIBRATION: 0x35,\n        SYS_TRIGGER: 0x3F,\n\n        UNIT_SEL_ADDR: 0x3B,\n\n        AXIS_MAP_CONFIG_ADDR: 0x41,\n        AXIS_MAP_SIGN_ADDR: 0x42,\n      }\n    },\n    initialize: {\n      value: function(board, opts) {\n        // Datasheet references:\n        //\n        // QS: https://ae-bst.resource.bosch.com/media/products/dokumente/bno055/BST-BNO055-AN007-00_Quick_Start_Guide.pdf\n        //\n        // AF: https://www.adafruit.com/datasheets/BST_BNO055_DS000_12.pdf\n        //\n        var io = board.io;\n        var address = opts.address || this.ADDRESSES[0];\n\n\n        // AF. Page 67 4.3.54\n        //a value for what we use to consider the system calibrated, 0xC0 represents the just fusion algorithm/system\n        var calibrationMask = opts.calibrationMask || 0xC0;\n\n        opts.address = address;\n\n        var computed = {\n          accelerometer: {\n            x: null,\n            y: null,\n            z: null,\n          },\n          gyro: {\n            x: null,\n            y: null,\n            z: null,\n          },\n          magnetometer: {\n            x: null,\n            y: null,\n            z: null,\n          },\n          orientation: {\n            euler: {\n              heading: null,\n              roll: null,\n              pitch: null,\n            },\n            quarternion: {\n              w: null,\n              x: null,\n              y: null,\n              z: null,\n            },\n          },\n          temperature: null,\n          calibration: null,\n        };\n\n        io.i2cConfig(opts);\n\n        // Put chip into CONFIG operation mode\n        io.i2cWriteReg(address, this.REGISTER.OPR_MODE_ADDR, this.REGISTER.OPR_MODES.CONFIG);\n\n        // Set register page to 0\n        io.i2cWriteReg(address, this.REGISTER.PAGE_ID_ADDR, this.REGISTER.PAGE_STATES.ZERO);\n\n        // AF Page 70, 4.3.63 SYS_TRIGGER\n        //\n        // RST_SYS (Set to reset system)\n        //\n        // B7 B6 B5 B4 B3 B2 B1 B0\n        //  0  0  1  0  0  0  0  0\n        //\n        io.i2cWriteReg(address, this.REGISTER.SYS_TRIGGER, 0x20);\n\n        var por = new Promise(function(resolve) {\n          setTimeout(function() {\n\n            // Normal power mode\n            io.i2cWriteReg(address, this.REGISTER.PWR_MODE_ADDR, this.REGISTER.PWR_MODES.NORMAL);\n\n            // AF Page 70, 4.3.63 SYS_TRIGGER\n            //\n            // CLK_SEL:\n            //\n            // B7 B6 B5 B4 B3 B2 B1 B0\n            //  0  0  0  0  0  0  0  0\n            //\n            //io.i2cWriteReg(address, this.REGISTER.SYS_TRIGGER, 0x00);\n            // do we want to enable an external crystal??\n            io.i2cWriteReg(address, this.REGISTER.SYS_TRIGGER, opts.enableExternalCrystal ? 0x80 : 0x00);\n\n            //AF Page 24 3.4, Axis remap\n            //\n            // AXIS_MAP_CONFIG:\n            //\n            // B7 B6 B5 B4 B3 B2 B1 B0\n            //  0  0  0  0  0  0  0  0\n            //  -  -  z  z  y  y  x  x\n            //\n            // x axis = 00, y axis = 01, z axis = 10\n            //\n            // see also the defaults starting on AF Page 50\n            //\n            var axisMap = opts.axisMap || 0x24;\n            io.i2cWriteReg(address, this.REGISTER.AXIS_MAP_CONFIG_ADDR, axisMap);\n\n            //AF Page 24 3.4, Axis remap\n            //\n            // AXIS_MAP_CONFIG:\n            //\n            // B7 B6 B5 B4 B3 B2 B1 B0\n            //  0  0  0  0  0  0  0  0\n            //  -  -  -  -  -  x  y  z\n            //\n            // 0 = positive, 1 = negative\n            //\n            var axisSign = opts.axisSign || 0x00;\n            io.i2cWriteReg(address, this.REGISTER.AXIS_MAP_SIGN_ADDR, axisSign);\n\n\n            // Set operational mode to \"nine degrees of freedom\"\n            setTimeout(function() {\n              io.i2cWriteReg(address, this.REGISTER.OPR_MODE_ADDR, this.REGISTER.OPR_MODES.NDOF);\n              resolve();\n            }.bind(this), 10);\n\n            // OPERATING CONDITIONS BNO055\n            // AF Page 13, 1.2, OPERATING CONDITIONS BNO055\n            // From reset to config mode\n          }.bind(this), 650);\n        }.bind(this));\n\n        por.then(function() {\n          return new Promise(function(resolve) {\n            var readCalibration = function() {\n              io.i2cReadOnce(address, this.REGISTER.CALIBRATION, 1, function(data) {\n\n                var calibration = data[0];\n                var didCalibrationChange = computed.calibration !== calibration;\n\n\n                computed.calibration = calibration;\n\n                // it is useful, possibly to know when the calibration state changes\n                // some of the calibrations are a little picky to get right, so emitting\n                // the calibration state as it changes is useful.\n                // grab the calibration\n                if (didCalibrationChange) {\n                  this.emit(\"calibration\", computed.calibration);\n                }\n\n                if ((calibration & calibrationMask) === calibrationMask) {\n\n                  // emit the calibration state so we can work out in our userspace if\n                  // we are good to go, and for when we are performing the calibration steps\n                  // let everyone know we are calibrated..\n                  this.emit(\"calibrated\");\n\n                  resolve();\n                } else {\n                  readCalibration();\n                }\n\n              }.bind(this));\n            }.bind(this);\n\n            readCalibration();\n\n          }.bind(this));\n        }.bind(this)).then(function() {\n\n          // Temperature requires no calibration, begin reading immediately\n          // here we read out temp, and the calibration state since they are back to back\n          // and the device can, has been observed to go out of calibration and we may want to check\n          io.i2cRead(address, this.REGISTER.READ.TEMP, 2, function(data) {\n            computed.temperature = data[0];\n\n            var didCalibrationChange = computed.calibration !== data[1];\n            computed.calibration = data[1];\n\n            this.emit(\"data\", computed);\n            if (didCalibrationChange) {\n              this.emit(\"calibration\", computed.calibration);\n            }\n          }.bind(this));\n\n\n          // ACCEL, MAG and GYRO are 6 bytes each => 18 bytes total\n          io.i2cRead(address, this.REGISTER.READ.ACCEL, 18, function(data) {\n\n            computed.accelerometer = {\n              x: int16(data[1], data[0]),\n              y: int16(data[3], data[2]),\n              z: int16(data[5], data[4])\n            };\n\n            computed.magnetometer = {\n              x: int16(data[7], data[6]),\n              y: int16(data[9], data[8]),\n              z: int16(data[11], data[10])\n            };\n\n            computed.gyro = {\n              x: int16(data[13], data[12]),\n              y: int16(data[15], data[14]),\n              z: int16(data[17], data[16])\n            };\n\n            this.emit(\"data\", computed);\n          }.bind(this));\n\n          // moved the ndof/quarternions to their own read.. bytes go missing, lots of 32 byte buffers everywhere\n          io.i2cRead(address, this.REGISTER.READ.EULER, 14, function(data) {\n\n            // raw euler\n            computed.orientation.euler = {\n              heading: int16(data[1], data[0]),\n              roll: int16(data[3], data[2]),\n              pitch: int16(data[5], data[4])\n            };\n\n            // scaled quarternion - unitless\n            computed.orientation.quarternion = {\n              w: int16(data[7], data[6]),\n              x: int16(data[9], data[8]),\n              y: int16(data[11], data[10]),\n              z: int16(data[13], data[12])\n            };\n\n            this.emit(\"data\", computed);\n          }.bind(this));\n\n        }.bind(this));\n      },\n    },\n    identifier: {\n      value: function(opts) {\n        var address = opts.address || Drivers.BNO055.ADDRESSES.value[0];\n        return \"bno055-\" + address;\n      }\n    }\n  },\n\n  MPL115A2: {\n    ADDRESSES: {\n      value: [0x60]\n    },\n    REGISTER: {\n      value: {\n        // Page 5\n        // Table 2. Device Memory Map\n        COEFFICIENTS: 0x04,\n        PADC_MSB: 0x00,\n        CONVERT: 0x12,\n      }\n    },\n    initialize: {\n      value: function(board, opts) {\n        /*\n          Datasheet Reference:\n\n          http://cache.freescale.com/files/sensors/doc/data_sheet/MPL115A2.pdf\n         */\n\n        var io = board.io;\n        var address = opts.address || this.ADDRESSES[0];\n\n        opts.address = address;\n\n        io.i2cConfig(opts);\n\n        var computed = {\n          pressure: null,\n          temperature: null,\n        };\n\n        var cof = {\n          a0: null,\n          b1: null,\n          b2: null,\n          c12: null\n        };\n\n        var handler = function(data) {\n\n          // Page 5\n          // 3.1 Pressure, Temperature and Coefficient Bit-Width Specifications\n          var Padc = uint16(data[0], data[1]) >> 6;\n          var Tadc = uint16(data[2], data[3]) >> 6;\n\n          // Page 6\n          // 3.2 Compensation\n          computed.pressure = cof.a0 + (cof.b1 + cof.c12 * Tadc) * Padc + cof.b2 * Tadc;\n          computed.temperature = Tadc;\n\n          this.emit(\"data\", computed);\n\n          readCycle();\n        }.bind(this);\n\n        var readCycle = function() {\n          io.i2cWriteReg(address, this.REGISTER.CONVERT, 0x00);\n          // Page 5\n          // Table 2. Device Memory Map\n          // Starting from PADC_MSB, read 4 bytes:\n          //\n          // Padc_MSB\n          // Padc_LSB\n          // Tadc_MSB\n          // Tadc_LSB\n          //\n          io.i2cReadOnce(address, this.REGISTER.PADC_MSB, 4, handler);\n\n          // TODO: User specified \"frequency\" needs to be applied here.\n        }.bind(this);\n\n        var pCoefficients = new Promise(function(resolve) {\n          io.i2cReadOnce(address, this.REGISTER.COEFFICIENTS, 8, function(data) {\n            var A0 = int16(data[0], data[1]);\n            var B1 = int16(data[2], data[3]);\n            var B2 = int16(data[4], data[5]);\n            var C12 = int16(data[6], data[7]) >> 2;\n\n            // Source:\n            // https://github.com/adafruit/Adafruit_MPL115A2\n            // a0 is the pressure offset coefficient\n            // b1 is the pressure sensitivity coefficient\n            // b2 is the temperature coefficient of offset (TCO)\n            // c12 is the temperature coefficient of sensitivity (TCS)\n            cof.a0 = A0 / 8;\n            cof.b1 = B1 / 8192;\n            cof.b2 = B2 / 16384;\n            cof.c12 = C12 / 4194304;\n\n            resolve();\n          }.bind(this));\n        }.bind(this));\n\n        pCoefficients.then(readCycle);\n      },\n    },\n    identifier: {\n      value: function(opts) {\n        var address = opts.address || Drivers.MPL115A2.ADDRESSES.value[0];\n        return \"mpl115a2-\" + address;\n      }\n    }\n  },\n  // Based off of the AdaFruit Arduino library for this chip\n  // https://github.com/adafruit/Adafruit_MPL3115A2_Library\n  MPL3115A2: {\n    ADDRESSES: {\n      value: [0x60]\n    },\n    REGISTER: {\n      // Page 18\n      // 13 Register descriptions\n      value: {\n        STATUS: 0x00,\n        PRESSURE: 0x01,\n        CONFIG: 0x13,\n        BAR_IN_MSB: 0x14,\n        BAR_IN_LSB: 0x15,\n        CONTROL: 0x26,\n      }\n    },\n    MASK: {\n      value: {\n        STATUS: {\n          PRESSURE_DATA_READ: 0x04\n        },\n        CONTROL: {\n          SBYB: 0x01,\n          OS128: 0x38,\n          ALTIMETER: 0x80,\n          PRESSURE: 0x00\n        },\n        CONFIG: {\n          TDEFE: 0x01,\n          PDEFE: 0x02,\n          DREM: 0x04\n        }\n      }\n    },\n    initialize: {\n      value: function(board, opts) {\n        var READLENGTH = 6;\n        var io = board.io;\n        var address = opts.address || this.ADDRESSES[0];\n        var isPressure = false;\n        var elevation = null;\n        var offset = 0;\n\n        opts.address = address;\n\n        // See http://www.henrylahr.com/?p=99 for implementation approach\n        //\n        var altNow = 0;\n        var computed = {\n          pressure: 0,\n          altitude: 0,\n          temperature: 0\n        };\n\n        if (typeof opts.elevation !== \"undefined\") {\n          elevation = opts.elevation;\n        }\n\n        if (elevation !== null && elevation <= 0) {\n          offset = Math.abs(elevation) + 1;\n          elevation = 1;\n        }\n\n        var waitForReady = function(next) {\n          io.i2cReadOnce(address, this.REGISTER.STATUS, 1, function(data) {\n            if (data[0] & this.MASK.STATUS.PRESSURE_DATA_READ) {\n              next();\n            } else {\n              setTimeout(function() {\n                waitForReady(next);\n              }, 100);\n            }\n          }.bind(this));\n        }.bind(this);\n\n        var readValues = function() {\n          var modeMask = isPressure ? this.MASK.CONTROL.PRESSURE : this.MASK.CONTROL.ALTIMETER;\n          var mode = this.MASK.CONTROL.SBYB | this.MASK.CONTROL.OS128 | modeMask;\n\n          io.i2cWrite(address, this.REGISTER.CONTROL, mode);\n\n          waitForReady(function() {\n            io.i2cReadOnce(address, this.REGISTER.PRESSURE, READLENGTH, function(data) {\n              var value = uint24(data[1], data[2], data[3]) >> 4;\n              var temperature = uint16(data[4], data[5]) >> 4;\n              var altVal;\n\n              computed.temperature = temperature;\n\n              if (isPressure) {\n                computed.pressure = value;\n                this.emit(\"data\", computed);\n              } else {\n                var m = data[1];\n                var c = data[2];\n                var l = data[3];\n                var fl = (l >> 4) / 16;\n\n                altVal = (m << 8 | c) + fl;\n                altNow = (altNow * 3 + altVal) / 4;\n\n                computed.altitude = altNow - offset;\n              }\n\n              isPressure = !isPressure;\n\n              readValues();\n            }.bind(this));\n          }.bind(this));\n        }.bind(this);\n\n        var reads = [];\n        var calibrate = function() {\n          // Clear Oversampling and OST\n          io.i2cWrite(address, this.REGISTER.CONTROL, 0x3B);\n          io.i2cWrite(address, this.REGISTER.CONTROL, 0x39);\n\n          setTimeout(function() {\n            io.i2cReadOnce(address, this.REGISTER.PRESSURE, READLENGTH, function(data) {\n              var m = data[1];\n              var c = data[2];\n              var l = data[3];\n              var fl = (l >> 4) / 4;\n\n              reads.push((m << 10 | c << 2) + fl);\n\n              if (reads.length === 4) {\n                var curpress = (reads[0] + reads[1] + reads[2] + reads[3]) / 4;\n                var seapress = curpress / Math.pow(1 - elevation * 0.0000225577, 5.255);\n\n                // Update Barometric input for Altitude\n                io.i2cWrite(address, this.REGISTER.BAR_IN_MSB, (seapress / 2) >> 8);\n                io.i2cWrite(address, this.REGISTER.BAR_IN_LSB, (seapress / 2) & 0xFF);\n\n                // Get into Altitude mode\n                // One shot & OST bit\n                io.i2cWrite(address, this.REGISTER.CONTROL, 0xBB);\n                io.i2cWrite(address, this.REGISTER.CONTROL, 0xB9);\n\n                setTimeout(function() {\n                  io.i2cReadOnce(address, this.REGISTER.PRESSURE, READLENGTH, function(data) {\n                    var m = data[1];\n                    var c = data[2];\n                    var l = data[3];\n                    var fl = (l >> 4) / 16;\n\n                    altNow = (m << 8 | c) + fl;\n\n                    readValues(false);\n                  });\n                }.bind(this), 550);\n\n              } else {\n                calibrate();\n              }\n            }.bind(this));\n          }.bind(this), 500);\n        }.bind(this);\n\n        io.i2cConfig(\n          Object.assign(opts, {\n            settings: {\n              stopTX: true\n            }\n          })\n        );\n\n        // configure the chip\n        // Set Altitude Offset.\n        io.i2cWriteReg(address, 0x2D, 0x00);\n\n        io.i2cWriteReg(address, this.REGISTER.BAR_IN_MSB, 0);\n        io.i2cWriteReg(address, this.REGISTER.BAR_IN_LSB, 0);\n\n        io.i2cWriteReg(address, this.REGISTER.CONFIG,\n          this.MASK.CONFIG.TDEFE |\n          this.MASK.CONFIG.PDEFE |\n          this.MASK.CONFIG.DREM);\n\n        if (elevation !== null) {\n          calibrate();\n        } else {\n          readValues();\n        }\n      }\n    },\n    identifier: {\n      value: function(opts) {\n        var address = opts.address || Drivers.MPL3115A2.ADDRESSES.value[0];\n        return \"mpl3115a2-\" + address;\n      }\n    }\n  },\n  BMP180: {\n    ADDRESSES: {\n      value: [0x77]\n    },\n    REGISTER: {\n      value: {\n        COEFFICIENTS: 0xAA,\n        READ: 0x00,\n        READ_START: 0xF4,\n        READ_RESULT: 0xF6,\n      }\n    },\n    initialize: {\n      value: function(board, opts) {\n        var io = board.io;\n        var address = opts.address || this.ADDRESSES[0];\n        var elevation = null;\n        var offset = 0;\n\n        if (typeof opts.elevation !== \"undefined\") {\n          elevation = opts.elevation;\n        }\n\n        if ((elevation != null && elevation <= 0) ||\n            elevation == null) {\n          offset = Math.abs(elevation) + 1;\n          elevation = 1;\n        }\n\n        opts.address = address;\n\n        /**\n         * https://cdn-shop.adafruit.com/datasheets/BST-BMP180-DS000-09.pdf\n         * Table 1: Operating conditions, output signal and mechanical characteristics\n         *\n         * Pressure Conversion Delay (ms)\n         *\n         * [\n         *   5,   LOW\n         *   8,   STANDARD\n         *   14,  HIGH\n         *   26,  ULTRA\n         *  ]\n         *\n         * These numbers are derived from rounding the Max column of\n         * Table 1, for the Conversion Time entries.\n         */\n\n        var mode = opts.mode || 3;\n        var kpDelay = [5, 8, 14, 26][mode];\n        var oss = Fn.constrain(mode, 0, 3);\n\n        var cof = {\n          a1: null,\n          a2: null,\n          a3: null,\n          a4: null,\n          a5: null,\n          a6: null,\n          b1: null,\n          b2: null,\n          b5: null,\n          mb: null,\n          mc: null,\n          md: null,\n        };\n\n        io.i2cConfig(opts);\n\n        var pCoefficients = new Promise(function(resolve) {\n          io.i2cReadOnce(address, this.REGISTER.COEFFICIENTS, 22, function(data) {\n            // https://www.sparkfun.com/datasheets/Components/General/BST-BMP085-DS000-05.pdf\n            // Page 12\n            // 3.4 Calibration Coefficients\n            //\n            // http://www.adafruit.com/datasheets/BST-BMP180-DS000-09.pdf\n            // Page 13\n            // 3.4 Calibration Coefficients\n            //\n            cof.a1 = int16(data[0], data[1]);\n            cof.a2 = int16(data[2], data[3]);\n            cof.a3 = int16(data[4], data[5]);\n            cof.a4 = uint16(data[6], data[7]);\n            cof.a5 = uint16(data[8], data[9]);\n            cof.a6 = uint16(data[10], data[11]);\n            cof.b1 = int16(data[12], data[13]);\n            cof.b2 = int16(data[14], data[15]);\n            cof.mb = int16(data[16], data[17]);\n            cof.mc = int16(data[18], data[19]);\n            cof.md = int16(data[20], data[21]);\n\n            resolve();\n          });\n        }.bind(this));\n\n        pCoefficients.then(function() {\n\n          // https://www.sparkfun.com/datasheets/Components/General/BST-BMP085-DS000-05.pdf\n          // Pages 10, 11\n          // 3.3 Measurement of pressure and temperature\n          // Pages 12, 13, 14\n          // 3.5 Calculating pressure and temperature\n          //\n          // http://www.adafruit.com/datasheets/BST-BMP180-DS000-09.pdf\n          // Pages 11, 12\n          // 3.3 Measurement of pressure and temperature\n          // Pages 13, 14, 15, 16\n          // 3.5 Calculating pressure and temperature\n          //\n          var computed = {\n            altitude: null,\n            pressure: null,\n            temperature: null,\n          };\n\n          var cycle = 0;\n\n          // http://www.adafruit.com/datasheets/BST-BMP180-DS000-09.pdf\n          // Pages 11, 15\n          // 3.3 Measurement of pressure and temperature\n          // 3.5 Calculating pressure and temperature\n          var readCycle = function() {\n\n            // cycle 0: temperature\n            // cycle 1: pressure\n\n            var isTemperatureCycle = cycle === 0;\n            var component = isTemperatureCycle ? 0x2E : 0x34 + (oss << 6);\n            var numBytes = isTemperatureCycle ? 2 : 3;\n            var delay = isTemperatureCycle ? 5 : kpDelay;\n\n\n            io.i2cWriteReg(address, this.REGISTER.READ_START, component);\n\n            // Once the READ_START register is set,\n            // delay the READ_RESULT request based on the\n            // mode value provided by the user, or default.\n            setTimeout(function() {\n              io.i2cReadOnce(address, this.REGISTER.READ_RESULT, numBytes, function(data) {\n                var compensated, uncompensated;\n                var x1, x2, x3, b3, b4, b6, b7, b6s, bx;\n\n                if (isTemperatureCycle) {\n                  // TEMPERATURE\n                  uncompensated = int16(data[0], data[1]);\n\n                  // Compute the true temperature\n                  x1 = ((uncompensated - cof.a6) * cof.a5) >> 15;\n                  x2 = ((cof.mc << 11) / (x1 + cof.md)) >> 0;\n\n                  // Compute b5, which is used by the pressure cycle\n                  cof.b5 = (x1 + x2) | 0;\n\n                  // Steps of 0.1°C\n                  computed.temperature = ((cof.b5 + 8) >> 4) / 10;\n                } else {\n                  // PRESSURE\n                  uncompensated = uint24(data[0], data[1], data[2]) >> (8 - oss);\n\n                  b6 = cof.b5 - 4000;\n                  b6s = b6 * b6;\n                  bx = b6s >> 12;\n\n                  // Intermediary x1 & x2 to calculate x3 for b3\n                  x1 = (cof.b2 * bx) >> 11;\n                  x2 = (cof.a2 * b6) >> 11;\n                  x3 = x1 + x2;\n                  b3 = ((((cof.a1 * 4 + x3) << oss) + 2) / 4) >> 0;\n\n                  // Intermediary x1 & x2 to calculate x3 for b4\n                  x1 = (cof.a3 * b6) >> 13;\n                  x2 = (cof.b1 * bx) >> 16;\n                  x3 = ((x1 + x2) + 2) >> 2;\n                  b4 = (cof.a4 * (x3 + 32768)) >> 15;\n                  b7 = (uncompensated - b3) * (50000 >> oss);\n\n                  if (b7 < Fn.POW_2_31) {\n                    compensated = (b7 * 2) / b4;\n                  } else {\n                    compensated = (b7 / b4) * 2;\n                  }\n\n                  compensated >>= 0;\n\n                  x1 = (compensated >> 8) * (compensated >> 8);\n                  x1 = (x1 * 3038) >> 16;\n                  x2 = (-7357 * compensated) >> 16;\n\n                  compensated += (x1 + x2 + 3791) >> 4;\n\n                  // Steps of 1Pa (= 0.01hPa = 0.01mbar) (=> 0.001kPa)\n                  computed.pressure = compensated;\n\n                  // 3.7 Calculating pressure at sea level\n                  var seapress = compensated / Math.pow(1 - elevation * 0.0000225577, 5.255);\n                  var altitude = 44330 * (1 - Math.pow(compensated / seapress, 1 / 5.255));\n\n                  // Page 3 (of BMP280 Datasheet)\n                  // ...relative accuracy is ±0.12 hPa, which is equivalent to\n                  // ±1 m difference in altitude.\n                  computed.altitude = Math.round(altitude - offset);\n                }\n\n                if (++cycle === 2) {\n                  cycle = 0;\n                  this.emit(\"data\", computed);\n                }\n\n                readCycle();\n              }.bind(this));\n            }.bind(this), delay);\n          }.bind(this);\n\n          // Kick off \"read loop\"\n          //\n          readCycle();\n        }.bind(this));\n      }\n    },\n    identifier: {\n      value: function(opts) {\n        var address = opts.address || Drivers.BMP180.ADDRESSES.value[0];\n        return \"bmp180-\" + address;\n      }\n    }\n  },\n\n  BMP280: {\n    ADDRESSES: {\n      value: [0x77]\n    },\n    REGISTER: {\n      value: {\n        COEFFICIENTS: 0x88,\n        CONFIG: 0xF5,\n        MEASURE: 0xF4,\n        // 0xF7, 0xF8, 0xF9\n        // MSB, LSB, XLSB\n        PRESSURE: 0xF7,\n        // 0xFA, 0xFB, 0xFC\n        // MSB, LSB, XLSB\n        TEMPERATURE: 0xFA,\n        RESET: 0xE0,\n      }\n    },\n    initialize: {\n      value: function(board, opts) {\n        var io = board.io;\n        var address = opts.address || this.ADDRESSES[0];\n        var elevation = null;\n        var offset = 0;\n\n        if (typeof opts.elevation !== \"undefined\") {\n          elevation = opts.elevation;\n        }\n\n        if ((elevation != null && elevation <= 0) ||\n            elevation == null) {\n          offset = Math.abs(elevation) + 1;\n          elevation = 1;\n        }\n\n        opts.address = address;\n\n        /**\n         * All page numbers refer to pages in:\n         * https://cdn-shop.adafruit.com/datasheets/BST-BMP280-DS001-11.pdf\n         *\n         */\n\n        var dig = {\n          T1: null,\n          T2: null,\n          T3: null,\n          P1: null,\n          P2: null,\n          P3: null,\n          P4: null,\n          P5: null,\n          P6: null,\n          P7: null,\n          P8: null,\n          P9: null,\n        };\n\n        io.i2cConfig(opts);\n\n        // Page. 24\n        // 4.3.2 Register 0xE0 \"reset\"\n        io.i2cWrite(address, this.REGISTER.RESET, 0xB6);\n\n        var pCoefficients = new Promise(function(resolve) {\n          io.i2cReadOnce(address, this.REGISTER.COEFFICIENTS, 24, function(data) {\n\n            // Page 21, Table 17\n            // Compensation parameter storage, naming and data type\n            // These are received LSB FIRST\n            //\n\n            dig.T1 = uint16(data[1], data[0]);\n            dig.T2 = int16(data[3], data[2]);\n            dig.T3 = int16(data[5], data[4]);\n\n            dig.P1 = uint16(data[7], data[6]);\n            dig.P2 = int16(data[9], data[8]);\n            dig.P3 = int16(data[11], data[10]);\n            dig.P4 = int16(data[13], data[12]);\n            dig.P5 = int16(data[15], data[14]);\n            dig.P6 = int16(data[17], data[16]);\n            dig.P7 = int16(data[19], data[18]);\n            dig.P8 = int16(data[21], data[20]);\n            dig.P9 = int16(data[23], data[22]);\n\n            resolve();\n          });\n        }.bind(this));\n\n        pCoefficients.then(function() {\n          /*\n          CTRL_MEAS bits\n\n          | DATA LSB                      |\n          | 7 | 6 | 5 | 4 | 3 | 2 | 1 | 0 |\n          | - | - | - | - | - | - | - | - |\n          | 0 | 0 | 1 | 1 | 1 | 1 | 1 | 1 |\n          */\n\n          io.i2cWrite(address, this.REGISTER.MEASURE, 0x3F);\n\n          var computed = {\n            altitude: null,\n            pressure: null,\n            temperature: null,\n          };\n\n          //\n          // Page 12\n          // 3.3.1 Pressure measurement\n          //\n          // Page 13\n          // 3.3.2 Temperature measurement\n          //\n\n          io.i2cRead(address, this.REGISTER.PRESSURE, 6, function(data) {\n            var compensated = 0;\n\n            // Page 45\n            // \"Returns temperature in DegC, double precision. Output value of\n            // '51.23' equals 51.23 DegC. t_fine carries fine temperature as global value\"\n            var fine;\n\n            // var1, var2\n            //\n            // Expect:\n            //\n            // int32\n            //\n            var v1, v2;\n\n            // Page 44\n            // \"Both pressure and temperature values are expected to be\n            // received in 20 bit format, positive, stored in a 32 bit signed integer. \"\n            //\n            //  V = int32(uint24(m, l, xl))\n            //  V >> 4;\n            //\n\n            // Page 45\n            var P = Fn.s32(uint24(data[0], data[1], data[2]));\n            var T = Fn.s32(uint24(data[3], data[4], data[5]));\n\n            P >>= 4;\n            T >>= 4;\n\n            // TEMPERATURE\n\n            // Page 45\n            // bmp280_compensate_T_int32\n            // var1 = ((((adc_T>>3) – ((BMP280_S32_t)dig_T1<<1))) *\n            //                        ((BMP280_S32_t)dig_T2)) >> 11;\n            // var2 = (((((adc_T>>4) – ((BMP280_S32_t)dig_T1)) *\n            //          ((adc_T>>4) – ((BMP280_S32_t)dig_T1))) >> 12) *\n            //          ((BMP280_S32_t)dig_T3)) >> 14;\n            //\n            //\n            var adc16 = T >> 4;\n            var adc16subT1 = adc16 - dig.T1;\n            v1  = (((T >> 3) - (dig.T1 << 1)) * dig.T2) >> 11;\n            v2  = (((adc16subT1 * adc16subT1) >> 12) * dig.T3) >> 14;\n\n            // t_fine = var1 + var2;\n            fine = v1 + v2;\n\n            // Page 7, 8\n            // Table 2: Parameter specification\n            //\n            //\n            // Temperature 0.01 °C\n            //\n            // As toFixed(2)\n            //\n            // C = +(((t_fine * 5 + 128) >> 8) / 100).toFixed(resolution)\n            //\n            computed.temperature = ((fine * 5 + 128) >> 8) / 100;\n\n            v1 = undefined;\n            v2 = undefined;\n\n\n            // PRESSURE\n            // Page 46\n            // bmp280_compensate_P_int32\n            //\n            // Every single seemingly arbitrary magic number comes from the datasheet.\n            // Datasheets are evidently written by people that don't care about\n            // anyone else actually understanding how a thing works.\n            //\n\n            // var1 = (((BMP280_S32_t)t_fine)>>1) – (BMP280_S32_t)64000;\n            v1 = Fn.s32(fine >> 1) - 64000;\n\n            // var2 = (((var1>>2) * (var1>>2)) >> 11 ) * ((BMP280_S32_t)dig_P6);\n            v2 = (((v1 >> 2) * (v1 >> 2)) >> 11) * Fn.s32(dig.P6);\n\n            // var2 = var2 + ((var1*((BMP280_S32_t)dig_P5))<<1);\n            v2 += (v1 * Fn.s32(dig.P5)) << 1;\n\n            // var2 = (var2>>2)+(((BMP280_S32_t)dig_P4)<<16);\n            v2 = (v2 >> 2) + (Fn.s32(dig.P4) << 16);\n\n\n            // var1 = (((dig_P3 * (((var1>>2) * (var1>>2)) >> 13 )) >> 3) +\n            //          ((((BMP280_S32_t)dig_P2) * var1)>>1))>>18;\n            v1 = (((dig.P3 * (((v1 >> 2) * (v1 >> 2)) >> 13)) >> 3) + ((Fn.s32(dig.P2) * v1) >> 1)) >> 18;\n\n            // var1 =((((32768+var1))*((BMP280_S32_t)dig_P1))>>15);\n            v1 = (((Fn.POW_2_15 + v1) * Fn.s32(dig.P1)) >> 15);\n\n            if (v1 === 0) {\n              // Prevent division by zero\n              return 0;\n            }\n\n            // p = (((BMP280_U32_t)(((BMP280_S32_t)1048576)-adc_P)-(var2>>12)))*3125;\n            compensated = Fn.u32((Fn.s32(Fn.POW_2_20) - P) - (v2 >> 12)) * 3125;\n\n            if (compensated < Fn.POW_2_31) {\n              // p = (p << 1) / ((BMP280_U32_t)var1);\n              compensated = ((compensated << 1) >>> 0) / Fn.u32(v1);\n            } else {\n              // p = (p / (BMP280_U32_t)var1) * 2;\n              compensated = ((compensated / Fn.u32(v1)) >>> 0) * 2;\n            }\n\n            compensated = Fn.u32(compensated) >>> 0;\n\n            // var1 = (((BMP280_S32_t)dig_P9) * ((BMP280_S32_t)(((p>>3) * (p>>3))>>13)))>>12;\n            var compshift3r = compensated >> 3;\n            v1 = (Fn.s32(dig.P9) * Fn.s32(((compshift3r * compshift3r) >> 13))) >> 12;\n\n            // var2 = (((BMP280_S32_t)(p>>2)) * ((BMP280_S32_t)dig_P8))>>13;\n            v2 = (Fn.s32(compensated >> 2) * Fn.s32(dig.P8)) >> 13;\n\n            // p = (BMP280_U32_t)((BMP280_S32_t)p + ((var1 + var2 + dig_P7) >> 4));\n            compensated = Fn.u32(Fn.s32(compensated) + ((v1 + v2 + dig.P7) >> 4));\n\n            // Steps of 1Pa (= 0.01hPa = 0.01mbar) (=> 0.001kPa)\n            computed.pressure = compensated;\n\n            // Calculating pressure at sea level (copied from BMP180)\n            var seapress = compensated / Math.pow(1 - elevation * 0.0000225577, 5.255);\n            var altitude = 44330 * (1 - Math.pow(compensated / seapress, 1 / 5.255));\n\n            // Page 3\n            // ...relative accuracy is ±0.12 hPa, which is equivalent to\n            // ±1 m difference in altitude.\n            computed.altitude = Math.round(altitude - offset);\n\n            this.emit(\"data\", computed);\n          }.bind(this));\n        }.bind(this));\n      }\n    },\n    identifier: {\n      value: function(opts) {\n        var address = opts.address || Drivers.BMP280.ADDRESSES.value[0];\n        return \"bmp280-\" + address;\n      }\n    }\n  },\n\n  BME280: {\n    ADDRESSES: {\n      value: [0x77]\n    },\n    REGISTER: {\n      value: {\n        COEFFICIENTS_TP: 0x88,\n        COEFFICIENTS_H: 0xE1,\n        CONFIG: 0xF5,\n        MEASURE_H: 0xF2,\n        MEASURE_TP: 0xF4,\n        // 0xF7, 0xF8, 0xF9\n        //  MSB,  LSB, XLSB\n        PRESSURE: 0xF7,\n        // 0xFA, 0xFB, 0xFC\n        //  MSB,  LSB, XLSB\n        TEMPERATURE: 0xFA,\n        // 0xFD, 0xFE\n        //  MSB,  LSB\n        RESET: 0xE0,\n      }\n    },\n    initialize: {\n      value: function(board, opts) {\n        var io = board.io;\n        var address = opts.address || this.ADDRESSES[0];\n        var elevation = null;\n        var offset = 0;\n\n        if (typeof opts.elevation !== \"undefined\") {\n          elevation = opts.elevation;\n        }\n\n        if ((elevation != null && elevation <= 0) ||\n            elevation == null) {\n          offset = Math.abs(elevation) + 1;\n          elevation = 1;\n        }\n\n        opts.address = address;\n\n        /**\n         * All page numbers refer to pages in:\n         * https://cdn.sparkfun.com/assets/learn_tutorials/4/1/9/BST-BME280_DS001-10.pdf\n         *\n         */\n\n        var dig = {\n          T1: null,\n          T2: null,\n          T3: null,\n          P1: null,\n          P2: null,\n          P3: null,\n          P4: null,\n          P5: null,\n          P6: null,\n          P7: null,\n          P8: null,\n          P9: null,\n          H1: null,\n          H2: null,\n          H3: null,\n          H4: null,\n          H5: null,\n          H6: null,\n        };\n\n        io.i2cConfig(opts);\n\n        // Page. 24\n        // 4.3.2 Register 0xE0 \"reset\"\n        io.i2cWrite(address, this.REGISTER.RESET, 0xB6);\n\n        var pCoefficients = new Promise(function(resolveCoeffs) {\n\n          // Page 22,\n          // Table 16: Compensation parameter storage, naming and data type\n          // These are received LSB FIRST\n          //\n          // The H register is not contiguous!\n\n\n          Promise.all([\n            new Promise(function(resolve) {\n              io.i2cReadOnce(address, 0x88, 24, function(data) {\n                dig.T1 = uint16(data[1], data[0]);\n                dig.T2 = int16(data[3], data[2]);\n                dig.T3 = int16(data[5], data[4]);\n\n                dig.P1 = uint16(data[7], data[6]);\n                dig.P2 = int16(data[9], data[8]);\n                dig.P3 = int16(data[11], data[10]);\n                dig.P4 = int16(data[13], data[12]);\n                dig.P5 = int16(data[15], data[14]);\n                dig.P6 = int16(data[17], data[16]);\n                dig.P7 = int16(data[19], data[18]);\n                dig.P8 = Fn.s32(int16(data[21], data[20]));\n                dig.P9 = Fn.s32(int16(data[23], data[22]));\n                resolve();\n              });\n            }),\n            new Promise(function(resolve) {\n              io.i2cReadOnce(address, 0xA1, 1, function(data) {\n                dig.H1 = Fn.u8(data[0]);\n                resolve();\n              });\n            }),\n            new Promise(function(resolve) {\n              io.i2cReadOnce(address, 0xE1, 8, function(data) {\n                /*\n                  0xE1 => data[0]\n                  0xE2 => data[1]\n                  0xE3 => data[2]\n                  0xE4 => data[3]\n                  0xE5 => data[4]\n                  0xE6 => data[5]\n                  0xE7 => data[6]\n                */\n\n                //        0xE2   0xE1\n                // H2   [15:8]  [7:0]\n                dig.H2 = Fn.s32(int16(data[1], data[0]));\n\n                //  0xE3\n                dig.H3 = Fn.s32(data[2]);\n\n                // Special Bit arrangements for H4 & H5\n                //\n                //      0xE5    0xE4\n                // H4  [3:0]  [11:4]     signed short\n                //      0xE6    0xE5\n                // H5 [11:4]   [3:0]    signed short\n\n                dig.H4 = Fn.s32((data[3] << 4) | (data[4] & 0xF));\n                dig.H5 = Fn.s32((data[5] << 4) | (data[4] >> 4));\n\n                // 0xE7\n                dig.H6 = Fn.s8(data[6]);\n\n                resolve();\n              });\n            })\n          ]).then(resolveCoeffs);\n        }.bind(this));\n\n        pCoefficients.then(function() {\n          /*\n            Table 19: Register 0xF2 \"ctrl_hum\"\n\n            Bit 2, 1, 0\n            Controls oversampling of humidity\n\n\n            osrs_h[2:0] Humidity oversampling\n            000 Skipped (output set to 0x8000)\n            001 oversampling ×1\n            010 oversampling ×2\n            011 oversampling ×4\n            100 oversampling ×8\n            101, others oversampling ×16\n\n            |           |       | HUM       |\n            | 7 | 6 | 5 | 4 | 3 | 2 | 1 | 0 |\n            | - | - | - | - | - | - | - | - |\n            | 0 | 0 | 0 | 0 | 0 | 1 | 0 | 1 |\n          */\n          io.i2cWrite(address, this.REGISTER.MEASURE_H, 0x05);\n\n          /*\n            Table 22: Register 0xF2 \"ctrl_meas\"\n\n            Bit 7, 6, 5\n            Controls oversampling of temperature data\n\n            Bit 4, 3, 2\n            Controls oversampling of pressure data\n\n            Bit 1, 0\n            Controls the sensor mode of the device\n\n\n            osrs_h[2:0] Humidity oversampling\n            000 Skipped (output set to 0x8000)\n            001 oversampling ×1\n            010 oversampling ×2\n            011 oversampling ×4\n            100 oversampling ×8\n            101, others oversampling ×16\n\n\n            000 Skipped (output set to 0x80000)\n            001 oversampling ×1\n            010 oversampling ×2\n            011 oversampling ×4\n            100 oversampling ×8\n            101, others oversampling ×16\n\n            00 Sleep mode\n            01 and 10 Forced mode\n            11 Normal mode\n\n            | TEMP      | PRES      | Mode  |\n            | 7 | 6 | 5 | 4 | 3 | 2 | 1 | 0 |\n            | - | - | - | - | - | - | - | - |\n            | 1 | 0 | 1 | 1 | 0 | 1 | 1 | 1 |\n\n          */\n          io.i2cWrite(address, this.REGISTER.MEASURE_TP, 0xB7);\n\n\n          var computed = {\n            altitude: null,\n            pressure: null,\n            humidity: null,\n            temperature: null,\n          };\n\n          //\n          // Page 12\n          // 3.3.1 Pressure measurement\n          //\n          // Page 13\n          // 3.3.2 Temperature measurement\n          //\n\n          io.i2cRead(address, this.REGISTER.PRESSURE, 8, function(data) {\n            var compensated = 0;\n\n            // Page 45\n            // \"Returns temperature in DegC, double precision. Output value of\n            // '51.23' equals 51.23 DegC. t_fine carries fine temperature as global value\"\n            var fine;\n\n            // var1, var2\n            //\n            // Expect:\n            //\n            // int32\n            //\n            var v1, v2, vx;\n\n            // Page 50\n            // \"Both pressure and temperature values are expected to be\n            // received in 20 bit format, positive, stored in a 32 bit signed integer. \"\n            //\n            //  V = int32(uint24(m, l, xl))\n            //  V >> 4;\n            //\n\n            // Page 50\n            var P = Fn.s32(uint24(data[0], data[1], data[2]));\n            var T = Fn.s32(uint24(data[3], data[4], data[5]));\n            var H = Fn.s32(uint16(data[6], data[7]));\n\n            P >>= 4;\n            T >>= 4;\n\n            // TEMPERATURE\n\n            // Page 23\n            // bmp280_compensate_T_int32\n            // var1 = ((((adc_T>>3) – ((BMP280_S32_t)dig_T1<<1))) *\n            //                        ((BMP280_S32_t)dig_T2)) >> 11;\n            // var2 = (((((adc_T>>4) – ((BMP280_S32_t)dig_T1)) *\n            //          ((adc_T>>4) – ((BMP280_S32_t)dig_T1))) >> 12) *\n            //          ((BMP280_S32_t)dig_T3)) >> 14;\n            //\n            //\n            var adc16 = T >> 4;\n            var adc16subT1 = adc16 - dig.T1;\n            v1  = (((T >> 3) - (dig.T1 << 1)) * dig.T2) >> 11;\n            v2  = (((adc16subT1 * adc16subT1) >> 12) * dig.T3) >> 14;\n\n            // t_fine = var1 + var2;\n            fine = v1 + v2;\n\n            // Page 7, 8\n            // Table 2: Parameter specification\n            //\n            //\n            // Temperature 0.01 °C\n            //\n            // As toFixed(2)\n            //\n            // C = +(((t_fine * 5 + 128) >> 8) / 100).toFixed(resolution)\n            //\n            computed.temperature = ((fine * 5 + 128) >> 8) / 100;\n\n            v1 = undefined;\n            v2 = undefined;\n\n\n            // PRESSURE\n            // Page 23\n            // bmp280_compensate_P_int32\n            //\n            // Every single seemingly arbitrary magic number comes from the datasheet.\n            // Datasheets are evidently written by people that don't care about\n            // anyone else actually understanding how a thing works.\n            //\n\n            // var1 = (((BMP280_S32_t)t_fine)>>1) – (BMP280_S32_t)64000;\n            v1 = Fn.s32(fine >> 1) - 64000;\n\n            // var2 = (((var1>>2) * (var1>>2)) >> 11 ) * ((BMP280_S32_t)dig_P6);\n            v2 = (((v1 >> 2) * (v1 >> 2)) >> 11) * Fn.s32(dig.P6);\n\n            // var2 = var2 + ((var1*((BMP280_S32_t)dig_P5))<<1);\n            v2 += (v1 * Fn.s32(dig.P5)) << 1;\n\n            // var2 = (var2>>2)+(((BMP280_S32_t)dig_P4)<<16);\n            v2 = (v2 >> 2) + (Fn.s32(dig.P4) << 16);\n\n\n            // var1 = (((dig_P3 * (((var1>>2) * (var1>>2)) >> 13 )) >> 3) +\n            //          ((((BMP280_S32_t)dig_P2) * var1)>>1))>>18;\n            v1 = (((dig.P3 * (((v1 >> 2) * (v1 >> 2)) >> 13)) >> 3) + ((Fn.s32(dig.P2) * v1) >> 1)) >> 18;\n\n            // var1 =((((32768+var1))*((BMP280_S32_t)dig_P1))>>15);\n            v1 = (((Fn.POW_2_15 + v1) * Fn.s32(dig.P1)) >> 15);\n\n            if (v1 === 0) {\n              // Prevent division by zero\n              return 0;\n            }\n\n            // p = (((BMP280_U32_t)(((BMP280_S32_t)1048576)-adc_P)-(var2>>12)))*3125;\n            compensated = Fn.u32((Fn.s32(Fn.POW_2_20) - P) - (v2 >> 12)) * 3125;\n\n            if (compensated < Fn.POW_2_31) {\n              // p = (p << 1) / ((BMP280_U32_t)var1);\n              compensated = ((compensated << 1) >>> 0) / Fn.u32(v1);\n            } else {\n              // p = (p / (BMP280_U32_t)var1) * 2;\n              compensated = ((compensated / Fn.u32(v1)) >>> 0) * 2;\n            }\n\n            compensated = Fn.u32(compensated) >>> 0;\n\n            // var1 = (((BMP280_S32_t)dig_P9) * ((BMP280_S32_t)(((p>>3) * (p>>3))>>13)))>>12;\n            var compshift3r = compensated >> 3;\n            v1 = (Fn.s32(dig.P9) * Fn.s32(((compshift3r * compshift3r) >> 13))) >> 12;\n\n            // var2 = (((BMP280_S32_t)(p>>2)) * ((BMP280_S32_t)dig_P8))>>13;\n            v2 = (Fn.s32(compensated >> 2) * dig.P8) >> 13;\n\n            // p = (BMP280_U32_t)((BMP280_S32_t)p + ((var1 + var2 + dig_P7) >> 4));\n            compensated = Fn.u32(Fn.s32(compensated) + ((v1 + v2 + dig.P7) >> 4));\n\n            // Steps of 1Pa (= 0.01hPa = 0.01mbar) (=> 0.001kPa)\n            computed.pressure = compensated;\n\n            // Calculating pressure at sea level (copied from BMP180)\n            var seapress = compensated / Math.pow(1 - elevation * 0.0000225577, 5.255);\n            var altitude = 44330 * (1 - Math.pow(compensated / seapress, 1 / 5.255));\n\n            // Page 3\n            // ...relative accuracy is ±0.12 hPa, which is equivalent to\n            // ±1 m difference in altitude.\n            computed.altitude = Math.round(altitude - offset);\n\n\n            // Page 23, 24\n            // BME280_U32_t bme280_compensate_H_int32(BME280_S32_t adc_H)\n\n            // BME280_S32_t v_x1_u32r;\n            // v_x1_u32r = (t_fine – ((BME280_S32_t)76800));\n            vx = Fn.s32(fine - 76800);\n\n            // v_x1_u32r = (((((adc_H << 14) – (((BME280_S32_t)dig_H4) << 20) – (((BME280_S32_t)dig_H5) * v_x1_u32r)) +\n            // ((BME280_S32_t)16384)) >> 15) * (((((((v_x1_u32r * ((BME280_S32_t)dig_H6)) >> 10) * (((v_x1_u32r * ((BME280_S32_t)dig_H3)) >> 11) + ((BME280_S32_t)32768))) >> 10) + ((BME280_S32_t)2097152)) *\n            // ((BME280_S32_t)dig_H2) + 8192) >> 14));\n\n            vx = (((((H << 14) - Fn.s32(dig.H4 << 20) - (dig.H5 * vx)) + Fn.POW_2_14) >> 15) *\n                  (((((((vx * dig.H6) >> 10) * (((vx * dig.H3) >> 11) + Fn.POW_2_15)) >> 10) + Fn.POW_2_21) * dig.H2 + Fn.POW_2_13) >> 14));\n\n            // v_x1_u32r = (v_x1_u32r - (((((v_x1_u32r >> 15) * (v_x1_u32r >> 15)) >> 7) * ((int32_t)_bme280_calib.dig_H1)) >> 4));\n            vx -= (((((vx >> 15) * (vx >> 15)) >> 7) * Fn.s32(dig.H1) >> 4));\n\n            // v_x1_u32r = (v_x1_u32r < 0 ? 0 : v_x1_u32r);\n            // v_x1_u32r = (v_x1_u32r > 419430400 ? 419430400 : v_x1_u32r);\n            vx = Fn.constrain(vx, 0, 419430400);\n\n            computed.humidity = Fn.u32(vx >> 12);\n\n            this.emit(\"data\", computed);\n          }.bind(this));\n        }.bind(this));\n      }\n    },\n    identifier: {\n      value: function(opts) {\n        var address = opts.address || Drivers.BME280.ADDRESSES.value[0];\n        return \"bme280-\" + address;\n      }\n    }\n  },\n  SI7020: {\n    ADDRESSES: {\n      value: [0x40]\n    },\n    REGISTER: {\n      value: {\n        HUMIDITY: 0xE5,\n        TEMPERATURE: 0xE0,\n      }\n    },\n    initialize: {\n      value: function(board, opts) {\n        var io = board.io;\n        var address = opts.address || this.ADDRESSES[0];\n\n        opts.address = address;\n\n        // The \"no hold\" measurement requires waiting\n        // _at least_ 22ms between register write and\n        // register read. Delay is measured in μs:\n        // 22ms = 22000μs; recommend 50ms = 50000μs\n        opts.delay = 50000;\n\n        io.i2cConfig(opts);\n\n        // Reference\n        // https://www.silabs.com/Support%20Documents/TechnicalDocs/Si7020-A20.pdf\n        // P. 19\n        var computed = {\n          temperature: null,\n          humidity: null,\n        };\n\n        // Despite the registers being back to back, the SI7020\n        // does not like when 5 bytes are requested, so we put\n        // the two data sources on their own read channels.\n        io.i2cRead(address, this.REGISTER.TEMPERATURE, 2, function(data) {\n          computed.temperature = uint16(data[0], data[1]);\n          this.emit(\"data\", computed);\n        }.bind(this));\n\n        io.i2cRead(address, this.REGISTER.HUMIDITY, 2, function(data) {\n          computed.humidity = uint16(data[0], data[1]);\n          this.emit(\"data\", computed);\n        }.bind(this));\n      }\n    },\n    identifier: {\n      value: function(opts) {\n        var address = opts.address || Drivers.SI7020.ADDRESSES.value[0];\n        return \"si7020-\" + address;\n      }\n    },\n  },\n\n  MS5611: {\n    ADDRESSES: {\n      value: [0x77]\n    },\n    REGISTER: {\n      value: {\n        COEFFICIENTS: 0xA2,\n        READ: 0x00,\n        PRESSURE: 0x40,\n        TEMPERATURE: 0x50,\n        RESET: 0x1E,\n      }\n    },\n    initialize: {\n      value: function(board, opts) {\n        var io = board.io;\n        var address = opts.address || this.ADDRESSES[0];\n        var elevation = null;\n        var offset = 0;\n\n\n        if (typeof opts.elevation !== \"undefined\") {\n          elevation = opts.elevation;\n        }\n\n        if ((elevation != null && elevation <= 0) ||\n            elevation == null) {\n          offset = Math.abs(elevation) + 1;\n          elevation = 1;\n        }\n\n        opts.address = address;\n\n        var computed = {\n          altitude: null,\n          pressure: null,\n          temperature: null,\n        };\n\n        /**\n         * http://www.hpinfotech.ro/MS5611-01BA03.pdf\n         *\n         * Page 6\n         *\n         * Startup in I2C Mode\n         *\n         * 1. Reset\n         * 2. Read PROM (128 bits of calibration data)\n         * 3. D1 Conversion\n         * 4. D2 Conversion\n         * 5. Read ADC (24 but pressure/temperature)\n         *\n         *\n         */\n\n        var mode = opts.mode || 5;\n        /*\n        [\n         ULTRA_LOW_POWER\n         LOW_POWER\n         STANDARD\n         HIGH_RES\n         ULTRA_HIGH_RES *\n         ]\n         */\n\n        var kpDelay = [1, 2, 3, 4, 5, 10][mode];\n\n        /**\n         * http://www.hpinfotech.ro/MS5611-01BA03.pdf\n         *\n         * Page 7\n         * Variable, Description | Equation, Type, size, min, max, Example/Typical\n         * C1 Pressure sensitivity | SENST1 unsigned int 16 16 0 65535 40127\n         * C2 Pressure offset | OFFT1 unsigned int 16 16 0 65535 36924\n         * C3 Temperature coefficient of pressure sensitivity | TCS unsigned int 16 16 0 65535 23317\n         * C4 Temperature coefficient of pressure offset | TCO unsigned int 16 16 0 65535 23282\n         * C5 Reference temperature | TREF unsigned int 16 16 0 65535 33464\n         * C6 Temperature coefficient of the temperature | TEMPSENS unsigned int 16 16 0 65535 2\n         *\n         */\n\n        var cof = {\n          C1: null,\n          C2: null,\n          C3: null,\n          C4: null,\n          C5: null,\n          C6: null,\n        };\n\n        var cKeys = Object.keys(cof);\n\n\n        // TODO: confirm this is actually necessary?\n        opts.delay = kpDelay * 1000;\n\n        io.i2cConfig(opts);\n        io.i2cWrite(address, this.REGISTER.RESET);\n\n        var pCoefficients = new Promise(function(resolve) {\n          // First, a small delay is required following the reset...\n          setTimeout(function() {\n            // Next, each coefficient must be read on it's own.\n            var cofs = cKeys.map(function(key, index) {\n              var register = this.REGISTER.COEFFICIENTS + (index * 2);\n              return new Promise(function(resolve) {\n                io.i2cReadOnce(address, register, 2, function(data) {\n                  cof[key] = uint16(data[0], data[1]);\n                  resolve();\n                });\n              });\n            }.bind(this));\n\n            Promise.all(cofs).then(resolve);\n          }.bind(this), 50);\n        }.bind(this));\n\n        pCoefficients.then(function() {\n\n          // http://www.hpinfotech.ro/MS5611-01BA03.pdf\n          // Page 7\n          // Page 8\n          //\n          var cycle = 0;\n          var D1, D2;\n          var dT, TEMP, OFF, SENS, P;\n          var TEMP2, OFF2, SENS2;\n\n          var readCycle = function() {\n\n            // cycle 0: temperature\n            // cycle 1: pressure\n\n            var isTemperatureCycle = cycle === 0;\n            var component = (isTemperatureCycle ? 0x50 : 0x40) + mode;\n\n            io.i2cWrite(address, component);\n\n            if (isTemperatureCycle) {\n              D2 = 0;\n              dT = 0;\n              TEMP = 0;\n              TEMP2 = 0;\n              OFF2 = 0;\n              SENS2 = 0;\n            } else {\n              D1 = 0;\n              OFF = 0;\n              SENS = 0;\n              P = 0;\n            }\n\n            // Once the READ_START register is set,\n            // delay the READ_RESULT request based on the\n            // mode value provided by the user, or default.\n            setTimeout(function() {\n              io.i2cReadOnce(address, this.REGISTER.READ, 3, function(data) {\n\n                if (isTemperatureCycle) {\n                  // TEMPERATURE\n                  D2 = uint24(data[0], data[1], data[2]);\n\n                  // Calculate temperature\n                  // Page 7\n                  // Difference between actual and reference temperature [2]\n                  // dT\n                  //  = D2 - TREF\n                  //  = D2 - C5 * (2 ** 8)\n                  dT = D2 - (cof.C5 * Fn.POW_2_8);\n\n                  // Actual temperature (-40…85°C with 0.01°C resolution)\n                  // TEMP\n                  //  = 20°C + dT * TEMP * SENS\n                  //  = 2000 + dT * C6 / (2 ** 23)\n                  TEMP = 2000 + dT * cof.C6 / Fn.POW_2_23;\n\n                  // SECOND ORDER TEMPERATURE COMPENSATION\n                  // Page 8\n                  // These ridiculous magic numbers come from\n                  // the datasheet. No explanation is given.\n                  //\n                  if (TEMP < 2000) {\n                    TEMP2 = Math.pow(dT, 2) / Fn.POW_2_31;\n                    OFF2 = 5 * Math.pow(TEMP - 2000, 2) / 2;\n                    SENS2 = 5 * Math.pow(TEMP - 2000, 2) / Fn.POW_2_2;\n\n                    if (TEMP < -1500) {\n                      OFF2 = OFF2 + 7 * Math.pow(TEMP + 1500, 2);\n                      SENS2 = SENS2 + 11 * Math.pow(TEMP + 1500, 2) / 2;\n                    }\n                  }\n\n\n                  TEMP -= TEMP2;\n\n                  computed.temperature = TEMP / 100;\n                } else {\n                  // PRESSURE\n                  D1 = uint24(data[0], data[1], data[2]);\n\n                  // Offset at actual temperature [3]\n                  // OFF\n                  //  = OFFT1 +TCO* dT = C2 * (2 ** 16) + (C4 * dT )/ (2 ** 7)\n                  OFF = cof.C2 * Fn.POW_2_16 + (cof.C4 * dT) / Fn.POW_2_7;\n\n                  // Sensitivity at actual temperature [4]\n                  // SENS =SENST1 +TCS* dT= C1 * (2 ** 15) + (C3 * dT )/ (2 ** 8)\n                  SENS = cof.C1 * Fn.POW_2_15 + (cof.C3 * dT) / Fn.POW_2_8;\n\n                  // SECOND ORDER TEMPERATURE COMPENSATION\n                  // Page 8\n                  OFF -= OFF2;\n                  SENS -= SENS2;\n\n                  // Temperature compensated pressure (10…1200mbar with 0.01mbar resolution)\n                  // P = D1 * SENS - OFF = (D1 * SENS / 2 21 - OFF) / 2 15\n                  P = (D1 * SENS / Fn.POW_2_21 - OFF) / Fn.POW_2_15;\n\n                  // Steps of 1Pa (= 0.01hPa = 0.01mbar) (=> 0.001kPa)\n                  computed.pressure = P;\n\n                  // Sea level pressure...\n                  var seapress = P / Math.pow(1 - elevation * 0.0000225577, 5.255);\n                  var altitude = 44330 * (1 - Math.pow(P / seapress, 1 / 5.255));\n\n                  computed.altitude = altitude - offset;\n                }\n\n                if (++cycle === 2) {\n                  cycle = 0;\n                  this.emit(\"data\", computed);\n                }\n\n                readCycle();\n              }.bind(this));\n            }.bind(this), kpDelay);\n          }.bind(this);\n\n          // Kick off \"read loop\"\n          //\n          readCycle();\n        }.bind(this));\n      }\n    },\n    identifier: {\n      value: function(opts) {\n        var address = opts.address || Drivers.MS5611.ADDRESSES.value[0];\n        return \"ms5611-\" + address;\n      }\n    },\n  },\n\n  TH02: {\n    ADDRESSES: {\n      value: [0x40]\n    },\n    COMMAND: {\n      value: {\n        MEASURE_HUMIDITY: 0x01,\n        MEASURE_TEMPERATURE: 0x11,\n      }\n    },\n    REGISTER: {\n      value: {\n        STATUS: 0x00,\n        READ: 0x01,\n        CONFIG: 0x03,\n      }\n    },\n    initialize: {\n      value: function(board, opts) {\n        var io = board.io;\n        var address = opts.address || this.ADDRESSES[0];\n\n        opts.address = address;\n\n        // var cof = {\n        //   // Table 10. Linearization Coefficients\n        //   A0: -4.7844,\n        //   A1:  0.4008,\n        //   A2: -0.00393,\n\n        //   // Table 11. Linearization Coefficients\n        //   Q0: 0.1973,\n        //   Q1: 0.00237,\n        // };\n\n        // var linear = {\n        //   temperature: null,\n        //   humidity: null,\n        // };\n\n        // var actual = {\n        //   temperature: null,\n        //   humidity: null,\n        // };\n\n        var computed = {\n          temperature: null,\n          humidity: null,\n        };\n\n        var cycle = 0;\n\n        io.i2cConfig(\n          Object.assign(opts, {\n            settings: {\n              stopTX: true\n            }\n          })\n        );\n\n        var readCycle = function() {\n          // 1. Determine which data we want to request\n          var isTemperatureCycle = cycle === 0;\n          var command = isTemperatureCycle ?\n            this.COMMAND.MEASURE_TEMPERATURE :\n            this.COMMAND.MEASURE_HUMIDITY;\n\n\n          var conversion = new Promise(function(resolve) {\n            // 2. Send the appropriate measurement/conversion\n            //    command for this read cycle.\n            io.i2cWrite(address, this.REGISTER.CONFIG, command);\n\n            // 3. Await an affirmative status result. This signifies that\n            //    measurement and conversion are complete and values may\n            //    be read from the peripheral register.get\n            //\n            //    Register design like this is really painful to work\n            //    with. These peripherals have ample space to store data\n            //    in different registers, but do not.\n            var requestStatus = function() {\n              io.i2cReadOnce(address, this.REGISTER.STATUS, 1, function(data) {\n                var status = data[0];\n\n                if (!(status & 0x01)) {\n                  resolve();\n                } else {\n                  requestStatus();\n                }\n              });\n            }.bind(this);\n\n            requestStatus();\n          }.bind(this));\n\n          // http://www.seeedstudio.com/wiki/images/3/30/TH02_SENSOR.pdf\n          // Page. 16\n          // http://www.seeedstudio.com/wiki/images/3/30/TH02_SENSOR.pdf\n          // Page. 18\n          //\n          conversion.then(function() {\n            // Both values will be placed in the 0x01 after\n            // the command is received and the measurement taken.\n\n            // The datasheet _SAYS_ read the MSB and LSB from 0x01 and 0x02,\n            // but in reality, reading from 0x01 produces nothing. Trial and\n            // error testing resulted in discovering the correct data located\n            // in 0x02 & 0x03.\n            //\n            // One might assume that we could then read 2 bytes from 0x02,\n            // but that also produces garbage, so in the end we need to read\n            // 3 bytes from 0x01.\n            Promise.all([\n              new Promise(function(resolve) {\n                io.i2cReadOnce(address, 0x01, 1, function(data) {\n                  resolve(data[0]);\n                });\n              }),\n              new Promise(function(resolve) {\n                io.i2cReadOnce(address, 0x02, 1, function(data) {\n                  resolve(data[0]);\n                });\n              })\n            ]).then(function(data) {\n\n              if (isTemperatureCycle) {\n                computed.temperature = ((uint16(data[0], data[1]) >> 2) / 32) - 50;\n              } else {\n                computed.humidity = ((uint16(data[0], data[1]) >> 4) / 16) - 24;\n              }\n\n              if (++cycle === 2) {\n                cycle = 0;\n                this.emit(\"data\", computed);\n              }\n\n              readCycle();\n            }.bind(this));\n          }.bind(this));\n        }.bind(this);\n\n        readCycle();\n      },\n    },\n    identifier: {\n      value: function(opts) {\n        var address = opts.address || Drivers.TH02.ADDRESSES.value[0];\n        return \"th02-\" + address;\n      }\n    }\n  },\n};\n\n// Otherwise known as...\nDrivers.BMP085 = Drivers.BMP180;\nDrivers.GY521 = Drivers.MPU6050;\nDrivers.SI7021 = Drivers.SI7020;\nDrivers.DHT11_I2C_NANO_BACKPACK = Drivers.DHT_I2C_NANO_BACKPACK;\nDrivers.DHT21_I2C_NANO_BACKPACK = Drivers.DHT_I2C_NANO_BACKPACK;\nDrivers.DHT22_I2C_NANO_BACKPACK = Drivers.DHT_I2C_NANO_BACKPACK;\n\n\nDrivers.get = function(board, driverName, opts) {\n  var drivers, driverKey, driver;\n\n  if (!activeDrivers.has(board)) {\n    activeDrivers.set(board, {});\n  }\n\n  opts = opts || {};\n\n  drivers = activeDrivers.get(board);\n  driverKey = Drivers[driverName].identifier.value(opts);\n\n  if (!drivers[driverKey]) {\n    driver = new Emitter();\n    Object.defineProperties(driver, Drivers[driverName]);\n    driver.initialize(board, opts);\n    drivers[driverKey] = driver;\n  }\n\n  return drivers[driverKey];\n};\n\nDrivers.clear = function() {\n  activeDrivers.clear();\n};\n\nvar Controllers = {\n  /**\n   * MPU6050 3-axis Gyro/Accelerometer and Thermometer\n   *\n   * http://playground.arduino.cc/Main/MPU6050\n   */\n\n  MPU6050: {\n    initialize: {\n      value: function(opts) {\n        Components.call(this, \"MPU6050\", opts);\n      }\n    },\n    components: {\n      value: [ACCELEROMETER, GYRO, THERMOMETER]\n    },\n  },\n\n  BNO055: {\n    initialize: {\n      value: function(opts) {\n        var state = priv.get(this);\n        var CONTROLLER = \"BNO055\";\n\n        state.calibrationMask = opts.calibrationMask || 0xC0;\n\n        // here we want to catch the events coming out of the driver and re-emit them\n        // not sure what is cleaner here, picking these up from a data event\n        // in the sub controllers, or this\n        var driver = Drivers.get(this.board, CONTROLLER, opts);\n        driver.on(\"calibrated\", function() {\n          this.emit(\"calibrated\");\n        }.bind(this));\n\n        driver.on(\"calibration\", function(state) {\n          this.emit(\"calibration\", state);\n        }.bind(this));\n\n        Components.call(this, CONTROLLER, opts);\n      }\n    },\n    components: {\n      value: [ACCELEROMETER, GYRO, MAGNETOMETER, ORIENTATION, THERMOMETER]\n    },\n    calibration: {\n      get: function() {\n        return this.orientation.calibration;\n      }\n    },\n    isCalibrated: {\n      get: function() {\n        //returns if the system and all sensors are fully calibrated\n        var calibrationMask = priv.get(this).calibrationMask;\n        return (this.orientation.calibration & calibrationMask) === calibrationMask;\n      }\n    }\n  },\n  MPL115A2: {\n    initialize: {\n      value: function(opts) {\n        Components.call(this, \"MPL115A2\", opts);\n      }\n    },\n    components: {\n      value: [BAROMETER, THERMOMETER]\n    },\n  },\n  SHT31D: {\n    initialize: {\n      value: function(opts) {\n        Components.call(this, \"SHT31D\", opts);\n      }\n    },\n    components: {\n      value: [HYGROMETER, THERMOMETER]\n    },\n  },\n  HTU21D: {\n    initialize: {\n      value: function(opts) {\n        Components.call(this, \"HTU21D\", opts);\n      }\n    },\n    components: {\n      value: [HYGROMETER, THERMOMETER]\n    },\n  },\n  HIH6130: {\n    initialize: {\n      value: function(opts) {\n        Components.call(this, \"HIH6130\", opts);\n      }\n    },\n    components: {\n      value: [HYGROMETER, THERMOMETER]\n    },\n  },\n  DHT_I2C_NANO_BACKPACK: {\n    initialize: {\n      value: function(opts) {\n        Components.call(this, \"DHT_I2C_NANO_BACKPACK\", opts);\n      }\n    },\n    components: {\n      value: [HYGROMETER, THERMOMETER]\n    },\n  },\n  MPL3115A2: {\n    initialize: {\n      value: function(opts) {\n        Components.call(this, \"MPL3115A2\", opts);\n      }\n    },\n    components: {\n      value: [ALTIMETER, BAROMETER, THERMOMETER]\n    },\n  },\n  // This controller and driver pair are used for both\n  // BMP180 and BMP085\n  BMP180: {\n    initialize: {\n      value: function(opts) {\n        Components.call(this, \"BMP180\", opts);\n      }\n    },\n    components: {\n      value: [ALTIMETER, BAROMETER, THERMOMETER]\n    },\n  },\n  BMP280: {\n    initialize: {\n      value: function(opts) {\n        Components.call(this, \"BMP280\", opts);\n      }\n    },\n    components: {\n      value: [ALTIMETER, BAROMETER, THERMOMETER]\n    },\n  },\n  BME280: {\n    initialize: {\n      value: function(opts) {\n        Components.call(this, \"BME280\", opts);\n      }\n    },\n    components: {\n      value: [ALTIMETER, BAROMETER, HYGROMETER, THERMOMETER]\n    },\n  },\n  SI7020: {\n    initialize: {\n      value: function(opts) {\n        Components.call(this, \"SI7020\", opts);\n      }\n    },\n    components: {\n      value: [HYGROMETER, THERMOMETER]\n    },\n  },\n  MS5611: {\n    initialize: {\n      value: function(opts) {\n        Components.call(this, \"MS5611\", opts);\n      }\n    },\n    components: {\n      value: [ALTIMETER, BAROMETER, THERMOMETER]\n    },\n  },\n\n  TH02: {\n    initialize: {\n      value: function(opts) {\n        Components.call(this, \"TH02\", opts);\n      }\n    },\n    components: {\n      value: [HYGROMETER, THERMOMETER]\n    },\n  },\n};\n\n// Otherwise known as...\nControllers.BMP085 = Controllers.BMP180;\nControllers.GY521 = Controllers.MPU6050;\nControllers.SI7021 = Controllers.SI7020;\nControllers.DHT11_I2C_NANO_BACKPACK = Controllers.DHT_I2C_NANO_BACKPACK;\nControllers.DHT21_I2C_NANO_BACKPACK = Controllers.DHT_I2C_NANO_BACKPACK;\nControllers.DHT22_I2C_NANO_BACKPACK = Controllers.DHT_I2C_NANO_BACKPACK;\n\n\nfunction IMU(opts) {\n\n  if (!(this instanceof IMU)) {\n    return new IMU(opts);\n  }\n\n  var controller, state;\n\n  Board.Component.call(\n    this, opts = Board.Options(opts)\n  );\n\n  if (opts.controller && typeof opts.controller === \"string\") {\n    controller = Controllers[opts.controller.toUpperCase()];\n  } else {\n    controller = opts.controller;\n  }\n\n  if (controller == null) {\n    throw new Error(\"Missing IMU/Multi controller\");\n  }\n\n  this.freq = opts.freq || 20;\n\n  state = {};\n  priv.set(this, state);\n\n  Board.Controller.call(this, controller, opts);\n\n  if (typeof this.initialize === \"function\") {\n    this.initialize(opts);\n  }\n\n  // The IMU/Multi isn't considered \"ready\"\n  // until one of the components has notified via\n  // a change event.\n  this.isReady = false;\n\n  setInterval(function() {\n    if (this.isReady) {\n      this.emit(\"data\", this);\n    }\n  }.bind(this), this.freq);\n\n  var awaiting = this.components.slice();\n\n  if (this.components && this.components.length > 0) {\n    this.components.forEach(function(component) {\n      if (!(this[component] instanceof Emitter)) {\n        return;\n      }\n\n      this[component].on(\"change\", function() {\n        if (awaiting.length) {\n          var index = awaiting.indexOf(component);\n\n          if (index !== -1) {\n            awaiting.splice(index, 1);\n          }\n        }\n\n        if (!awaiting.length && !this.isReady) {\n          this.isReady = true;\n        }\n\n        if (this.isReady) {\n          this.emit(\"change\", this, component);\n        }\n      }.bind(this));\n    }, this);\n  }\n}\n\nutil.inherits(IMU, Emitter);\n\nIMU.Drivers = Drivers;\n\n/* istanbul ignore else */\nif (!!process.env.IS_TEST_MODE) {\n  IMU.Controllers = Controllers;\n  IMU.purge = function() {\n    priv.clear();\n  };\n}\n\nmodule.exports = IMU;\n","/home/travis/build/npmtest/node-npmtest-johnny-five/node_modules/johnny-five/lib/orientation.js":"var Emitter = require(\"events\").EventEmitter;\nvar util = require(\"util\");\n\nvar Board = require(\"./board\");\n\nvar priv = new Map();\n\nvar Controllers = {\n\n  BNO055: {\n    initialize: {\n      value: function(opts, dataHandler) {\n        var IMU = require(\"./imu\"),\n          driver = IMU.Drivers.get(this.board, \"BNO055\", opts);\n\n        driver.on(\"data\", function(data) {\n          dataHandler(data);\n        });\n      }\n    },\n    toScaledEuler: {\n      value: function(raw) {\n\n        return {\n          heading: raw.euler.heading / 16,\n          roll: raw.euler.roll / 16,\n          pitch: raw.euler.pitch / 16,\n        };\n      }\n    },\n    toScaledQuarternion: {\n      value: function(raw) {\n        return {\n          w: raw.quarternion.w * (1 / (1 << 14)),\n          x: raw.quarternion.x * (1 / (1 << 14)),\n          y: raw.quarternion.y * (1 / (1 << 14)),\n          z: raw.quarternion.z * (1 / (1 << 14)),\n        };\n      }\n    },\n    calibration: {\n      get: function() {\n        return priv.get(this).calibration;\n      }\n    },\n    isCalibrated: {\n      get: function() {\n        //only returns true if the calibration of the NDOF/Fusion algo is calibrated\n        return ((this.calibration >> 6) & 0x03) === 0x03; //are we fully calibrated\n      }\n    }\n  },\n};\n\n\n/**\n * Orientation\n * @constructor\n *\n * five.Orientation();\n *\n * five.Orientation({\n *  controller: \"BNO055\",\n *  freq: 50,\n * });\n *\n *\n * Device Shorthands:\n *\n * \"BNO055\": new five.Orientation()\n *\n *\n * @param {Object} opts [description]\n *\n */\n\nfunction Orientation(opts) {\n\n  if (!(this instanceof Orientation)) {\n    return new Orientation(opts);\n  }\n\n  Board.Component.call(\n    this, opts = Board.Options(opts)\n  );\n\n  var freq = opts.freq || 25;\n  var controller = null;\n  var raw = null;\n  var state = {\n    euler: {\n      heading: 0,\n      roll: 0,\n      pitch: 0,\n    },\n    quarternion: {\n      w: 0,\n      x: 0,\n      y: 0,\n      z: 0,\n    },\n    calibration: 0,\n  };\n\n  if (opts.controller && typeof opts.controller === \"string\") {\n    controller = Controllers[opts.controller.toUpperCase()];\n  } else {\n    controller = opts.controller;\n  }\n\n  if (controller === null || typeof controller !== \"object\") {\n    throw new Error(\"Missing valid Orientation controller\");\n  }\n\n  Board.Controller.call(this, controller, opts);\n\n  if (!this.toScaledQuarternion) {\n    this.toScaledQuarternion = opts.toScaledQuarternion || function(raw) {\n      return raw;\n    };\n  }\n\n  if (!this.toScaledEuler) {\n    this.toScaledEuler = opts.toScaledEuler || function(raw) {\n      return raw;\n    };\n  }\n\n  priv.set(this, state);\n\n  if (typeof this.initialize === \"function\") {\n    this.initialize(opts, function(data) {\n      raw = data;\n    });\n  }\n\n  setInterval(function() {\n    if (raw === null) {\n      return;\n    }\n    var didOrientationChange = false;\n    var didCalibrationChange = false;\n\n    [\"heading\", \"roll\", \"pitch\"].forEach(function(el) {\n      if (state.euler[el] !== raw.orientation.euler[el]) {\n        didOrientationChange = true;\n      }\n      state.euler[el] = raw.orientation.euler[el];\n    });\n\n    [\"w\", \"x\", \"y\", \"z\"].forEach(function(el) {\n      if (state.quarternion[el] !== raw.orientation.quarternion[el]) {\n        didOrientationChange = true;\n      }\n      state.quarternion[el] = raw.orientation.quarternion[el];\n    });\n\n    //if we have a raw calibration state...\n    // not sure if this is the best place... some devices may not have a calibration state...\n    if (raw.calibration) {\n      if (state.calibration !== raw.calibration) {\n        didCalibrationChange = true;\n      }\n      state.calibration = raw.calibration;\n    }\n\n    var data = {\n      euler: this.euler,\n      quarternion: this.quarternion,\n      calibration: this.calibration\n    };\n\n    this.emit(\"data\", data);\n\n    if (didOrientationChange) {\n      this.emit(\"change\", data);\n    }\n\n    //not sure how we can get this event into other drivers\n    if (didCalibrationChange) {\n      this.emit(\"calibration\", this.calibration);\n    }\n  }.bind(this), freq);\n}\n\n\nutil.inherits(Orientation, Emitter);\n\nObject.defineProperties(Orientation.prototype, {\n  euler: {\n    get: function() {\n      var state = priv.get(this);\n      return this.toScaledEuler(state);\n    }\n  },\n  quarternion: {\n    get: function() {\n      var state = priv.get(this);\n      return this.toScaledQuarternion(state);\n    }\n  }\n});\n\n\nmodule.exports = Orientation;\n","/home/travis/build/npmtest/node-npmtest-johnny-five/node_modules/johnny-five/lib/thermometer.js":"var Emitter = require(\"events\").EventEmitter;\nvar util = require(\"util\");\n\nvar Board = require(\"./board\");\nvar Fn = require(\"./fn\");\n\nvar toFixed = Fn.toFixed;\n\nvar CELSIUS_TO_KELVIN = 273.15;\n\nfunction analogHandler(opts, dataHandler) {\n  var pin = opts.pin;\n\n  this.io.pinMode(pin, this.io.MODES.ANALOG);\n  this.io.analogRead(pin, function(data) {\n    dataHandler.call(this, data);\n  }.bind(this));\n}\n\nvar activeDrivers = new Map();\n\nvar Drivers = {\n  MAX31850K: {\n    initialize: {\n      value: function(board, opts) {\n        var CONSTANTS = {\n            TEMPERATURE_FAMILY: 0x3B,\n            CONVERT_TEMPERATURE_COMMAND: 0x44,\n            READ_SCRATCHPAD_COMMAND: 0xBE,\n            READ_COUNT: 9\n          },\n          pin = opts.pin,\n          freq = opts.freq || 100,\n          getAddress, readTemperature, isConversionAvailable, getAddresses, readOne;\n\n        getAddress = function(device) {\n          // 64-bit device code\n          // device[0]    => Family Code\n          // device[1..6] => Serial Number (device[1] is LSB)\n          // device[7]    => CRC\n          var i, result = 0;\n          for (i = 6; i > 0; i--) {\n            result = result * 256 + device[i];\n          }\n          return result;\n        };\n\n        board.io.sendOneWireConfig(pin, true);\n        board.io.sendOneWireSearch(pin, function(err, devices) {\n          if (err) {\n            this.emit(\"error\", err);\n            return;\n          }\n\n          this.devices = devices.filter(function(device) {\n            return device[0] === CONSTANTS.TEMPERATURE_FAMILY;\n          }, this);\n\n          if (devices.length === 0) {\n            this.emit(\"error\", new Error(\"FAILED TO FIND TEMPERATURE DEVICE\"));\n            return;\n          }\n\n          this.devices.forEach(function(device) {\n            this.emit(\"initialized\", getAddress(device));\n          }.bind(this));\n\n          getAddresses = function() {\n            if (this.addresses) {\n              return this.devices.filter(function(device) {\n                var address = getAddress(device);\n                return this.addresses.includes(address);\n              }, this);\n            } else {\n              return [this.devices[0]];\n            }\n          }.bind(this);\n\n          readTemperature = function() {\n            var devicesToWait, devicesToRead, result;\n\n            // request tempeature conversion\n            devicesToWait = getAddresses();\n            devicesToRead = getAddresses();\n\n            devicesToRead.forEach(function(device) {\n              board.io.sendOneWireReset(pin);\n              board.io.sendOneWireWrite(pin, device, CONSTANTS.CONVERT_TEMPERATURE_COMMAND);\n            });\n\n            isConversionAvailable = function(done) {\n              var nextDevice;\n\n              if (devicesToWait.length === 0) {\n                return done();\n              }\n\n              nextDevice = devicesToWait.pop();\n\n              board.io.sendOneWireReset(pin);\n\n              board.io.sendOneWireWriteAndRead(pin, nextDevice, CONSTANTS.READ_SCRATCHPAD_COMMAND, CONSTANTS.READ_COUNT, function(err, data) {\n                if (!data[0]) {\n                  devicesToWait.push(nextDevice);\n\n                  if (data[1] !== 0) { //*****checks if second data bit is 0, if not its an error and gets thrown out\n                    return done();\n                  }\n                }\n\n                isConversionAvailable(done);\n              });\n            }.bind(this);\n\n            readOne = function() {\n              var device;\n\n              if (devicesToRead.length === 0) {\n                setTimeout(readTemperature, freq);\n                return;\n              }\n\n              device = devicesToRead.pop();\n              // read from the scratchpad\n              board.io.sendOneWireReset(pin);\n\n              board.io.sendOneWireWriteAndRead(pin, device, CONSTANTS.READ_SCRATCHPAD_COMMAND, CONSTANTS.READ_COUNT, function(err, data) {\n                if (err) {\n                  this.emit(\"error\", err);\n                  return;\n                }\n\n                result = (data[1] << 8) | data[0];\n                this.emit(\"data\", getAddress(device), result);\n\n                readOne();\n              }.bind(this));\n            }.bind(this);\n\n            isConversionAvailable(readOne);\n          }.bind(this);\n\n          readTemperature();\n        }.bind(this));\n      }\n    },\n    register: {\n      value: function(address) {\n        if (!this.addresses) {\n          this.addresses = [];\n        }\n\n        this.addresses.push(address);\n      }\n    }\n  },\n  DS18B20: {\n    initialize: {\n      value: function(board, opts) {\n        var CONSTANTS = {\n            TEMPERATURE_FAMILY: 0x28,\n            CONVERT_TEMPERATURE_COMMAND: 0x44,\n            READ_SCRATCHPAD_COMMAND: 0xBE,\n            READ_COUNT: 2\n          },\n          pin = opts.pin,\n          freq = opts.freq || 100,\n          getAddress, readThermometer, readOne;\n\n        getAddress = function(device) {\n          // 64-bit device code\n          // device[0]    => Family Code\n          // device[1..6] => Serial Number (device[1] is LSB)\n          // device[7]    => CRC\n          var i, result = 0;\n          for (i = 6; i > 0; i--) {\n            result = result * 256 + device[i];\n          }\n          return result;\n        };\n\n        board.io.sendOneWireConfig(pin, true);\n        board.io.sendOneWireSearch(pin, function(err, devices) {\n          if (err) {\n            this.emit(\"error\", err);\n            return;\n          }\n\n          this.devices = devices.filter(function(device) {\n            return device[0] === CONSTANTS.TEMPERATURE_FAMILY;\n          }, this);\n\n          if (devices.length === 0) {\n            this.emit(\"error\", new Error(\"FAILED TO FIND TEMPERATURE DEVICE\"));\n            return;\n          }\n\n          this.devices.forEach(function(device) {\n            this.emit(\"initialized\", getAddress(device));\n          }.bind(this));\n\n          readThermometer = function() {\n            var devicesToRead, result;\n\n            // request tempeature conversion\n            if (this.addresses) {\n              devicesToRead = this.devices.filter(function(device) {\n                var address = getAddress(device);\n                return this.addresses.includes(address);\n              }, this);\n            } else {\n              devicesToRead = [this.devices[0]];\n            }\n\n            devicesToRead.forEach(function(device) {\n              board.io.sendOneWireReset(pin);\n              board.io.sendOneWireWrite(pin, device, CONSTANTS.CONVERT_TEMPERATURE_COMMAND);\n            });\n\n            // the delay gives the sensor time to do the calculation\n            board.io.sendOneWireDelay(pin, 1);\n\n            readOne = function() {\n              var device;\n\n              if (devicesToRead.length === 0) {\n                setTimeout(readThermometer, freq);\n                return;\n              }\n\n              device = devicesToRead.pop();\n              // read from the scratchpad\n              board.io.sendOneWireReset(pin);\n\n              board.io.sendOneWireWriteAndRead(pin, device, CONSTANTS.READ_SCRATCHPAD_COMMAND, CONSTANTS.READ_COUNT, function(err, data) {\n                if (err) {\n                  this.emit(\"error\", err);\n                  return;\n                }\n\n                result = (data[1] << 8) | data[0];\n                this.emit(\"data\", getAddress(device), result);\n\n                readOne();\n              }.bind(this));\n            }.bind(this);\n\n            readOne();\n          }.bind(this);\n\n          readThermometer();\n        }.bind(this));\n      }\n    },\n    register: {\n      value: function(address) {\n        if (!this.addresses) {\n          this.addresses = [];\n        }\n\n        this.addresses.push(address);\n      }\n    }\n  }\n};\n\nDrivers.get = function(board, driverName, opts) {\n  var drivers, driver;\n\n  if (!activeDrivers.has(board)) {\n    activeDrivers.set(board, {});\n  }\n\n  drivers = activeDrivers.get(board);\n\n  if (!drivers[driverName]) {\n    driver = new Emitter();\n    Object.defineProperties(driver, Drivers[driverName]);\n    driver.initialize(board, opts);\n    drivers[driverName] = driver;\n  }\n\n  return drivers[driverName];\n};\n\nDrivers.clear = function() {\n  activeDrivers.clear();\n};\n\n// References\n//\nvar Controllers = {\n  // Generic thermistors. See datasheet for each device.\n  ANALOG: {\n    initialize: {\n      value: analogHandler\n    }\n  },\n\n  // http://www.ti.com/lit/ds/symlink/lm35.pdf\n  LM35: {\n    initialize: {\n      value: analogHandler\n    },\n    toCelsius: {\n      value: function(raw) {\n        // VOUT = 1500 mV at 150°C\n        // VOUT = 250 mV at 25°C\n        // VOUT = –550 mV at –55°C\n\n        var mV = this.aref * 1000 * raw / 1023;\n\n        // 10mV = 1°C\n        //\n        // Page 1\n        return Math.round(mV / 10);\n      }\n    }\n  },\n\n  // http://www.ti.com/lit/ds/symlink/lm335.pdf\n  LM335: {\n    initialize: {\n      value: analogHandler\n    },\n    toCelsius: {\n      value: function(raw) {\n        // OUTPUT 10mV/°K\n\n        var mV = this.aref * 1000 * raw / 1023;\n\n        // Page 1\n        return Math.round((mV / 10) - CELSIUS_TO_KELVIN);\n      }\n    }\n  },\n\n  // http://www.analog.com/media/en/technical-documentation/data-sheets/TMP35_36_37.pdf\n  TMP36: {\n    initialize: {\n      value: analogHandler\n    },\n    toCelsius: {\n      value: function(raw) {\n        // Analog Reference Voltage\n        var mV = this.aref * 1000 * raw / 1023;\n\n        // tempC = (mV / 10) - 50\n        // http://ctms.engin.umich.edu/CTMS/Content/Activities/TMP35_36_37.pdf\n        //\n        // Page 3\n        // Table 1\n        // Accuracy 1°C\n        return Math.round((mV / 10) - 50);\n      }\n    }\n  },\n\n  // http://www.ti.com.cn/cn/lit/ds/symlink/tmp102.pdf\n  TMP102: {\n    ADDRESSES: {\n      value: [0x48]\n    },\n    initialize: {\n      value: function(opts, dataHandler) {\n        var address = opts.address || this.ADDRESSES[0];\n\n        opts.address = address;\n\n        this.io.i2cConfig(opts);\n\n        // http://www.ti.com/lit/ds/sbos397b/sbos397b.pdf\n        // Addressing is unclear.\n\n        this.io.i2cRead(address, 0x00, 2, function(data) {\n          // Based on the example code from https://www.sparkfun.com/products/11931\n          var raw = ((data[0] << 8) | data[1]) >> 4;\n\n          // The tmp102 does twos compliment but has the negative bit in the wrong spot, so test for it and correct if needed\n          if (raw & (1 << 11)) {\n            raw |= 0xF800; // Set bits 11 to 15 to 1s to get this reading into real twos compliment\n          }\n\n          // twos compliment\n          raw = raw >> 15 ? ((raw ^ 0xFFFF) + 1) * -1 : raw;\n\n          dataHandler(raw);\n        });\n      }\n    },\n    toCelsius: {\n      value: function(raw) {\n        // 6.5 Electrical Characteristics\n        // –25°C to 85°C ±0.5\n        return toFixed(raw / 16, 1);\n      }\n    },\n  },\n\n  // https://cdn-shop.adafruit.com/datasheets/MAX31850-MAX31851.pdf\n  MAX31850K: {\n    initialize: {\n      value: function(opts, dataHandler) {\n        var state = priv.get(this),\n          address = opts.address,\n          driver = Drivers.get(this.board, \"MAX31850K\", opts);\n\n        if (address) {\n          state.address = address;\n          driver.register(address);\n        } else {\n          if (driver.addressless) {\n            this.emit(\"error\", \"You cannot have more than one MAX31850K without an address\");\n          }\n          driver.addressless = true;\n        }\n\n        driver.once(\"initialized\", function(dataAddress) {\n          if (!state.address) {\n            state.address = dataAddress;\n          }\n        });\n\n        driver.on(\"data\", function(dataAddress, data) {\n          if (!address || dataAddress === address) {\n            dataHandler(data);\n          }\n        }.bind(this));\n      }\n    },\n    toCelsius: {\n      // Page 4\n      // Thermocouple Temperature Data Resolution\n      value: function(raw) {\n        return toFixed(raw / 16, 2);\n      }\n    },\n    address: {\n      get: function() {\n        return priv.get(this).address || 0x00;\n      }\n    }\n  },\n\n  // Based on code from Westin Pigott:\n  //    https://github.com/westinpigott/one-wire-temps\n  // And the datasheet:\n  //    http://datasheets.maximintegrated.com/en/ds/DS18B20.pdf\n  // OneWire protocol.  The device needs to be issued a \"Convert Temperature\"\n  // command which can take up to 10 microseconds to compute, so we need\n  // tell the board to delay 1 millisecond before issuing the \"Read Scratchpad\" command\n  //\n  // This device requires the OneWire support enabled via ConfigurableFirmata\n  DS18B20: {\n    initialize: {\n      value: function(opts, dataHandler) {\n        var state = priv.get(this),\n          address = opts.address,\n          driver = Drivers.get(this.board, \"DS18B20\", opts);\n\n        if (address) {\n          state.address = address;\n          driver.register(address);\n        } else {\n          if (driver.addressless) {\n            this.emit(\"error\", \"You cannot have more than one DS18B20 without an address\");\n          }\n          driver.addressless = true;\n        }\n\n        driver.once(\"initialized\", function(dataAddress) {\n          if (!state.address) {\n            state.address = dataAddress;\n          }\n        });\n\n        driver.on(\"data\", function(dataAddress, data) {\n          if (!address || dataAddress === address) {\n            dataHandler(data);\n          }\n        });\n      }\n    },\n    toCelsius: {\n      value: function(raw) {\n        // DS18B20.pdf, Default\n        // ±0.5°C accuracy from -10°C to +85°C\n        //\n        // Temp resolution is as follows:\n        // 9b,    10b     11b,     12b\n        // 0.5°C, 0.25°C, 0.125°C, 0.0625°C\n        //\n        // I'm not sure which we're reading, so default to 4\n        // fractional digits until we can verify\n        return toFixed(raw / 16, 4);\n      }\n    },\n    address: {\n      get: function() {\n        return priv.get(this).address || 0x00;\n      }\n    }\n  },\n\n  // https://cdn-shop.adafruit.com/product-files/2857/Sensirion_Humidity_SHT3x_Datasheet_digital-767294.pdf\n  SHT31D: {\n    initialize: {\n      value: function(opts, dataHandler) {\n        var Multi = require(\"./imu\");\n        var driver = Multi.Drivers.get(this.board, \"SHT31D\", opts);\n        driver.on(\"data\", function(data) {\n          dataHandler(data.temperature);\n        });\n      }\n    },\n    toCelsius: {\n      value: function(raw) {\n        // Page 4\n        // Table 1.2 Temperature Sensor Performance\n        // Resolution: 0.015\n        //\n        // Page 14\n        // 4.13 Conversion of Signal Output\n        // T[C] = -45 + 175 * (St / ((2 ** 26) - 1))\n        // St = Sensor raw temperature\n        return toFixed((175 * raw / 65535) - 45, 3);\n      }\n    }\n  },\n\n  // https://www.adafruit.com/datasheets/1899_HTU21D.pdf\n  HTU21D: {\n    initialize: {\n      value: function(opts, dataHandler) {\n        var Multi = require(\"./imu\");\n        var driver = Multi.Drivers.get(this.board, \"HTU21D\", opts);\n        driver.on(\"data\", function(data) {\n          dataHandler(data.temperature);\n        });\n      }\n    },\n    toCelsius: {\n      value: function(raw) {\n        // Page 5\n        // Digital Relative Humidity sensor with Temperature output\n        // Resolution shows 0.01-0.04\n        //\n        // Page 15\n        // CONVERSION OF SIGNAL OUTPUTS\n        // T = -46.85 + 175.72 * (Stemp / (2 ** 16))\n        // Stemp = Sensor raw temperature\n        return toFixed((175.72 * raw / 65536) - 46.85, 2);\n      }\n    }\n  },\n  // http://www.phanderson.com/arduino/I2CCommunications.pdf\n  // http://cdn.sparkfun.com/datasheets/Prototyping/1443945.pdf\n  HIH6130: {\n    initialize: {\n      value: function(opts, dataHandler) {\n        var Multi = require(\"./imu\");\n        var driver = Multi.Drivers.get(this.board, \"HIH6130\", opts);\n        driver.on(\"data\", function(data) {\n          dataHandler(data.temperature);\n        });\n      }\n    },\n    toCelsius: {\n      value: function(raw) {\n        // Page 3\n        // 5.0 Calculation of Optional Temperature\n        // from the Digital Output\n        //\n        // -40 C = 0\n        // 125 C = 2 ** 14 - 1\n        return Math.round(raw / 1000);\n      }\n    }\n  },\n\n  // http://akizukidenshi.com/download/ds/aosong/DHT11.pdf\n  DHT_I2C_NANO_BACKPACK: {\n    initialize: {\n      value: function(opts, dataHandler) {\n        var Multi = require(\"./imu\");\n        var driver = Multi.Drivers.get(this.board, \"DHT_I2C_NANO_BACKPACK\", opts);\n        driver.on(\"data\", function(data) {\n          dataHandler(data.temperature);\n        });\n      }\n    },\n    toCelsius: {\n      value: function(raw) {\n        // Page 2\n        // 5. Product parameters\n        // Range: ... ±2°C\n        return Math.round(raw / 100);\n      }\n    }\n  },\n\n  // http://www.seeedstudio.com/wiki/images/3/30/TH02_SENSOR.pdf\n  TH02: {\n    initialize: {\n      value: function(opts, dataHandler) {\n        var Multi = require(\"./imu\");\n        var driver = Multi.Drivers.get(this.board, \"TH02\", opts);\n        driver.on(\"data\", function(data) {\n          dataHandler(data.temperature);\n        });\n      }\n    },\n    toCelsius: {\n      value: function(raw) {\n        // Page 8\n        // Table 5. Temperature Sensor\n        // Accuracy Typical at 25 °C — ±0.5 ±1.0 °C\n        return toFixed(raw, 1);\n      }\n    }\n  },\n\n  // https://cdn.sparkfun.com/datasheets/Components/General%20IC/PS-MPU-6000A.pdf\n  MPU6050: {\n    initialize: {\n      value: function(opts, dataHandler) {\n        var IMU = require(\"./imu\");\n        var driver = IMU.Drivers.get(this.board, \"MPU6050\", opts);\n        driver.on(\"data\", function(data) {\n          dataHandler(data.temperature);\n        });\n      }\n    },\n    toCelsius: {\n      value: function(raw) {\n        // No sub-degree/fractional parts illustrated in datasheet\n        return Math.round((raw / 340.00) + 36.53);\n      }\n    }\n  },\n\n  // https://cdn-shop.adafruit.com/datasheets/BST_BNO055_DS000_12.pdf\n  BNO055: {\n    initialize: {\n      value: function(opts, dataHandler) {\n        var IMU = require(\"./imu\");\n        var driver = IMU.Drivers.get(this.board, \"BNO055\", opts);\n        driver.on(\"data\", function(data) {\n          dataHandler(data.temperature);\n        });\n      }\n    },\n    toCelsius: {\n      value: function(raw) {\n        // Page 37\n        // Table 3-37: Temperature data representation\n        // 1°C = 1 LSB\n        // raw is already C\n        return Math.trunc(raw);\n      }\n    }\n  },\n\n  // http://cache.freescale.com/files/sensors/doc/data_sheet/MPL115A2.pdf\n  MPL115A2: {\n    initialize: {\n      value: function(opts, dataHandler) {\n        var Multi = require(\"./imu\");\n        var driver = Multi.Drivers.get(this.board, \"MPL115A2\", opts);\n        driver.on(\"data\", function(data) {\n          dataHandler(data.temperature);\n        });\n      }\n    },\n    toCelsius: {\n      value: function(raw) {\n        // No description, so removing fractional parts\n        return Math.trunc((raw - 498) / -5.35 + 25);\n      }\n    }\n  },\n\n  // http://www.nxp.com/files/sensors/doc/data_sheet/MPL3115A2.pdf\n  MPL3115A2: {\n    initialize: {\n      value: function(opts, dataHandler) {\n        var Multi = require(\"./imu\");\n        var driver = Multi.Drivers.get(this.board, \"MPL3115A2\", opts);\n        driver.on(\"data\", function(data) {\n          dataHandler(data.temperature);\n        });\n      }\n    },\n    toCelsius: {\n      value: function(raw) {\n        // Page 5\n        // Table 2 Mechanical Characteristics\n        //  Accuracy @ 25 °C ±1°C\n        return Math.round(raw / 16);\n      }\n    }\n  },\n\n  // http://www.hpinfotech.ro/MS5611-01BA03.pdf\n  MS5611: {\n    initialize: {\n      value: function(opts, dataHandler) {\n        var Multi = require(\"./imu\");\n        var driver = Multi.Drivers.get(this.board, \"MS5611\", opts);\n        driver.on(\"data\", function(data) {\n          dataHandler(data.temperature);\n        });\n      }\n    },\n    toCelsius: {\n      value: function(raw) {\n        // Page 1\n        // TECHNICAL DATA\n        // Resolution <0.01 °C\n        return toFixed(raw, 2);\n      }\n    }\n  },\n\n  GROVE: {\n    initialize: {\n      value: analogHandler\n    },\n    toCelsius: {\n      value: function(raw) {\n        // http://www.seeedstudio.com/wiki/Grove_-_Temperature_Sensor\n        var adcres = 1023;\n        // Beta parameter\n        var beta = 3975;\n        // 10 kOhm (sensor resistance)\n        var rb = 10000;\n        // Ginf = 1/Rinf\n        // var ginf = 120.6685;\n        // Reference Temperature 25°C\n        var tempr = 298.15;\n\n        var rthermistor = (adcres - raw) * rb / raw;\n        var tempc = 1 / (Math.log(rthermistor / rb) / beta + 1 / tempr) - CELSIUS_TO_KELVIN;\n\n        return Math.round(tempc);\n      }\n    }\n  },\n\n  // http://www.cantherm.com/media/productPDF/cantherm_mf52_1.pdf\n  // MF52A103J3470\n  TINKERKIT: {\n    initialize: {\n      value: analogHandler\n    },\n    toCelsius: {\n      value: function(raw) {\n        var adcres = 1023;\n        var beta = 3950;\n        var rb = 10000; // 10 kOhm\n        var ginf = 120.6685; // Ginf = 1/Rinf\n\n        var rthermistor = rb * (adcres / raw - 1);\n        var tempc = beta / (Math.log(rthermistor * ginf));\n\n        return Math.round(tempc - CELSIUS_TO_KELVIN);\n      }\n    }\n  },\n\n  // https://cdn-shop.adafruit.com/datasheets/BST-BMP180-DS000-09.pdf\n  BMP180: {\n    initialize: {\n      value: function(opts, dataHandler) {\n        var Multi = require(\"./imu\");\n        var driver = Multi.Drivers.get(this.board, \"BMP180\", opts);\n        driver.on(\"data\", function(data) {\n          dataHandler(data.temperature);\n        });\n      }\n    },\n    toCelsius: {\n      value: function(raw) {\n        // Page 6\n        // Table 1: Operating conditions, output signal and mechanical characteristics\n        //\n        // Resolution of output data\n        // pressure 0.01 hPa\n        // temperature 0.1 °C\n        return toFixed(raw, 1);\n      }\n    }\n  },\n\n  // https://cdn-shop.adafruit.com/datasheets/BST-BMP280-DS001-11.pdf\n  BMP280: {\n    initialize: {\n      value: function(opts, dataHandler) {\n        var Multi = require(\"./imu\");\n        var driver = Multi.Drivers.get(this.board, \"BMP280\", opts);\n        driver.on(\"data\", function(data) {\n          dataHandler(data.temperature);\n        });\n      }\n    },\n    toCelsius: {\n      value: function(raw) {\n        // Page 8\n        //\n        // Resolution of output data in ultra high resolution mode*\n        // Pressure 0.0016 hPa\n        // Temperature 0.01 °C\n        //\n        // * resolution mode is currently not configurable.\n        //\n        return toFixed(raw, 2);\n      }\n    }\n  },\n\n  // https://cdn.sparkfun.com/assets/learn_tutorials/4/1/9/BST-BME280_DS001-10.pdf\n  BME280: {\n    initialize: {\n      value: function(opts, dataHandler) {\n        var Multi = require(\"./imu\");\n        var driver = Multi.Drivers.get(this.board, \"BME280\", opts);\n        driver.on(\"data\", function(data) {\n          dataHandler(data.temperature);\n        });\n      }\n    },\n    toCelsius: {\n      value: function(raw) {\n        // Page 23\n        // Resolution is 0.01 DegC.\n        return toFixed(raw, 2);\n      }\n    }\n  },\n\n  // https://www.silabs.com/Support%20Documents/TechnicalDocs/Si7020-A20.pdf\n  SI7020: {\n    initialize: {\n      value: function(opts, dataHandler) {\n        var Multi = require(\"./imu\");\n        var driver = Multi.Drivers.get(this.board, \"SI7020\", opts);\n        driver.on(\"data\", function(data) {\n          dataHandler(data.temperature);\n        });\n      }\n    },\n    toCelsius: {\n      value: function(raw) {\n        // Page 9\n        // Table 5. Temperature Sensor\n        // Accuracy1 –10 °C< tA < 85 °C — ±0.3 ±0.4 °C\n        //\n        // Page 23\n        // (See temperature conversion expression)\n        return toFixed((175.72 * raw / 65536) - 46.85, 1);\n      }\n    }\n  },\n\n  // http://ww1.microchip.com/downloads/en/DeviceDoc/25095A.pdf\n  MCP9808: {\n    ADDRESSES: {\n      value: [0x18]\n    },\n    initialize: {\n      value: function(opts, dataHandler) {\n        var address = opts.address || this.ADDRESSES[0];\n\n        opts.address = address;\n\n        this.io.i2cConfig(opts);\n        // Page 17\n        // Register 0x05 = Ta (Temp, Ambient)\n        this.io.i2cRead(address, 0x05, 2, function(data) {\n          // Page 24\n          // 5.1.3 AMBIENT TEMPERATURE REGISTER (TA)\n          var raw = (data[0] << 8) | data[1];\n\n          // Page 25\n          raw = (raw & 0x0FFF) / 16;\n\n          if (raw & 0x1000) {\n            raw -= 256;\n          }\n          dataHandler(raw);\n        });\n      }\n    },\n    toCelsius: {\n      value: function(raw) {\n        // Page 1\n        // Microchip Technology Inc.s MCP9808 digital\n        // temperature sensor converts temperatures between\n        // -20°C and +100°C to a digital word with\n        // ±0.25°C/±0.5°C (typical/maximum) accuracy.\n        return toFixed(raw, 2);\n      }\n    },\n  },\n};\n\nControllers.BMP085 = Controllers.BMP180;\nControllers.GY521 = Controllers.MPU6050;\nControllers.SI7021 = Controllers.SI7020;\nControllers.DHT11_I2C_NANO_BACKPACK = Controllers.DHT_I2C_NANO_BACKPACK;\nControllers.DHT21_I2C_NANO_BACKPACK = Controllers.DHT_I2C_NANO_BACKPACK;\nControllers.DHT22_I2C_NANO_BACKPACK = Controllers.DHT_I2C_NANO_BACKPACK;\n\n\nvar priv = new Map();\n\nfunction Thermometer(opts) {\n\n  if (!(this instanceof Thermometer)) {\n    return new Thermometer(opts);\n  }\n\n  var controller = null;\n  var last = null;\n  var raw = null;\n\n  Board.Component.call(\n    this, opts = Board.Options(opts)\n  );\n\n  var freq = opts.freq || 25;\n\n  // Analog Reference Voltage (default to board.io.aref || 5)\n  this.aref = opts.aref || this.io.aref || 5;\n\n  if (opts.controller && typeof opts.controller === \"string\") {\n    controller = Controllers[opts.controller.toUpperCase()];\n  } else {\n    controller = opts.controller;\n  }\n\n  if (controller == null) {\n    controller = Controllers.ANALOG;\n  }\n\n  priv.set(this, {});\n\n  Board.Controller.call(this, controller, opts);\n\n  if (!this.toCelsius) {\n    this.toCelsius = opts.toCelsius || function(x) {\n      return x;\n    };\n  }\n\n  var descriptors = {\n    celsius: {\n      get: function() {\n        return this.toCelsius(raw);\n      }\n    },\n    fahrenheit: {\n      get: function() {\n        return toFixed((this.celsius * 9 / 5) + 32, 2);\n      }\n    },\n    kelvin: {\n      get: function() {\n        return toFixed(this.celsius + CELSIUS_TO_KELVIN, 2);\n      }\n    }\n  };\n  // Convenience aliases\n  descriptors.C = descriptors.celsius;\n  descriptors.F = descriptors.fahrenheit;\n  descriptors.K = descriptors.kelvin;\n\n  Object.defineProperties(this, descriptors);\n\n  if (typeof this.initialize === \"function\") {\n    this.initialize(opts, function(data) {\n      raw = data;\n    });\n  }\n\n  setInterval(function() {\n    if (raw == null) {\n      return;\n    }\n\n    var data = {};\n    data.C = data.celsius = this.celsius;\n    data.F = data.fahrenheit = this.fahrenheit;\n    data.K = data.kelvin = this.kelvin;\n\n    this.emit(\"data\", data);\n\n    if (this.celsius !== last) {\n      last = this.celsius;\n      this.emit(\"change\", data);\n    }\n  }.bind(this), freq);\n}\n\nutil.inherits(Thermometer, Emitter);\n\nThermometer.Drivers = Drivers;\n\n/* istanbul ignore else */\nif (!!process.env.IS_TEST_MODE) {\n  Thermometer.Controllers = Controllers;\n  Thermometer.purge = function() {\n    priv.clear();\n  };\n}\n\nmodule.exports = Thermometer;\n","/home/travis/build/npmtest/node-npmtest-johnny-five/node_modules/johnny-five/lib/keypad.js":"var Emitter = require(\"events\").EventEmitter;\nvar util = require(\"util\");\nvar Board = require(\"./board\");\nvar Fn = require(\"./fn\");\n\nvar scale = Fn.scale;\nvar toFixed = Fn.toFixed;\nvar uint16 = Fn.uint16;\n\nvar priv = new Map();\n\nvar aliases = {\n  down: [\"down\", \"press\", \"tap\", \"impact\", \"hit\", \"touch\"],\n  up: [\"up\", \"release\"],\n  hold: [\"hold\"]\n};\n\nfunction flatKeys(opts) {\n  var keys = [];\n\n  if (opts.keys && Array.isArray(opts.keys)) {\n    keys = opts.keys.slice();\n\n    if (keys.every(Array.isArray)) {\n      keys = keys.reduce(function(accum, row) {\n        return accum.concat(row);\n      }, []);\n    }\n  }\n\n  return keys;\n}\n\n// TODO:\n//\n// Provide a mechanism for explicitly naming aliases for buttons\n//\n//\nvar Controllers = {\n  MPR121: {\n    ADDRESSES: {\n      value: [0x5A, 0x5B, 0x5C, 0x5D]\n    },\n    REGISTER: {\n      value: require(\"./definitions/mpr121.js\")\n    },\n    initialize: {\n      value: function(opts, dataHandler) {\n\n        var state = priv.get(this);\n        var address = opts.address || this.ADDRESSES[0];\n        var keys = flatKeys(opts);\n        var keyMap = this.REGISTER.MAPS[opts.controller].KEYS;\n        var targets = this.REGISTER.MAPS[opts.controller].TARGETS;\n        var mapping = Object.keys(keyMap).reduce(function(accum, index) {\n          accum[index] = keyMap[index];\n          return accum;\n        }, []);\n\n        var length = mapping.length;\n        opts.address = address;\n\n        this.io.i2cConfig(opts);\n\n        this.io.i2cWrite(address, this.REGISTER.MPR121_SOFTRESET, 0x63);\n\n        this.io.i2cWrite(address, this.REGISTER.MHD_RISING, 0x01);\n        this.io.i2cWrite(address, this.REGISTER.NHD_AMOUNT_RISING, 0x01);\n        this.io.i2cWrite(address, this.REGISTER.NCL_RISING, 0x00);\n        this.io.i2cWrite(address, this.REGISTER.FDL_RISING, 0x00);\n\n        this.io.i2cWrite(address, this.REGISTER.MHD_FALLING, 0x01);\n        this.io.i2cWrite(address, this.REGISTER.NHD_AMOUNT_FALLING, 0x01);\n        this.io.i2cWrite(address, this.REGISTER.NCL_FALLING, 0xFF);\n        this.io.i2cWrite(address, this.REGISTER.FDL_FALLING, 0x02);\n\n        // https://www.sparkfun.com/datasheets/Components/MPR121.pdf\n        //\n        // p. 12\n        //\n        // 6. Touch and Release Threshold (0x41~0x5A)\n        // The threshold is defined as a deviation value from the baseline value,\n        // so it remains constant even baseline value changes. Typically the touch\n        // threshold is a little bigger than the release threshold to touch debounce\n        // and hysteresis. The range of the value is 0~255. For typical touch\n        // application, the value can be in range 0x05~0x30 for example. The setting\n        // of the threshold is depended on the actual application. For the operation\n        // details and how to set the threshold refer to application note AN3892 and\n        // MPR121 design guidelines.\n\n        this.sensitivity = {\n          // Inverted map approximately to 8 bit values:\n          //\n          // press: 12\n          // release: 6\n          //\n          press: Array(12).fill(0.95),\n          release: Array(12).fill(0.975),\n          // These defaults as based on the defaults shown\n          // in examples published by Adafruit\n          // https://github.com/adafruit/Adafruit_MPR121/blob/master/Adafruit_MPR121.cpp#L43\n        };\n\n        // If keys were specified for a MPR121_SHIELD (adafruit shield),\n        // then reverse the keys to align with the output of the.\n        if (opts.keys && opts.controller === \"MPR121_SHIELD\") {\n          keys = keys.reverse();\n        }\n\n        if (opts.sensitivity) {\n          if (Array.isArray(opts.sensitivity)) {\n            // Initialized as:\n            //\n            // new five.Keypad({\n            //   controller: \"MPR121\",\n            //   sensitivity: [\n            //     { press: 0-1, release: 0-1, },\n            //     { press: 0-1, release: 0-1, },\n            //     { press: 0-1, release: 0-1, },\n            //     ...\n            //   ],\n            // });\n            //\n            opts.sensitivity.forEach(function(sensitivity, index) {\n              if (typeof sensitivity.press !== \"undefined\") {\n                this.sensitivity.press[index] = sensitivity.press;\n              }\n\n              if (typeof sensitivity.release !== \"undefined\") {\n                this.sensitivity.release[index] = sensitivity.release;\n              }\n            }, this);\n          } else {\n            // Initialized as:\n            //\n            // new five.Keypad({\n            //   controller: \"MPR121\",\n            //   sensitivity: {\n            //     press: 0-1,\n            //     release: 0-1,\n            //   },\n            // });\n            //\n            if (typeof opts.sensitivity.press !== \"undefined\") {\n              this.sensitivity.press.fill(opts.sensitivity.press);\n            }\n\n            if (typeof opts.sensitivity.release !== \"undefined\") {\n              this.sensitivity.release.fill(opts.sensitivity.release);\n            }\n          }\n        }\n\n        // The chip expects a LOWER value for a HIGHER sensitivity.\n        // Most people don't think this way, so Johnny-Five aligns with\n        // user/developer intuition, which we assume for this case is:\n        //\n        //  \"Higher sensitivity value means greater touch sensitivity\"\n        //\n        // This means that the value we received needs to be inverted\n        // before it's written to the chip threshold configuration.\n        //\n        for (var i = 0; i < 12; i++) {\n          this.io.i2cWrite(\n            address,\n            this.REGISTER.ELE0_TOUCH_THRESHOLD + (i << 1),\n            scale(toFixed(1 - this.sensitivity.press[i], 3), 0, 1, 0, 255)\n          );\n          this.io.i2cWrite(\n            address,\n            this.REGISTER.ELE0_RELEASE_THRESHOLD + (i << 1),\n            scale(toFixed(1 - this.sensitivity.release[i], 3), 0, 1, 0, 255)\n          );\n        }\n\n        this.io.i2cWrite(address, this.REGISTER.FILTER_CONFIG, 0x13);\n        this.io.i2cWrite(address, this.REGISTER.AFE_CONFIGURATION, 0x80);\n\n        this.io.i2cWrite(address, this.REGISTER.AUTO_CONFIG_CONTROL_0, 0x8F);\n        this.io.i2cWrite(address, this.REGISTER.AUTO_CONFIG_USL, 0xE4);\n        this.io.i2cWrite(address, this.REGISTER.AUTO_CONFIG_LSL, 0x94);\n        this.io.i2cWrite(address, this.REGISTER.AUTO_CONFIG_TARGET_LEVEL, 0xCD);\n\n        this.io.i2cWrite(address, this.REGISTER.ELECTRODE_CONFIG, 0xCC);\n\n        if (!keys.length) {\n          keys = Array.from(Object.assign({}, keyMap, {\n            length: length\n          }));\n        }\n\n        state.length = length;\n        state.touches = touches(length);\n        state.keys = keys;\n        state.mapping = mapping;\n        state.targets = targets;\n        state.isMultitouch = true;\n\n        this.io.i2cRead(address, 0x00, 2, function(bytes) {\n          dataHandler(uint16(bytes[1], bytes[0]));\n        });\n      }\n    },\n    toAlias: {\n      value: function(index) {\n        var state = priv.get(this);\n        return state.keys[index];\n      }\n    },\n    toIndices: {\n      value: function(raw) {\n        var state = priv.get(this);\n        var indices = [];\n        for (var i = 0; i < 12; i++) {\n          if (raw & (1 << i)) {\n            indices.push(state.targets[raw & (1 << i)]);\n          }\n        }\n        return indices;\n      }\n    },\n  },\n\n  // https://learn.sparkfun.com/tutorials/vkey-voltage-keypad-hookup-guide\n  VKEY: {\n    initialize: {\n      value: function(opts, dataHandler) {\n        var state = priv.get(this);\n        var aref = opts.aref || this.io.aref || 5;\n        var use5V = Fn.inRange(aref, 4.5, 5.5);\n        var keys = flatKeys(opts);\n        var mapping = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12];\n        var length = 0;\n\n        if (!keys.length) {\n          keys = mapping;\n        }\n\n        state.scale = [\n          use5V ? 17 : 26,\n          use5V ? 40 : 58,\n          use5V ? 496 : 721,\n        ];\n\n        length = mapping.length;\n        state.length = length;\n        state.touches = touches(length);\n        state.mapping = mapping;\n        state.keys = keys;\n        state.isMultitouch = false;\n\n        this.io.pinMode(this.pin, this.io.MODES.ANALOG);\n        this.io.analogRead(this.pin, function(adc) {\n          dataHandler(adc);\n        }.bind(this));\n      },\n    },\n    toAlias: {\n      value: function(index) {\n        var state = priv.get(this);\n        return state.keys[index];\n      }\n    },\n    toIndices: {\n      value: function(raw) {\n        var state = priv.get(this);\n        var length = state.length;\n        var low = state.scale[0];\n        var step = state.scale[1];\n        var high = state.scale[2];\n\n        if (raw < low || raw > high) {\n          return [];\n        }\n\n        return [(length - ((raw - low) / step)) | 0];\n      }\n    }\n  },\n\n  // WaveShare AD\n  //  - http://www.amazon.com/WaveShare-Accessory-buttons-controlled-keyboard/dp/B00KM6UXVS\n  //  - http://www.wvshare.com/product/A_D-Keypad.htm\n  //\n  //  TODO: Create docs to show how to create a DIY keypad\n  //        that works with this class.\n  //\n  ANALOG: {\n    initialize: {\n      value: function(opts, dataHandler) {\n\n        var keys = flatKeys(opts);\n        var mapping = [];\n        var length = 0;\n\n        if (opts.length && !keys.length) {\n          keys = Array.from({\n            length: opts.length\n          }, function(_, key) {\n            return key;\n          });\n        }\n\n        if (!keys.length) {\n          throw new Error(\n            \"Missing `keys`. Analog Keypad requires either a numeric `length` or a `keys` array.\"\n          );\n        }\n\n        mapping = keys;\n        length = mapping.length;\n\n        var state = priv.get(this);\n        // keys + Idle state == length + 1\n        var total = length + 1;\n        var vrange = Math.round(1023 / total);\n        var ranges = Array.from({\n          length: total\n        }, function(_, index) {\n          var start = vrange * index;\n          return Array.from({\n            length: vrange - 1\n          }, function(_, index) {\n            return start + index;\n          });\n        });\n\n        state.length = length;\n        state.ranges = ranges;\n        state.touches = touches(length);\n        state.mapping = mapping;\n        state.keys = keys;\n        state.isMultitouch = true;\n\n        this.io.pinMode(this.pin, this.io.MODES.ANALOG);\n        this.io.analogRead(this.pin, function(adc) {\n          dataHandler(adc);\n        });\n      }\n    },\n    toAlias: {\n      value: function(index) {\n        var state = priv.get(this);\n        return state.keys[index];\n      }\n    },\n    toIndices: {\n      value: function(raw) {\n        var state = priv.get(this);\n        var ranges = state.ranges;\n        var index = ranges.findIndex(function(range) {\n          return range.includes(raw);\n        });\n\n        if (index === state.length) {\n          index--;\n        }\n\n        if (index < 0) {\n          return [];\n        }\n\n        return [index];\n      }\n    }\n  },\n  AT42QT1070: {\n    ADDRESSES: {\n      value: [0x1B]\n    },\n    REGISTER: {\n      value: {\n        READ: 0x03\n      }\n    },\n    initialize: {\n      value: function(opts, dataHandler) {\n        var state = priv.get(this);\n        var address = opts.address || this.ADDRESSES[0];\n        var keys = flatKeys(opts);\n        var mapping = [0, 1, 2, 3, 4, 5, 6];\n        var length = 0;\n\n        if (!keys.length) {\n          keys = mapping;\n        }\n\n        length = mapping.length;\n\n        state.length = length;\n        state.touches = touches(length);\n        state.mapping = mapping;\n        state.keys = keys;\n        state.isMultitouch = true;\n\n        this.io.i2cConfig(opts);\n        this.io.i2cRead(address, this.REGISTER.READ, 1, function(data) {\n          dataHandler(data[0]);\n        });\n      }\n    },\n    toAlias: {\n      value: function(index) {\n        var state = priv.get(this);\n        return state.keys[index];\n      }\n    },\n    toIndices: {\n      value: function(raw) {\n        var indices = [];\n        for (var i = 0; i < 7; i++) {\n          if (raw & (1 << i)) {\n            indices.push(i);\n          }\n        }\n        return indices;\n      }\n    }\n  },\n\n  \"3X4_I2C_NANO_BACKPACK\": {\n    ADDRESSES: {\n      value: [0x0A, 0x0B, 0x0C, 0x0D]\n    },\n    initialize: {\n      value: function(opts, dataHandler) {\n        var state = priv.get(this);\n        var address = opts.address || this.ADDRESSES[0];\n        var keys = flatKeys(opts);\n        var mapping = [1, 2, 3, 4, 5, 6, 7, 8, 9, \"*\", 0, \"#\"];\n        var length = 0;\n\n        if (!keys.length) {\n          keys = mapping;\n        }\n\n        length = mapping.length;\n\n        state.length = length;\n        state.touches = touches(length);\n        state.mapping = mapping;\n        state.keys = keys;\n        state.isMultitouch = true;\n\n        opts.address = address;\n\n        this.io.i2cConfig(opts);\n        this.io.i2cRead(address, 2, function(bytes) {\n          dataHandler(uint16(bytes[0], bytes[1]));\n        });\n      }\n    },\n    toAlias: {\n      value: function(index) {\n        var state = priv.get(this);\n        return state.keys[index];\n      }\n    },\n    toIndices: {\n      value: function(raw) {\n        var state = priv.get(this);\n        var indices = [];\n        for (var i = 0; i < state.length; i++) {\n          if (raw & (1 << i)) {\n            indices.push(i);\n          }\n        }\n        return indices;\n      }\n    }\n  },\n  SX1509: {\n    ADDRESSES: {\n      value: [0x0A, 0x0B, 0x0C, 0x0D]\n    },\n    REGISTER: {\n      value: {\n        PULLUP: 0x03,\n        OPEN_DRAIN: 0x05,\n        DIR: 0x07,\n        DIR_B: 0x0E,\n        DIR_A: 0x0F,\n        // OPEN_DRAIN_B: 0x0E,\n        // OPEN_DRAIN_A: 0x0F,\n      },\n    },\n    initialize: {\n      value: function(opts, dataHandler) {\n        var state = priv.get(this);\n        var address = opts.address || this.ADDRESSES[0];\n        var keys = flatKeys(opts);\n        var mapping = [1, 2, 3, 4, 5, 6, 7, 8, 9, \"*\", 0, \"#\"];\n        var length = 0;\n\n        if (!keys.length) {\n          keys = mapping;\n        }\n\n        length = mapping.length;\n\n        state.length = length;\n        state.touches = touches(length);\n        state.mapping = mapping;\n        state.keys = keys;\n        state.isMultitouch = true;\n\n        opts.address = address;\n\n        this.io.i2cConfig(opts);\n\n        this.io.i2cWriteReg(address, this.REGISTER.DIR, 0xF0);\n        this.io.i2cWriteReg(address, this.REGISTER.OPEN_DRAIN, 0x0F);\n        this.io.i2cWriteReg(address, this.REGISTER.PULLUP, 0xF0);\n\n        this.io.i2cRead(address, 2, function(bytes) {\n          dataHandler(uint16(bytes[0], bytes[1]));\n        });\n      }\n    },\n    toAlias: {\n      value: function(index) {\n        var state = priv.get(this);\n        return state.keys[index];\n      }\n    },\n    toIndices: {\n      value: function(raw) {\n        var state = priv.get(this);\n        var indices = [];\n        for (var i = 0; i < state.length; i++) {\n          if (raw & (1 << i)) {\n            indices.push(i);\n          }\n        }\n        return indices;\n      }\n    }\n  },\n};\n\n\n// Otherwise known as...\nControllers.MPR121QR2 = Controllers.MPR121;\nControllers.MPR121QR2_SHIELD = Controllers.MPR121;\nControllers.MPR121_KEYPAD = Controllers.MPR121;\nControllers.MPR121_SHIELD = Controllers.MPR121;\nControllers.QTOUCH = Controllers.AT42QT1070;\n\nfunction touches(length) {\n  return Array.from({\n    length: length\n  }, function() {\n    return {\n      timeout: null,\n      value: 0,\n    };\n  });\n}\n\nfunction Keypad(opts) {\n\n  if (!(this instanceof Keypad)) {\n    return new Keypad(opts);\n  }\n\n  // Initialize a Device instance on a Board\n  Board.Component.call(\n    this, opts = Board.Options(opts)\n  );\n\n  var raw = null;\n  var controller = null;\n  var state = {\n    touches: null,\n    timeout: null,\n    length: null,\n    keys: null,\n    mapping: null,\n    holdtime: null,\n  };\n\n  var trigger = Fn.debounce(function(type, value) {\n    var event = {\n      type: type,\n      which: value,\n      timestamp: Date.now()\n    };\n    aliases[type].forEach(function(type) {\n      this.emit(type, event);\n    }, this);\n\n    this.emit(\"change\", Object.assign({}, event));\n  }, 5);\n\n\n  if (opts.controller && typeof opts.controller === \"string\") {\n    controller = Controllers[opts.controller.toUpperCase()];\n  } else {\n    controller = opts.controller;\n  }\n\n  if (controller == null) {\n    controller = Controllers.ANALOG;\n  }\n\n  Board.Controller.call(this, controller, opts);\n\n  state.holdtime = opts.holdtime ? opts.holdtime : 500;\n\n  priv.set(this, state);\n\n  if (typeof this.initialize === \"function\") {\n    this.initialize(opts, function(data) {\n\n      raw = data;\n\n      var now = Date.now();\n      var indices = this.toIndices(data);\n      var kLength = state.length;\n\n      var lists = {\n        down: [],\n        hold: [],\n        up: [],\n      };\n\n      var target = null;\n      var alias = null;\n\n      for (var k = 0; k < kLength; k++) {\n        alias = this.toAlias(k);\n\n        if (indices.includes(k)) {\n          if (state.touches[k].value === 0) {\n\n            state.touches[k].timeout = now + state.holdtime;\n            lists.down.push(alias);\n\n          } else if (state.touches[k].value === 1) {\n            if (state.touches[k].timeout !== null && now > state.touches[k].timeout) {\n              state.touches[k].timeout = now + state.holdtime;\n              lists.hold.push(alias);\n            }\n          }\n\n          state.touches[k].value = 1;\n        } else {\n          if (state.touches[k].value === 1) {\n            state.touches[k].timeout = null;\n            lists.up.push(alias);\n          }\n          state.touches[k].value = 0;\n        }\n        target = null;\n        alias = null;\n      }\n\n      Object.keys(lists).forEach(function(key) {\n        var list = lists[key];\n\n        if (list.length) {\n          trigger.call(this, key, list);\n        }\n      }, this);\n    }.bind(this));\n  }\n\n  Object.defineProperties(this, {\n    isMultitouch: {\n      get: function() {\n        return state.isMultitouch;\n      }\n    },\n    value: {\n      get: function() {\n        return raw;\n      }\n    },\n  });\n}\n\nutil.inherits(Keypad, Emitter);\n\n/* istanbul ignore else */\nif (!!process.env.IS_TEST_MODE) {\n  Keypad.Controllers = Controllers;\n  Keypad.purge = function() {\n    priv.clear();\n  };\n}\n\nmodule.exports = Keypad;\n","/home/travis/build/npmtest/node-npmtest-johnny-five/node_modules/johnny-five/lib/definitions/mpr121.js":"// MPR121* Register Defines\nmodule.exports = {\n  MAPS: {\n    MPR121QR2_SHIELD: {\n      KEYS: {\n        0: 1,\n        1: 2,\n        2: 3,\n        3: 4,\n        4: 5,\n        5: 6,\n        6: 7,\n        7: 8,\n        8: 9,\n      },\n      TARGETS: {\n        256: 0,\n        32: 1,\n        4: 2,\n        128: 3,\n        16: 4,\n        2: 5,\n        64: 6,\n        8: 7,\n        1: 8,\n      }\n    },\n    MPR121: {\n      KEYS: {\n        0: 0,\n        1: 1,\n        2: 2,\n        3: 3,\n        4: 4,\n        5: 5,\n        6: 6,\n        7: 7,\n        8: 8,\n        9: 9,\n        10: 10,\n        11: 11,\n      },\n      TARGETS: {\n        1: 0,\n        2: 1,\n        4: 2,\n        8: 3,\n        16: 4,\n        32: 5,\n        64: 6,\n        128: 7,\n        256: 8,\n        512: 9,\n        1024: 10,\n        2048: 11,\n      }\n    },\n    MPR121_KEYPAD: {\n      KEYS: {\n        0: 1,\n        1: 2,\n        2: 3,\n        3: 4,\n        4: 5,\n        5: 6,\n        6: 7,\n        7: 8,\n        8: 9,\n        9: 10,\n        10: 11,\n        11: 12,\n      },\n      TARGETS: {\n        8: 0,\n        128: 1,\n        2048: 2,\n        4: 3,\n        64: 4,\n        1024: 5,\n        2: 6,\n        32: 7,\n        512: 8,\n        1: 9,\n        16: 10,\n        256: 11,\n      },\n    },\n    MPR121_SHIELD: {\n      KEYS: {\n        0: 0,\n        1: 1,\n        2: 2,\n        3: 3,\n        4: 4,\n        5: 5,\n        6: 6,\n        7: 7,\n        8: 8,\n        9: 9,\n        10: 10,\n        11: 11,\n      },\n      TARGETS: {\n        1: 0,\n        2: 1,\n        4: 2,\n        8: 3,\n        16: 4,\n        32: 5,\n        64: 6,\n        128: 7,\n        256: 8,\n        512: 9,\n        1024: 10,\n        2048: 11,\n      },\n    },\n  },\n  MPR121_DEFAULT_ADDRESS: 0x5A,\n  MPR121_SOFTRESET: 0x80,\n\n  // MPR121 Registers (from data sheet)\n  ELE0_ELE7_TOUCH_STATUS: 0x00,\n  ELE8_ELE11_ELEPROX_TOUCH_STATUS: 0x01,\n\n  ELE0_7_OOR_STATUS: 0x02,\n  ELE8_11_ELEPROX_OOR_STATUS: 0x03,\n\n  ELE0_FILTERED_DATA_LSB: 0x04,\n  ELE0_FILTERED_DATA_MSB: 0x05,\n  ELE1_FILTERED_DATA_LSB: 0x06,\n  ELE1_FILTERED_DATA_MSB: 0x07,\n  ELE2_FILTERED_DATA_LSB: 0x08,\n  ELE2_FILTERED_DATA_MSB: 0x09,\n  ELE3_FILTERED_DATA_LSB: 0x0A,\n  ELE3_FILTERED_DATA_MSB: 0x0B,\n  ELE4_FILTERED_DATA_LSB: 0x0C,\n  ELE4_FILTERED_DATA_MSB: 0x0D,\n  ELE5_FILTERED_DATA_LSB: 0x0E,\n  ELE5_FILTERED_DATA_MSB: 0x0F,\n  ELE6_FILTERED_DATA_LSB: 0x10,\n  ELE6_FILTERED_DATA_MSB: 0x11,\n  ELE7_FILTERED_DATA_LSB: 0x12,\n  ELE7_FILTERED_DATA_MSB: 0x13,\n  ELE8_FILTERED_DATA_LSB: 0x14,\n  ELE8_FILTERED_DATA_MSB: 0x15,\n  ELE9_FILTERED_DATA_LSB: 0x16,\n  ELE9_FILTERED_DATA_MSB: 0x17,\n  ELE10_FILTERED_DATA_LSB: 0x18,\n  ELE10_FILTERED_DATA_MSB: 0x19,\n  ELE11_FILTERED_DATA_LSB: 0x1A,\n  ELE11_FILTERED_DATA_MSB: 0x1B,\n  ELEPROX_FILTERED_DATA_LSB: 0x1C,\n  ELEPROX_FILTERED_DATA_MSB: 0x1D,\n\n  ELE0_BASELINE_VALUE: 0x1E,\n  ELE1_BASELINE_VALUE: 0x1F,\n  ELE2_BASELINE_VALUE: 0x20,\n  ELE3_BASELINE_VALUE: 0x21,\n  ELE4_BASELINE_VALUE: 0x22,\n  ELE5_BASELINE_VALUE: 0x23,\n  ELE6_BASELINE_VALUE: 0x24,\n  ELE7_BASELINE_VALUE: 0x25,\n  ELE8_BASELINE_VALUE: 0x26,\n  ELE9_BASELINE_VALUE: 0x27,\n  ELE10_BASELINE_VALUE: 0x28,\n  ELE11_BASELINE_VALUE: 0x29,\n  ELEPROX_BASELINE_VALUE: 0x2A,\n\n  MHD_RISING: 0x2B,\n  NHD_AMOUNT_RISING: 0x2C,\n  NCL_RISING: 0x2D,\n  FDL_RISING: 0x2E,\n  MHD_FALLING: 0x2F,\n  NHD_AMOUNT_FALLING: 0x30,\n  NCL_FALLING: 0x31,\n  FDL_FALLING: 0x32,\n  NHD_AMOUNT_TOUCHED: 0x33,\n  NCL_TOUCHED: 0x34,\n  FDL_TOUCHED: 0x35,\n  ELEPROX_MHD_RISING: 0x36,\n  ELEPROX_NHD_AMOUNT_RISING: 0x37,\n  ELEPROX_NCL_RISING: 0x38,\n  ELEPROX_FDL_RISING: 0x39,\n  ELEPROX_MHD_FALLING: 0x3A,\n  ELEPROX_NHD_AMOUNT_FALLING: 0x3B,\n  ELEPROX_FDL_FALLING: 0x3C,\n  ELEPROX_NHD_AMOUNT_TOUCHED: 0x3E,\n  ELEPROX_NCL_TOUCHED: 0x3F,\n  ELEPROX_FDL_TOUCHED: 0x40,\n\n  ELE0_TOUCH_THRESHOLD: 0x41,\n  ELE0_RELEASE_THRESHOLD: 0x42,\n  ELE1_TOUCH_THRESHOLD: 0x43,\n  ELE1_RELEASE_THRESHOLD: 0x44,\n  ELE2_TOUCH_THRESHOLD: 0x45,\n  ELE2_RELEASE_THRESHOLD: 0x46,\n  ELE3_TOUCH_THRESHOLD: 0x47,\n  ELE3_RELEASE_THRESHOLD: 0x48,\n  ELE4_TOUCH_THRESHOLD: 0x49,\n  ELE4_RELEASE_THRESHOLD: 0x4A,\n  ELE5_TOUCH_THRESHOLD: 0x4B,\n  ELE5_RELEASE_THRESHOLD: 0x4C,\n  ELE6_TOUCH_THRESHOLD: 0x4D,\n  ELE6_RELEASE_THRESHOLD: 0x4E,\n  ELE7_TOUCH_THRESHOLD: 0x4F,\n  ELE7_RELEASE_THRESHOLD: 0x50,\n  ELE8_TOUCH_THRESHOLD: 0x51,\n  ELE8_RELEASE_THRESHOLD: 0x52,\n  ELE9_TOUCH_THRESHOLD: 0x53,\n  ELE9_RELEASE_THRESHOLD: 0x54,\n  ELE10_TOUCH_THRESHOLD: 0x55,\n  ELE10_RELEASE_THRESHOLD: 0x56,\n  ELE11_TOUCH_THRESHOLD: 0x57,\n  ELE11_RELEASE_THRESHOLD: 0x58,\n  ELEPROX_TOUCH_THRESHOLD: 0x59,\n  ELEPROX_RELEASE_THRESHOLD: 0x5A,\n  DEBOUNCE_TOUCH_AND_RELEASE: 0x5B,\n  AFE_CONFIGURATION: 0x5C,\n\n  FILTER_CONFIG: 0x5D,\n  ELECTRODE_CONFIG: 0x5E,\n  ELE0_CURRENT: 0x5F,\n  ELE1_CURRENT: 0x60,\n  ELE2_CURRENT: 0x61,\n  ELE3_CURRENT: 0x62,\n  ELE4_CURRENT: 0x63,\n  ELE5_CURRENT: 0x64,\n  ELE6_CURRENT: 0x65,\n  ELE7_CURRENT: 0x66,\n  ELE8_CURRENT: 0x67,\n  ELE9_CURRENT: 0x68,\n  ELE10_CURRENT: 0x69,\n  ELE11_CURRENT: 0x6A,\n  ELEPROX_CURRENT: 0x6B,\n\n  ELE0_ELE1_CHARGE_TIME: 0x6C,\n  ELE2_ELE3_CHARGE_TIME: 0x6D,\n  ELE4_ELE5_CHARGE_TIME: 0x6E,\n  ELE6_ELE7_CHARGE_TIME: 0x6F,\n  ELE8_ELE9_CHARGE_TIME: 0x70,\n  ELE10_ELE11_CHARGE_TIME: 0x71,\n  ELEPROX_CHARGE_TIME: 0x72,\n\n  GPIO_CONTROL_0: 0x73,\n  GPIO_CONTROL_1: 0x74,\n  GPIO_DATA: 0x75,\n  GPIO_DIRECTION: 0x76,\n  GPIO_ENABLE: 0x77,\n  GPIO_SET: 0x78,\n  GPIO_CLEAR: 0x79,\n  GPIO_TOGGLE: 0x7A,\n  AUTO_CONFIG_CONTROL_0: 0x7B,\n  AUTO_CONFIG_CONTROL_1: 0x7C,\n  AUTO_CONFIG_USL: 0x7D,\n  AUTO_CONFIG_LSL: 0x7E,\n  AUTO_CONFIG_TARGET_LEVEL: 0x7F,\n\n  // Other Constants\n  // these are suggested values from app note 3944\n  TOUCH_THRESHOLD: 0x0F,\n  RELEASE_THRESHOLD: 0x0A,\n  NUM_CHANNELS: 12\n};\n","/home/travis/build/npmtest/node-npmtest-johnny-five/node_modules/johnny-five/lib/lcd.js":"var Board = require(\"./board\");\nvar Pin = require(\"./pin\");\nvar lcdCharacters = require(\"./lcd-chars\");\nvar RGB = require(\"./led/rgb\");\n\nvar priv = new Map();\n\n/**\n * This atrocity is unfortunately necessary.\n * If any other approach can be found, patches\n * will gratefully be accepted.\n */\nfunction sleep(ms) {\n  var start = Date.now();\n  // Wait 1ms longer than requested. For further information see:\n  // https://github.com/rwaldron/johnny-five/issues/326#issuecomment-230125813\n  while (Date.now() < start + ms + 1) {}\n}\n\n\n// TODO:  Migrate this to the new codified Expander class.\n//\n// - add portMode to PCF8574 controller\n// - add portWrite to PCF8574 controller\n//\n//\n// TODO:  Investigate adding the above methods to\n//        all expander controllers.\n//\nfunction Expander(address, io) {\n  this.address = address;\n  this.mask = 0xFF;\n  this.memory = 0x00;\n  this.io = io;\n}\n\nExpander.prototype.pinMode = function(pin, dir) {\n  if (dir === 0x01) {\n    this.mask &= ~(1 << pin);\n  } else {\n    this.mask |= 1 << pin;\n  }\n};\n\nExpander.prototype.portMode = function(dir) {\n  this.mask = dir === 0x00 ? 0xFF : 0x00;\n};\n\nExpander.prototype.portWrite = function(value) {\n  this.memory = value & ~(this.mask);\n  this.io.i2cWrite(this.address, this.memory);\n};\n\n\n\n\n// const-caps throughout serve to indicate the\n// \"const-ness\" of the binding to the reader\n// and nothing more.\n\nvar REGISTER = {\n  DEFAULT: {\n    SHIFT_LEFT: 0x04,\n\n    CLEAR: 0x01,\n    HOME: 0x02,\n    ENTRY: 0x04,\n    DISPLAY: 0x08,\n    DIMENSIONS: 0x20,\n    CURSORSHIFT: 0x10,\n\n    SETCGRAMADDR: 0x40,\n    SETDDRAMADDR: 0x80,\n\n    // Command And Control\n\n    DATA: 0x40,\n    COMMAND: 0x80,\n\n    // flags for display entry mode\n    ENTRYRIGHT: 0x00,\n    ENTRYLEFT: 0x02,\n    ENTRYSHIFTINCREMENT: 0x01,\n    ENTRYSHIFTDECREMENT: 0x00,\n\n    // flags for display on/off control\n    DISPLAYON: 0x04,\n    DISPLAYOFF: 0x00,\n    CURSORON: 0x02,\n    CURSOROFF: 0x00,\n    BLINKON: 0x01,\n    BLINKOFF: 0x00,\n\n    // flags for display/cursor shift\n    DISPLAYMOVE: 0x08,\n    CURSORMOVE: 0x00,\n    MOVERIGHT: 0x04,\n    MOVELEFT: 0x00,\n\n    // flags for function set\n    BITMODE: {\n      4: 0x00,\n      8: 0x10,\n    },\n\n    LINE: {\n      1: 0x00,\n      2: 0x08\n    },\n\n    DOTS: {\n      \"5x10\": 0x04,\n      \"5x8\": 0x00\n    },\n\n    // flags for backlight control\n    BACKLIGHT_ON: 0x08,\n    BACKLIGHT_OFF: 0x00,\n\n    MEMORYLIMIT: 0x08,\n\n    // Control\n    // Enable\n    EN: 0x04,\n    // Read/Write\n    RW: 0x02,\n    // Register Select\n    RS: 0x01,\n\n    // DATA\n    D4: 0x04,\n    D5: 0x05,\n    D6: 0x06,\n    D7: 0x07,\n  }\n};\n\nvar Controllers = {\n  JHD1313M1: {\n    REGISTER: {\n      value: REGISTER.DEFAULT,\n    },\n    CHARS: {\n      value: lcdCharacters.DEFAULT,\n    },\n    initialize: {\n      value: function(opts) {\n\n        // LCD: 0x3E\n        // RGB: 0x62\n        this.address = {\n          lcd: opts.address || 0x3E,\n          rgb: 0x62\n        };\n\n        opts.address = this.address;\n\n        this.io.i2cConfig(opts);\n\n        this.lines = opts.lines || 2;\n        this.rows = opts.rows || 2;\n        this.cols = opts.cols || 16;\n        this.dots = opts.dots || \"5x8\";\n\n\n        var display = this.REGISTER.DISPLAY | this.REGISTER.DISPLAYON | this.REGISTER.CURSOROFF | this.REGISTER.BLINKOFF;\n\n        var state = {\n          display: display,\n          characters: {},\n          index: this.REGISTER.MEMORYLIMIT - 1,\n          backlight: {\n            polarity: 1,\n            pin: null,\n            value: null\n          }\n        };\n\n        priv.set(this, state);\n\n        // Operations within the following labelled block are init-only,\n        // but _do_ block the process negligible number of milliseconds.\n        blocking: {\n          var lines = this.REGISTER.DIMENSIONS | this.REGISTER.LINE[2];\n          // Copied from Grove Studio lib.\n          // https://www.sparkfun.com/datasheets/LCD/HD44780.pdf\n          // SEE PAGE 45/46 FOR INITIALIZATION SPECIFICATION!\n          // according to datasheet, we need at least 40ms after\n          // power rises above 2.7V before sending commands.\n          // Arduino can turn on way before 4.5V so we'll wait 50\n\n\n\n          sleep(50);\n          this.command(lines);\n          sleep(5);\n          this.command(lines);\n          this.command(lines);\n          this.command(lines);\n          sleep(5);\n\n          this.command(\n            this.REGISTER.ENTRY |\n            this.REGISTER.ENTRYLEFT |\n            this.REGISTER.ENTRYSHIFTDECREMENT\n          );\n\n          this.on();\n          this.clear();\n          this.home();\n        }\n\n        // Backlight initialization\n\n\n\n        this.bgOn();\n\n        if (opts.color) {\n          this.bgColor(opts.color);\n        } else {\n          this.bgColor(\"black\");\n        }\n      },\n    },\n    clear: {\n      value: function() {\n        return this.command(this.REGISTER.CLEAR);\n      }\n    },\n    setCursor: {\n      value: function(col, row) {\n        return this.command(row === 0 ? col | 0x80 : col | 0xc0);\n      }\n    },\n    bgColor: {\n      value: function(red, green, blue) {\n        var rgb = RGB.ToRGB(red, green, blue);\n        var address = this.address.rgb;\n\n        this.io.i2cWrite(address, [0x00, 0]);\n        this.io.i2cWrite(address, [0x01, 0]);\n\n        // TRY THIS IN ONE CALL!\n        this.io.i2cWrite(address, [0x04, rgb.red]);\n        this.io.i2cWrite(address, [0x03, rgb.green]);\n        this.io.i2cWrite(address, [0x02, rgb.blue]);\n\n        return this;\n      }\n    },\n    bgOn: {\n      value: function() {\n        this.io.i2cWrite(this.address.rgb, [this.REGISTER.BACKLIGHT_ON, 0xAA]);\n        return this;\n      }\n    },\n    bgOff: {\n      value: function() {\n        this.io.i2cWrite(this.address.rgb, [this.REGISTER.BACKLIGHT_ON, 0x00]);\n        return this;\n      }\n    },\n    command: {\n      value: function(mode, value) {\n        if (arguments.length === 1) {\n          value = mode;\n          mode = this.REGISTER.COMMAND;\n        }\n\n        if (mode === this.REGISTER.DATA) {\n          return this.send(value);\n        }\n\n        return this.writeBits(this.REGISTER.COMMAND, value);\n      }\n    },\n    send: {\n      value: function(value) {\n        return this.writeBits(this.REGISTER.DATA, value);\n      }\n    },\n    writeBits: {\n      value: function(mode, value) {\n        this.io.i2cWrite(this.address.lcd, [mode, value]);\n        return this;\n      }\n    },\n    hilo: {\n      value: function(callback) {\n        callback.call(this);\n      }\n    },\n  },\n\n\n  PCF8574: {\n\n    REGISTER: {\n      value: Object.assign({}, REGISTER.DEFAULT, {\n        COMMAND: 0x00,\n        DATA: 0x01,\n        BACKLIGHT_ON: 0xFF,\n        BACKLIGHT_OFF: 0X00\n      }),\n    },\n    CHARS: {\n      value: lcdCharacters.DEFAULT,\n    },\n    initialize: {\n      value: function(opts) {\n\n\n        this.bitMode = opts.bitMode || 4;\n        this.lines = opts.lines || 2;\n        this.rows = opts.rows || 2;\n        this.cols = opts.cols || 16;\n        this.dots = opts.dots || \"5x8\";\n\n        if (!opts.address) {\n          opts.address = [\"PCF8574A\", \"PCF8574AT\"].includes(opts.controller) ?\n            0x3F : 0x27;\n\n          /*\n            | A2 | A1 | A0 | PCF8574(T) | PCF8574A(T) |\n            |----|----|----|---------|----------|\n            | L  | L  | L  | 0x20    | 0x38     |\n            | L  | L  | H  | 0x21    | 0x39     |\n            | L  | H  | L  | 0x22    | 0x3A     |\n            | L  | H  | H  | 0x23    | 0x3B     |\n            | H  | L  | L  | 0x24    | 0x3C     |\n            | H  | L  | H  | 0x25    | 0x3D     |\n            | H  | H  | L  | 0x26    | 0x3E     |\n            | H  | H  | H  | 0x27    | 0x3F     |\n\n            TODO: move to API docs\n           */\n        }\n\n        this.io.i2cConfig(opts);\n\n        this.address = {\n          lcd: opts.address\n        };\n\n        // Ported from https://bitbucket.org/fmalpartida/new-liquidcrystal\n        this.expander = new Expander(this.address.lcd, this.io);\n        this.expander.portMode(this.io.MODES.OUTPUT);\n        this.expander.portWrite(0);\n\n        var backlight = opts.backlight || {\n          polarity: 0,\n          pin: 3\n        };\n\n        backlight.pin = typeof backlight.pin === \"undefined\" ? 3 : backlight.pin;\n        backlight.polarity = typeof backlight.polarity === \"undefined\" ? 0 : backlight.polarity;\n\n        var dimensions = this.REGISTER.BITMODE[this.bitMode] |\n          this.REGISTER.LINE[this.lines] |\n          this.REGISTER.DOTS[this.dots];\n\n        var display = this.REGISTER.DISPLAY |\n          this.REGISTER.DISPLAYON |\n          this.REGISTER.CURSOROFF |\n          this.REGISTER.BLINKOFF;\n\n        var entry = this.REGISTER.ENTRYLEFT |\n          this.REGISTER.ENTRYSHIFTDECREMENT;\n\n\n        var state = {\n          display: display,\n          characters: {},\n          index: this.REGISTER.MEMORYLIMIT - 1,\n          backlight: {\n            polarity: backlight.polarity,\n            pinMask: 1 << backlight.pin,\n            statusMask: 0x00\n          },\n          data: [\n            1 << this.REGISTER.D4,\n            1 << this.REGISTER.D5,\n            1 << this.REGISTER.D6,\n            1 << this.REGISTER.D7\n          ]\n        };\n\n        priv.set(this, state);\n\n        var toggle = 0x03 << this.REGISTER.SHIFT_LEFT;\n\n        // Operations within the following labelled block are init-only,\n        // but _do_ block the process for negligible number of milliseconds.\n        blocking: {\n          //\n          // Toggle write/pulse to reset the LCD component.\n          //\n          this.expander.portWrite(toggle);\n          this.pulse(toggle);\n          sleep(4);\n\n          this.expander.portWrite(toggle);\n          this.pulse(toggle);\n          sleep(4);\n\n          this.expander.portWrite(toggle);\n          this.pulse(toggle);\n\n          toggle = 0x02 << this.REGISTER.SHIFT_LEFT;\n\n          this.expander.portWrite(toggle);\n          this.pulse(toggle);\n\n          // Initialize the reset component\n          this.command(this.REGISTER.DIMENSIONS | dimensions);\n\n          // Set display details\n          this.command(state.display);\n\n          // Now that the initial display is set,\n          // overwrite with the \"entry\" bits\n          state.display = entry;\n\n          this.command(this.REGISTER.ENTRY | state.display);\n\n          this.on();\n          this.clear();\n          this.backlight();\n        }\n      },\n    },\n    clear: {\n      value: function() {\n        this.command(this.REGISTER.CLEAR);\n        sleep(2);\n        return this;\n\n      }\n    },\n    backlight: {\n      value: function(value) {\n        var state = priv.get(this);\n        var mask;\n\n        value = typeof value === \"undefined\" ? 255 : value;\n\n        if (state.backlight.pinMask !== 0x00) {\n          if ((state.backlight.polarity === 0 && value > 0) ||\n            (state.backlight.polarity === 1 && value === 0)) {\n\n            mask = 0xFF;\n          } else {\n            mask = 0x00;\n          }\n\n          state.backlight.statusMask = state.backlight.pinMask & mask;\n\n          this.expander.portWrite(state.backlight.statusMask);\n        }\n\n        return this;\n      }\n    },\n\n    createChar: {\n      value: function(name, charMap) {\n        var state = priv.get(this);\n        var address;\n\n        if (typeof name === \"number\") {\n          address = name & 0x07;\n        } else {\n          address = state.index;\n          state.index--;\n          if (state.index === -1) {\n            state.index = this.REGISTER.MEMORYLIMIT - 1;\n          }\n        }\n\n        this.command(this.REGISTER.SETCGRAMADDR | (address << 3));\n\n        blocking: {\n          sleep(1);\n\n          for (var i = 0; i < 8; i++) {\n            this.command(this.REGISTER.DATA, charMap[i]);\n            sleep(1);\n          }\n        }\n\n        state.characters[name] = address;\n\n        return address;\n      }\n    },\n    noBacklight: {\n      value: function() {\n        this.backlight(0);\n      }\n    },\n    on: {\n      value: function() {\n        var state = priv.get(this);\n\n        state.display |= this.REGISTER.DISPLAYON;\n        this.command(this.REGISTER.DISPLAY | state.display);\n\n        return this;\n      }\n    },\n    off: {\n      value: function() {\n        var state = priv.get(this);\n\n        state.display &= ~this.REGISTER.DISPLAYON;\n        this.command(this.REGISTER.DISPLAY | state.display);\n\n        return this;\n      }\n    },\n    hilo: {\n      value: function(callback) {\n        callback.call(this);\n      }\n    },\n    command: {\n      value: function(mode, value) {\n\n        if (arguments.length === 1) {\n          value = mode;\n          mode = this.REGISTER.COMMAND;\n        }\n\n        this.send(mode, value);\n\n        return this;\n      }\n    },\n    send: {\n      writable: true,\n      value: function(mode, value) {\n\n        this.writeBits(mode, value >> 4);\n        this.writeBits(mode, value & 0x0F);\n\n        return this;\n      }\n    },\n    writeBits: {\n      writable: true,\n      value: function(mode, value) {\n        var state = priv.get(this);\n        var pinMapValue = 0;\n\n        for (var i = 0; i < 4; i++) {\n          if ((value & 0x01) === 1) {\n            pinMapValue |= state.data[i];\n          }\n          value = (value >> 1);\n        }\n\n        if (mode === this.REGISTER.DATA) {\n          mode = this.REGISTER.RS;\n        }\n\n        pinMapValue |= mode | state.backlight.statusMask;\n\n        this.pulse(pinMapValue);\n        return this;\n      }\n    },\n    pulse: {\n      writable: true,\n      value: function(data) {\n        this.expander.portWrite(data | this.REGISTER.EN); // En HIGH\n        this.expander.portWrite(data & ~this.REGISTER.EN); // En LOW\n      }\n    }\n  },\n\n\n  PARALLEL: {\n    REGISTER: {\n      value: REGISTER.DEFAULT,\n    },\n    CHARS: {\n      value: lcdCharacters.DEFAULT,\n    },\n    initialize: {\n      value: function(opts) {\n\n        this.bitMode = opts.bitMode || 4;\n        this.lines = opts.lines || 2;\n        this.rows = opts.rows || 2;\n        this.cols = opts.cols || 16;\n        this.dots = opts.dots || \"5x8\";\n\n        if (Array.isArray(opts.pins)) {\n          this.pins = {\n            rs: opts.pins[0],\n            en: opts.pins[1],\n            // TODO: Move to device map profile\n            data: [\n              opts.pins[5],\n              opts.pins[4],\n              opts.pins[3],\n              opts.pins[2]\n            ]\n          };\n        } else {\n          this.pins = opts.pins;\n        }\n\n        var display = this.REGISTER.DISPLAY | this.REGISTER.DISPLAYON;\n        var state = {\n          display: display,\n          characters: {},\n          index: this.REGISTER.MEMORYLIMIT - 1,\n          backlight: {\n            polarity: 1,\n            pin: null,\n            value: null\n          }\n        };\n\n        priv.set(this, state);\n\n        opts.pins.forEach(function(pin) {\n          this.io.pinMode(pin, 1);\n        }, this);\n\n        this.io.digitalWrite(this.pins.rs, this.io.LOW);\n        this.io.digitalWrite(this.pins.en, this.io.LOW);\n\n        if (opts.backlight) {\n          if (typeof opts.backlight === \"number\") {\n            var temp = opts.backlight;\n            opts.backlight = {\n              pin: temp\n            };\n          }\n\n          if (opts.backlight.pin) {\n            state.backlight.pin = new Pin({\n              pin: opts.backlight.pin,\n              board: this.board\n            });\n\n            state.backlight.pin.high();\n          }\n        }\n\n        // Operations within the following labelled block are init-only,\n        // but _do_ block the process negligible number of milliseconds.\n        blocking: {\n          // Send 0b00000011 thrice to make sure LCD\n          // is initialized properly\n          this.command(0x03);\n          sleep(4);\n          this.command(0x03);\n          sleep(4);\n          this.command(0x03);\n\n          // Switch to 4-bit mode\n          if (this.bitMode === 4) {\n            // this.REGISTER.DIMENSIONS |\n            this.command(0x02);\n          }\n\n          // Set number of lines and dots\n          // TODO: Move to device map profile\n          this.command(\n            this.REGISTER.LINE[this.lines] |\n            this.REGISTER.DOTS[this.dots]\n          );\n\n          // Clear display and turn it on\n          this.command(display);\n          this.clear();\n          this.home();\n        }\n      }\n    }\n  }\n};\n\n// Alias controllers\nControllers.LCM1602 = Controllers.LCD1602 = Controllers.LCM1602IIC = Controllers.LCD2004 = Controllers.PCF8574A = Controllers.PCF8574AT = Controllers.PCF8574T = Controllers.PCF8574;\n\nControllers.MJKDZ = Object.assign({}, Controllers.PCF8574, {\n  REGISTER: {\n    value: Object.assign({}, REGISTER.DEFAULT, {\n      SHIFT_LEFT: 0x00,\n\n      COMMAND: 0x00,\n      DATA: 0x06,\n\n      // Control\n      // Enable\n      EN: 0x10,\n      // Read/Write\n      RW: 0x05,\n      // Register Select\n      RS: 0x06,\n\n      D4: 0x00,\n      D5: 0x01,\n      D6: 0x02,\n      D7: 0x03\n    })\n  },\n  writeBits: {\n    writable: true,\n    value: function(mode, value) {\n      var state = priv.get(this);\n      var pinMapValue = 0;\n\n      for (var i = 0; i < 4; i++) {\n        if ((value & 0x01) === 1) {\n          pinMapValue |= state.data[i];\n        }\n        value = (value >> 1);\n      }\n\n      if (mode === this.REGISTER.DATA) {\n        mode = (1 << this.REGISTER.RS);\n      }\n\n      pinMapValue |= mode | state.backlight.statusMask;\n\n      this.pulse(pinMapValue);\n      return this;\n    }\n  },\n});\n\n/**\n * LCD\n * @param {[type]} opts [description]\n */\n\nfunction LCD(opts) {\n\n  if (!(this instanceof LCD)) {\n    return new LCD(opts);\n  }\n\n  Board.Component.call(\n    this, opts = Board.Options(opts)\n  );\n\n  var controller = null;\n\n  if (opts.controller && typeof opts.controller === \"string\") {\n    controller = Controllers[opts.controller.toUpperCase()];\n  } else {\n    controller = opts.controller;\n  }\n\n  if (controller == null) {\n    controller = Controllers.PARALLEL;\n  }\n\n  Board.Controller.call(this, controller, opts);\n\n  this.ctype = opts.controller;\n\n  if (this.initialize) {\n    this.initialize(opts);\n  }\n\n  Object.defineProperties(this, {\n    characters: {\n      get: function() {\n        return Object.assign({}, priv.get(this).characters);\n      },\n    },\n  });\n}\n\nLCD.prototype.command = function(mode, value) {\n  if (typeof value === \"undefined\") {\n    value = mode;\n    mode = 0x80;\n  }\n\n  if (this.bitMode === 4) {\n    this.send(value >> 4);\n  }\n\n  this.send(value);\n\n  return this;\n};\n\nLCD.prototype.send = function(value) {\n  var pin = 0;\n  var mask = {\n    4: 8,\n    8: 128\n  }[this.bitMode];\n\n  for (; mask > 0; mask = mask >> 1) {\n    this.io.digitalWrite(\n      this.pins.data[pin],\n      this.io[value & mask ? \"HIGH\" : \"LOW\"]\n    );\n    pin++;\n  }\n\n  [\"LOW\", \"HIGH\", \"LOW\"].forEach(function(val) {\n    this.io.digitalWrite(this.pins.en, this.io[val]);\n  }, this);\n\n  return this;\n};\n\nLCD.prototype.hilo = function(callback) {\n  // RS High for write mode\n  this.io.digitalWrite(this.pins.rs, this.io.HIGH);\n\n  callback.call(this);\n\n  // RS Low for command mode\n  this.io.digitalWrite(this.pins.rs, this.io.LOW);\n};\n\n\n\nvar RE_SPECIALS = /:(\\w+):/g;\n\nLCD.prototype.print = function(message, opts) {\n  var state, dontProcessSpecials, hasCharacters, processed;\n\n  message = message + \"\";\n  opts = opts || {};\n\n  state = priv.get(this);\n  dontProcessSpecials = opts.dontProcessSpecials || false;\n  hasCharacters = !dontProcessSpecials && RE_SPECIALS.test(message);\n\n  if (message.length === 1) {\n    this.hilo(function() {\n      this.command(this.REGISTER.DATA, message.charCodeAt(0));\n    });\n  } else {\n\n    if (hasCharacters) {\n      processed = message.replace(RE_SPECIALS, function(match, name) {\n        var address = state.characters[name];\n\n        return typeof address === \"number\" ? String.fromCharCode(address) : match;\n      });\n\n      this.print(processed, {\n        dontProcessSpecials: true\n      });\n    } else {\n      this.hilo(function() {\n        Array.from(message).forEach(function(character) {\n          this.command(this.REGISTER.DATA, character.charCodeAt(0));\n        }, this);\n      });\n    }\n  }\n\n  return this;\n};\n\nLCD.prototype.write = function(charCode) {\n  this.hilo.call(this, function() {\n    this.command(this.REGISTER.DATA, charCode);\n  });\n\n  return this;\n};\n\nLCD.prototype.clear = function() {\n  this.command(this.REGISTER.CLEAR);\n  sleep(2);\n  return this;\n};\n\nLCD.prototype.home = function() {\n  this.command(this.REGISTER.HOME);\n  sleep(2);\n  return this;\n};\n\nLCD.prototype.setCursor = function(col, row) {\n  var rowOffsets = [0x00, 0x40, 0x14, 0x54];\n  this.command(this.REGISTER.SETDDRAMADDR | (col + rowOffsets[row]));\n  return this;\n};\n\nLCD.prototype.backlight = function(highOrLow) {\n  var state = priv.get(this);\n\n  highOrLow = typeof highOrLow === \"undefined\" ? true : false;\n\n  if (state.backlight.pin instanceof Pin) {\n    if (highOrLow) {\n      state.backlight.pin.high();\n    } else {\n      state.backlight.pin.low();\n    }\n  }\n\n  if (highOrLow) {\n    state.display |= this.REGISTER.DISPLAYON;\n  } else {\n    state.display &= ~this.REGISTER.DISPLAYON;\n  }\n\n  this.command(state.display);\n\n  return this;\n};\n\nLCD.prototype.noBacklight = function() {\n  var state = priv.get(this);\n\n  if (state.backlight.pin instanceof Pin) {\n    state.backlight.pin.high();\n  }\n\n  // if (highOrLow) {\n  //   state.display |= this.REGISTER.DISPLAYON;\n  // } else {\n  //   state.display &= ~this.REGISTER.DISPLAYON;\n  // }\n\n  // this.command(state.display);\n\n  return this.backlight(false);\n};\n\nLCD.prototype.on = function() {\n  var state = priv.get(this);\n\n  state.display |= this.REGISTER.DISPLAYON;\n  this.command(state.display);\n\n  return this;\n};\n\nLCD.prototype.off = function() {\n  var state = priv.get(this);\n\n  state.display &= ~this.REGISTER.DISPLAYON;\n  this.command(state.display);\n\n  return this;\n};\n\nLCD.prototype.cursor = function(row, col) {\n  // When provided with col & row, cursor will behave like setCursor,\n  // except that it has row and col in the order that most people\n  // intuitively expect it to be in.\n  if (typeof col !== \"undefined\" && typeof row !== \"undefined\") {\n    return this.setCursor(col, row);\n  }\n  var state = priv.get(this);\n\n  state.display |= this.REGISTER.CURSORON;\n  this.command(state.display);\n\n  return this;\n};\n\nLCD.prototype.noCursor = function() {\n  var state = priv.get(this);\n\n  state.display &= ~this.REGISTER.CURSORON;\n  this.command(state.display);\n\n  return this;\n};\n\nLCD.prototype.blink = function() {\n  var state = priv.get(this);\n\n  state.display |= this.REGISTER.BLINKON;\n  this.command(state.display);\n\n  return this;\n};\n\nLCD.prototype.noBlink = function() {\n  var state = priv.get(this);\n\n  state.display &= ~this.REGISTER.BLINKON;\n  this.command(state.display);\n\n  return this;\n};\n\nLCD.prototype.autoscroll = function() {\n  var state = priv.get(this);\n\n  state.display |= this.REGISTER.ENTRYSHIFTINCREMENT;\n  this.command(this.REGISTER.ENTRY | state.display);\n\n  return this;\n};\n\nLCD.prototype.noAutoscroll = function() {\n  var state = priv.get(this);\n\n  state.display &= ~this.REGISTER.ENTRYSHIFTINCREMENT;\n  this.command(this.REGISTER.ENTRY | state.display);\n\n  return this;\n};\n\nLCD.prototype.createChar = function(name, charMap) {\n  // Ensure location is never above 7\n  var state = priv.get(this);\n  var address;\n\n  if (typeof name === \"number\") {\n    address = name & 0x07;\n  } else {\n    address = state.index;\n    state.index--;\n    if (state.index === -1) {\n      state.index = this.REGISTER.MEMORYLIMIT - 1;\n    }\n  }\n\n  this.command(this.REGISTER.SETCGRAMADDR | (address << 3));\n\n  this.hilo(function() {\n    for (var i = 0; i < 8; i++) {\n      this.command(this.REGISTER.DATA, charMap[i]);\n    }\n  });\n\n  // Fill in address\n  state.characters[name] = address;\n\n  return address;\n};\n\n\nLCD.prototype.useChar = function(name) {\n  var state = priv.get(this);\n\n  if (typeof state.characters[name] === \"undefined\") {\n    // Create the character in LCD memory and\n    var newCharIndex = this.createChar(name, this.CHARS[name]);\n\n    // If character's index already used, remove this character in current LCD character map\n    // because it's not in LCD memory anymore.\n    for (var oldName in state.characters) {\n      if (name !== oldName && state.characters[oldName] === newCharIndex) {\n        delete state.characters[oldName];\n        break;\n      }\n    }\n\n    // Add character to current LCD character map\n    state.characters[name] = newCharIndex;\n  }\n\n  return this;\n};\n\n\n/**\n *\n\nTODO:\n\n\nburst()\n\nscrollDisplayLeft()\nscrollDisplayRight()\n\nleftToRight()\nrightToLeft()\n\n\n*/\n\nLCD.POSITIVE = 0;\nLCD.NEGATIVE = 1;\n\nLCD.Characters = lcdCharacters;\n\nmodule.exports = LCD;\n","/home/travis/build/npmtest/node-npmtest-johnny-five/node_modules/johnny-five/lib/lcd-chars.js":"// http://www.quinapalus.com/hd44780udg.html\n// http://www.darreltaylor.com/files/CustChar.htm\n\nmodule.exports = {\n  DEFAULT: {\n    \"0\": [0xe, 0x1b, 0x1b, 0x1b, 0x1b, 0x1b, 0xe],\n    \"1\": [0x2, 0x6, 0xe, 0x6, 0x6, 0x6, 0x6],\n    \"2\": [0xe, 0x1b, 0x3, 0x6, 0xc, 0x18, 0x1f],\n    \"3\": [0xe, 0x1b, 0x3, 0xe, 0x3, 0x1b, 0xe],\n    \"4\": [0x3, 0x7, 0xf, 0x1b, 0x1f, 0x3, 0x3],\n    \"5\": [0x1f, 0x18, 0x1e, 0x3, 0x3, 0x1b, 0xe],\n    \"6\": [0xe, 0x1b, 0x18, 0x1e, 0x1b, 0x1b, 0xe],\n    \"7\": [0x1f, 0x3, 0x6, 0xc, 0xc, 0xc, 0xc],\n    \"8\": [0xe, 0x1b, 0x1b, 0xe, 0x1b, 0x1b, 0xe],\n    \"9\": [0xe, 0x1b, 0x1b, 0xf, 0x3, 0x1b, 0xe],\n    \"10\": [0x17, 0x15, 0x15, 0x15, 0x17, 0x0, 0x1f],\n    \"11\": [0xa, 0xa, 0xa, 0xa, 0xa, 0x0, 0x1f],\n    \"12\": [0x17, 0x11, 0x17, 0x14, 0x17, 0x0, 0x1f],\n    \"13\": [0x17, 0x11, 0x13, 0x11, 0x17, 0x0, 0x1f],\n    \"14\": [0x15, 0x15, 0x17, 0x11, 0x11, 0x0, 0x1f],\n    \"15\": [0x17, 0x14, 0x17, 0x11, 0x17, 0x0, 0x1f],\n    \"16\": [0x17, 0x14, 0x17, 0x15, 0x17, 0x0, 0x1f],\n    \"17\": [0x17, 0x11, 0x12, 0x12, 0x12, 0x0, 0x1f],\n    \"18\": [0x17, 0x15, 0x17, 0x15, 0x17, 0x0, 0x1f],\n    \"19\": [0x17, 0x15, 0x17, 0x11, 0x17, 0x0, 0x1f],\n    circle: [0x0, 0xe, 0x11, 0x11, 0x11, 0xe, 0x0],\n    cdot: [0x0, 0xe, 0x11, 0x15, 0x11, 0xe, 0x0],\n    donut: [0x0, 0xe, 0x1f, 0x1b, 0x1f, 0xe, 0x0],\n    ball: [0x0, 0xe, 0x1f, 0x1f, 0x1f, 0xe, 0x0],\n\n    square: [0x0, 0x1f, 0x11, 0x11, 0x11, 0x1f, 0x0],\n    sdot: [0x0, 0x1f, 0x11, 0x15, 0x11, 0x1f, 0x0],\n    fbox: [0x0, 0x1f, 0x1f, 0x1f, 0x1f, 0x1f, 0x0],\n    sbox: [0x0, 0x0, 0xe, 0xa, 0xe, 0x0, 0x0],\n    sfbox: [0x0, 0x0, 0xe, 0xe, 0xe, 0x0, 0x0],\n    bigpointerright: [0x8, 0xc, 0xa, 0x9, 0xa, 0xc, 0x8],\n    bigpointerleft: [0x2, 0x6, 0xa, 0x12, 0xa, 0x6, 0x2],\n    arrowright: [0x8, 0xc, 0xa, 0x9, 0xa, 0xc, 0x8],\n    arrowleft: [0x2, 0x6, 0xa, 0x12, 0xa, 0x6, 0x2],\n    ascprogress1: [0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10],\n    ascprogress2: [0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18],\n    ascprogress3: [0x1c, 0x1c, 0x1c, 0x1c, 0x1c, 0x1c, 0x1c, 0x1c],\n    ascprogress4: [0x1e, 0x1e, 0x1e, 0x1e, 0x1e, 0x1e, 0x1e, 0x1e],\n    fullprogress: [0x1f, 0x1f, 0x1f, 0x1f, 0x1f, 0x1f, 0x1f, 0x1f],\n    descprogress1: [1, 1, 1, 1, 1, 1, 1, 1],\n    descprogress2: [3, 3, 3, 3, 3, 3, 3, 3],\n    descprogress3: [7, 7, 7, 7, 7, 7, 7, 7],\n    descprogress4: [15, 15, 15, 15, 15, 15, 15, 15],\n    ascchart1: [31, 0, 0, 0, 0, 0, 0, 0],\n    ascchart2: [31, 31, 0, 0, 0, 0, 0, 0],\n    ascchart3: [31, 31, 31, 0, 0, 0, 0, 0],\n    ascchart4: [31, 31, 31, 31, 0, 0, 0, 0],\n    ascchart5: [31, 31, 31, 31, 31, 0, 0, 0],\n    ascchart6: [31, 31, 31, 31, 31, 31, 0, 0],\n    ascchart7: [31, 31, 31, 31, 31, 31, 31, 0],\n    descchart1: [0, 0, 0, 0, 0, 0, 0, 31],\n    descchart2: [0, 0, 0, 0, 0, 0, 31, 31],\n    descchart3: [0, 0, 0, 0, 0, 31, 31, 31],\n    descchart4: [0, 0, 0, 0, 31, 31, 31, 31],\n    descchart5: [0, 0, 0, 31, 31, 31, 31, 31],\n    descchart6: [0, 0, 31, 31, 31, 31, 31, 31],\n    descchart7: [0, 31, 31, 31, 31, 31, 31, 31],\n    borderleft1: [1, 1, 1, 1, 1, 1, 1, 1],\n    borderleft2: [3, 2, 2, 2, 2, 2, 2, 3],\n    borderleft3: [7, 4, 4, 4, 4, 4, 4, 7],\n    borderleft4: [15, 8, 8, 8, 8, 8, 8, 15],\n    borderleft5: [31, 16, 16, 16, 16, 16, 16, 31],\n    bordertopbottom5: [31, 0, 0, 0, 0, 0, 0, 31],\n    borderright1: [16, 16, 16, 16, 16, 16, 16, 16],\n    borderright2: [24, 8, 8, 8, 8, 8, 8, 24],\n    borderright3: [28, 4, 4, 4, 4, 4, 4, 28],\n    borderright4: [30, 2, 2, 2, 2, 2, 2, 30],\n    borderright5: [31, 1, 1, 1, 1, 1, 1, 31],\n    box1: [3, 3, 3, 0, 0, 0, 0],\n    box2: [24, 24, 24, 0, 0, 0, 0],\n    box3: [27, 27, 27, 0, 0, 0, 0],\n    box4: [0, 0, 0, 0, 3, 3, 3],\n    box5: [3, 3, 3, 0, 3, 3, 3],\n    box6: [24, 24, 24, 0, 3, 3, 3],\n    box7: [27, 27, 27, 0, 3, 3, 3],\n    box8: [0, 0, 0, 0, 24, 24, 24],\n    box9: [3, 3, 3, 0, 24, 24, 24],\n    box10: [24, 24, 24, 0, 24, 24, 24],\n    box11: [27, 27, 27, 0, 24, 24, 24],\n    box12: [0, 0, 0, 0, 27, 27, 27],\n    box13: [3, 3, 3, 0, 27, 27, 27],\n    box14: [24, 24, 24, 0, 27, 27, 27],\n    box15: [27, 27, 27, 0, 27, 27, 27],\n    euro: [3, 4, 30, 8, 30, 8, 7],\n    cent: [0, 0, 14, 17, 16, 21, 14, 8],\n    speaker: [1, 3, 15, 15, 15, 3, 1],\n    sound: [8, 16, 0, 24, 0, 16, 8],\n    x: [0, 27, 14, 4, 14, 27, 0],\n    target: [0, 10, 17, 21, 17, 10, 0],\n    pointerright: [0, 8, 12, 14, 12, 8, 0],\n    pointerup: [0, 0, 4, 14, 31, 0, 0],\n    pointerleft: [0, 2, 6, 14, 6, 2, 0],\n    pointerdown: [0, 0, 31, 14, 4, 0, 0],\n    arrowne: [0, 15, 3, 5, 9, 16, 0],\n    arrownw: [0, 30, 24, 20, 18, 1, 0],\n    arrowsw: [0, 1, 18, 20, 24, 30, 0],\n    arrowse: [0, 16, 9, 5, 3, 15, 0],\n    dice1: [0, 0, 0, 4, 0, 0, 0],\n    dice2: [0, 16, 0, 0, 0, 1, 0],\n    dice3: [0, 16, 0, 4, 0, 1, 0],\n    dice4: [0, 17, 0, 0, 0, 17, 0],\n    dice5: [0, 17, 0, 4, 0, 17, 0],\n    dice6: [0, 17, 0, 17, 0, 17, 0],\n    bell: [4, 14, 14, 14, 31, 0, 4],\n    smile: [0, 10, 0, 17, 14, 0, 0],\n    note: [2, 3, 2, 14, 30, 12, 0],\n    clock: [0, 14, 21, 23, 17, 14, 0],\n    heart: [0, 10, 31, 31, 31, 14, 4, 0],\n    duck: [0, 12, 29, 15, 15, 6, 0],\n    check: [0, 1, 3, 22, 28, 8, 0],\n    retarrow: [1, 1, 5, 9, 31, 8, 4],\n    runninga: [6, 6, 5, 14, 20, 4, 10, 17],\n    runningb: [6, 6, 4, 14, 14, 4, 10, 10]\n  }\n};\n","/home/travis/build/npmtest/node-npmtest-johnny-five/node_modules/johnny-five/lib/led/rgb.js":"var Board = require(\"../board\");\nvar Animation = require(\"../animation\");\nvar Expander = require(\"../expander\");\nvar Fn = require(\"../fn\");\nvar converter = require(\"color-convert\");\n\nvar priv = new Map();\n\nvar Controllers = {\n  DEFAULT: {\n    initialize: {\n      value: function(opts) {\n        RGB.colors.forEach(function(color, index) {\n          var pin = opts.pins[index];\n\n          if (opts.debug && !this.board.pins.isPwm(pin)) {\n            Board.Pins.Error({\n              pin: pin,\n              type: \"PWM\",\n              via: \"Led.RGB\"\n            });\n          }\n\n          this.io.pinMode(pin, this.io.MODES.PWM);\n          this.pins[index] = pin;\n        }, this);\n      }\n    },\n    write: {\n      writable: true,\n      value: function(colors) {\n        var state = priv.get(this);\n\n        RGB.colors.forEach(function(color, index) {\n          var pin = this.pins[index];\n          var value = colors[color];\n\n          if (state.isAnode) {\n            value = 255 - Board.constrain(value, 0, 255);\n          }\n\n          this.io.analogWrite(pin, value);\n        }, this);\n      }\n    }\n  },\n  PCA9685: {\n    initialize: {\n      value: function(opts) {\n\n        var state = priv.get(this);\n\n        this.address = opts.address || 0x40;\n        this.pwmRange = opts.pwmRange || [0, 4095];\n        this.frequency = opts.frequency || 200;\n\n        state.expander = Expander.get({\n          address: this.address,\n          controller: this.controller,\n          bus: this.bus,\n          pwmRange: this.pwmRange,\n          frequency: this.frequency,\n        });\n\n        RGB.colors.forEach(function(color, index) {\n          this.pins[index] = state.expander.normalize(opts.pins[index]);\n          state.expander.analogWrite(this.pins[index], 0);\n        }, this);\n      }\n    },\n    write: {\n      writable: true,\n      value: function(colors) {\n        var state = priv.get(this);\n\n        RGB.colors.forEach(function(color, index) {\n          var pin = this.pins[index];\n          var value = colors[color];\n\n          if (state.isAnode) {\n            value = 255 - Board.constrain(value, 0, 255);\n          }\n\n          state.expander.analogWrite(pin, value);\n\n        }, this);\n      }\n    }\n  },\n  BLINKM: {\n    REGISTER: {\n      value: {\n        GO_TO_RGB_COLOR_NOW: 0x6e,\n        STOP_SCRIPT: 0x6f\n      }\n    },\n    initialize: {\n      value: function(opts) {\n        this.address = opts.address || 0x09;\n\n        // Ensure that this is passed on to i2cConfig\n        opts.address = this.address;\n\n        /* istanbul ignore else */\n        if (!this.board.Drivers[this.address]) {\n          this.io.i2cConfig(opts);\n          this.board.Drivers[this.address] = {\n            initialized: false\n          };\n\n          // Stop the current script\n          this.io.i2cWrite(this.address, [this.REGISTER.STOP_SCRIPT]);\n\n          this.board.Drivers[this.address].initialized = true;\n        }\n      }\n    },\n    write: {\n      writable: true,\n      value: function(colors) {\n        this.io.i2cWrite(this.address, [this.REGISTER.GO_TO_RGB_COLOR_NOW, colors.red, colors.green, colors.blue]);\n      }\n    }\n  }\n};\n\nControllers.ESPLORA = {\n  initialize: {\n    value: function(opts) {\n      opts.pins = [5, 10, 9];\n      this.pins = [];\n      Controllers.DEFAULT.initialize.value.call(this, opts);\n    }\n  },\n  write: Controllers.DEFAULT.write\n};\n\n/**\n * RGB\n * @constructor\n *\n * @param {Object} opts [description]\n * @alias Led.RGB\n */\nfunction RGB(opts) {\n  if (!(this instanceof RGB)) {\n    return new RGB(opts);\n  }\n\n  var controller = null;\n\n  if (Array.isArray(opts)) {\n    // RGB([Byte, Byte, Byte]) shorthand\n    // Convert to opts.pins array definition\n    opts = {\n      pins: opts\n    };\n    // If opts.pins is an object, convert to array\n  } else if (typeof opts.pins === \"object\" && !Array.isArray(opts.pins)) {\n    opts.pins = [opts.pins.red, opts.pins.green, opts.pins.blue];\n  }\n\n  Board.Component.call(\n    this, opts = Board.Options(opts)\n  );\n\n  if (opts.controller && typeof opts.controller === \"string\") {\n    controller = Controllers[opts.controller.toUpperCase()];\n  } else {\n    controller = opts.controller;\n  }\n\n  if (controller == null) {\n    controller = Controllers.DEFAULT;\n  }\n\n\n  // The default color is #ffffff, but the light will be off\n  var state = {\n    red: 255,\n    green: 255,\n    blue: 255,\n    intensity: 100,\n    isAnode: opts.isAnode || false,\n    interval: null\n  };\n\n  // red, green, and blue store the raw color set via .color()\n  // values takes state into account, such as on/off and intensity\n  state.values = {\n    red: state.red,\n    green: state.green,\n    blue: state.blue\n  };\n\n  priv.set(this, state);\n\n  Board.Controller.call(this, controller, opts);\n\n  Object.defineProperties(this, {\n    isOn: {\n      get: function() {\n        return RGB.colors.some(function(color) {\n          return state[color] > 0;\n        });\n      }\n    },\n    isRunning: {\n      get: function() {\n        return !!state.interval;\n      }\n    },\n    isAnode: {\n      get: function() {\n        return state.isAnode;\n      }\n    },\n    values: {\n      get: function() {\n        return Object.assign({}, state.values);\n      }\n    },\n    update: {\n      value: function(colors) {\n        var state = priv.get(this);\n\n        colors = colors || this.color();\n\n        state.values = RGB.ToScaledRGB(state.intensity, colors);\n\n        this.write(state.values);\n\n        Object.assign(state, colors);\n      }\n    }\n  });\n\n  this.initialize(opts);\n  this.off();\n}\n\nRGB.colors = [\"red\", \"green\", \"blue\"];\n\n\nRGB.ToScaledRGB = function(intensity, colors) {\n  var scale = intensity / 100;\n\n  return RGB.colors.reduce(function(current, color) {\n    return (current[color] = Math.round(colors[color] * scale), current);\n  }, {});\n};\n\nRGB.ToRGB = function(red, green, blue) {\n  var update = {};\n  var flags = 0;\n  var input;\n\n  if (typeof red !== \"undefined\") {\n    // 0b100\n    flags |= 1 << 2;\n  }\n\n  if (typeof green !== \"undefined\") {\n    // 0b010\n    flags |= 1 << 1;\n  }\n\n  if (typeof blue !== \"undefined\") {\n    // 0b001\n    flags |= 1 << 0;\n  }\n\n  if ((flags | 0x04) === 0x04) {\n    input = red;\n\n    if (input == null) {\n      throw new Error(\"Invalid color (\" + input + \")\");\n    }\n\n    /* istanbul ignore else */\n    if (Array.isArray(input)) {\n      // color([Byte, Byte, Byte])\n      update = {\n        red: input[0],\n        green: input[1],\n        blue: input[2]\n      };\n    } else if (typeof input === \"object\") {\n      // color({\n      //   red: Byte,\n      //   green: Byte,\n      //   blue: Byte\n      // });\n      update = {\n        red: input.red,\n        green: input.green,\n        blue: input.blue\n      };\n    } else if (typeof input === \"string\") {\n\n      // color(\"#ffffff\") or color(\"ffffff\")\n      if (/^#?[0-9A-Fa-f]{6}$/.test(input)) {\n\n        // remove the leading # if there is one\n        if (input.length === 7 && input[0] === \"#\") {\n          input = input.slice(1);\n        }\n\n        update = {\n          red: parseInt(input.slice(0, 2), 16),\n          green: parseInt(input.slice(2, 4), 16),\n          blue: parseInt(input.slice(4, 6), 16)\n        };\n      } else {\n        // color(\"rgba(r, g, b, a)\") or color(\"rgb(r, g, b)\")\n        // color(\"rgba(r g b a)\") or color(\"rgb(r g b)\")\n        if (/^rgb/.test(input)) {\n          var args = input.match(/^rgba?\\(([^)]+)\\)$/)[1].split(/[\\s,]+/);\n\n          // If the values were %...\n          if (isPercentString(args[0])) {\n            args.forEach(function(value, index) {\n              // Only convert the first 3 values\n              if (index <= 2) {\n                args[index] = Math.round((parseInt(value, 10) / 100) * 255);\n              }\n            });\n          }\n\n          update = {\n            red: parseInt(args[0], 10),\n            green: parseInt(args[1], 10),\n            blue: parseInt(args[2], 10)\n          };\n\n          // If rgba(...)\n          if (args.length > 3) {\n            if (isPercentString(args[3])) {\n              args[3] = parseInt(args[3], 10) / 100;\n            }\n            update = RGB.ToScaledRGB(100 * parseFloat(args[3]), update);\n          }\n        } else {\n          // color name\n          return RGB.ToRGB(converter.keyword.rgb(input.toLowerCase()));\n        }\n      }\n    }\n  } else {\n    // color(red, green, blue)\n    update = {\n      red: red,\n      green: green,\n      blue: blue\n    };\n  }\n\n  return update;\n};\n\nfunction isPercentString(input) {\n  return typeof input === \"string\" && input.endsWith(\"%\");\n}\n/**\n * color\n *\n * @param  {String} color Hexadecimal color string or CSS color name\n * @param  {Array} color Array of color values\n * @param  {Object} color object {red, green, blue}\n *\n * @return {RGB}\n */\nRGB.prototype.color = function(red, green, blue) {\n  var state = priv.get(this);\n  var colors;\n\n  if (arguments.length === 0) {\n    // Return a copy of the state values,\n    // not a reference to the state object itself.\n    colors = this.isOn ? state : state.prev;\n    return RGB.colors.reduce(function(current, color) {\n      return (current[color] = Math.round(colors[color]), current);\n    }, {});\n  }\n\n  var update = RGB.ToRGB(red, green, blue);\n\n  // Validate all color values before writing any values\n  RGB.colors.forEach(function(color) {\n    var value = update[color];\n\n    if (value == null) {\n      throw new Error(\"Led.RGB.color: invalid color ([\" + [update.red, update.green, update.blue].join(\",\") + \"])\");\n    }\n\n    value = Fn.constrain(value, 0, 255);\n    update[color] = value;\n  }, this);\n\n  this.update(update);\n\n  return this;\n};\n\nRGB.prototype.on = function() {\n  var state = priv.get(this);\n  var colors;\n\n  // If it's not already on, we set them to the previous color\n  if (!this.isOn) {\n    /* istanbul ignore next */\n    colors = state.prev || {\n      red: 255,\n      green: 255,\n      blue: 255\n    };\n\n    state.prev = null;\n\n    this.update(colors);\n  }\n\n  return this;\n};\n\nRGB.prototype.off = function() {\n  var state = priv.get(this);\n\n  // If it's already off, do nothing so the pervious state stays intact\n  /* istanbul ignore else */\n  if (this.isOn) {\n    state.prev = RGB.colors.reduce(function(current, color) {\n      return (current[color] = state[color], current);\n    }.bind(this), {});\n\n    this.update({\n      red: 0,\n      green: 0,\n      blue: 0\n    });\n  }\n\n  return this;\n};\n\n/**\n * blink\n * @param  {Number} duration Time in ms on, time in ms off\n * @return {RGB}\n */\nRGB.prototype.blink = function(duration, callback) {\n  var state = priv.get(this);\n\n  // Avoid traffic jams\n  this.stop();\n\n  if (typeof duration === \"function\") {\n    callback = duration;\n    duration = null;\n  }\n\n  state.interval = setInterval(function() {\n    this.toggle();\n    if (typeof callback === \"function\") {\n      callback();\n    }\n  }.bind(this), duration || 100);\n\n  return this;\n};\n\nRGB.prototype.strobe = RGB.prototype.blink;\n\nRGB.prototype.toggle = function() {\n  return this[this.isOn ? \"off\" : \"on\"]();\n};\n\nRGB.prototype.stop = function() {\n  var state = priv.get(this);\n\n  if (state.interval) {\n    clearInterval(state.interval);\n  }\n\n  /* istanbul ignore if */\n  if (state.animation) {\n    state.animation.stop();\n  }\n\n  state.interval = null;\n\n  return this;\n};\n\nRGB.prototype.intensity = function(intensity) {\n  var state = priv.get(this);\n\n  if (arguments.length === 0) {\n    return state.intensity;\n  }\n\n  state.intensity = Fn.constrain(intensity, 0, 100);\n\n  this.update();\n\n  return this;\n};\n\n/**\n * Animation.normalize\n *\n * @param [number || object] keyFrames An array of step values or a keyFrame objects\n */\n\nRGB.prototype[Animation.normalize] = function(keyFrames) {\n  var state = priv.get(this);\n\n  // If user passes null as the first element in keyFrames use current value\n  if (keyFrames[0] === null) {\n    keyFrames[0] = state.values;\n  }\n\n  return keyFrames.reduce(function(accum, frame) {\n    var normalized = {};\n    var value = frame;\n    var color = null;\n    var intensity = state.intensity;\n\n    if (frame !== null) {\n      // Frames that are just numbers are not allowed\n      // because it is ambiguous.\n      if (typeof value === \"number\") {\n        throw new Error(\"RGB LEDs expect a complete keyFrame object or hexadecimal string value\");\n      }\n\n      if (typeof value === \"string\") {\n        color = value;\n      }\n\n      if (Array.isArray(value)) {\n        color = value;\n      } else {\n        if (typeof value === \"object\") {\n          if (typeof value.color !== \"undefined\") {\n            color = value.color;\n          } else {\n            color = value;\n          }\n        }\n      }\n\n      if (typeof frame.intensity === \"number\") {\n        intensity = frame.intensity;\n        delete frame.intensity;\n      }\n\n      normalized.easing = frame.easing || \"linear\";\n      normalized.value = RGB.ToScaledRGB(intensity, RGB.ToRGB(color));\n    } else {\n      normalized = frame;\n    }\n\n    accum.push(normalized);\n\n    return accum;\n  }, []);\n};\n\n/**\n * Animation.render\n *\n * @color [object] color object\n */\n\nRGB.prototype[Animation.render] = function(frames) {\n  return this.color(frames[0]);\n};\n\n/**\n * For multi-property animation, must define\n * the keys to use for tween calculation.\n */\nRGB.prototype[Animation.keys] = RGB.colors;\n\n/* istanbul ignore else */\nif (!!process.env.IS_TEST_MODE) {\n  RGB.Controllers = Controllers;\n  RGB.purge = function() {\n    priv.clear();\n  };\n}\n\nmodule.exports = RGB;\n","/home/travis/build/npmtest/node-npmtest-johnny-five/node_modules/johnny-five/lib/led/index.js":"var Led = require(\"./led\");\nLed.Collection = require(\"./leds\");\nLed.RGB = require(\"./rgb\");\nLed.RGB.Collection = require(\"./rgbs\");\nLed.Matrix = require(\"./matrix\");\nLed.Digits = require(\"./digits\");\n\n// TODO: Eliminate .Array for 1.0.0\nLed.Array = Led.Collection;\n\nmodule.exports = Led;\n","/home/travis/build/npmtest/node-npmtest-johnny-five/node_modules/johnny-five/lib/led/led.js":"var Board = require(\"../board\");\nvar Animation = require(\"../animation\");\nvar Expander = require(\"../expander\");\nvar Fn = require(\"../fn\");\nvar Pins = Board.Pins;\n\nvar priv = new Map();\n\nvar Controllers = {\n  PCA9685: {\n    initialize: {\n      value: function(opts) {\n\n        var state = priv.get(this);\n\n        this.address = opts.address || 0x40;\n        this.pwmRange = opts.pwmRange || [0, 4095];\n        this.frequency = opts.frequency || 200;\n\n        state.expander = Expander.get({\n          address: this.address,\n          controller: this.controller,\n          bus: this.bus,\n          pwmRange: this.pwmRange,\n          frequency: this.frequency,\n        });\n\n        this.pin = state.expander.normalize(opts.pin);\n\n        state.mode = this.io.MODES.PWM;\n      }\n    },\n    update: {\n      writable: true,\n      value: function(input) {\n        var state = priv.get(this);\n        var output = typeof input !== \"undefined\" ? input : state.value;\n        var value = state.isAnode ? 255 - Board.constrain(output, 0, 255) : output;\n        this.write(value);\n      }\n    },\n    write: {\n      writable: true,\n      value: function(value) {\n        var state = priv.get(this);\n        state.expander.analogWrite(this.pin, value);\n      }\n    }\n  },\n  DEFAULT: {\n    initialize: {\n      value: function(opts, pinValue) {\n\n        var state = priv.get(this);\n        var isFirmata = true;\n        var defaultLed;\n\n        isFirmata = Pins.isFirmata(this);\n\n        if (isFirmata && typeof pinValue === \"string\" && pinValue[0] === \"A\") {\n          pinValue = this.io.analogPins[+pinValue.slice(1)];\n        }\n\n        defaultLed = this.io.defaultLed || 13;\n        pinValue = +pinValue;\n\n        if (isFirmata && this.io.analogPins.includes(pinValue)) {\n          this.pin = pinValue;\n          state.mode = this.io.MODES.OUTPUT;\n        } else {\n          this.pin = typeof opts.pin === \"undefined\" ? defaultLed : opts.pin;\n          state.mode = this.io.MODES[\n            (this.board.pins.isPwm(this.pin) ? \"PWM\" : \"OUTPUT\")\n          ];\n        }\n\n        this.io.pinMode(this.pin, state.mode);\n      }\n    },\n    update: {\n      writable: true,\n      value: function(input) {\n        var state = priv.get(this);\n        var output = typeof input !== \"undefined\" ? input : state.value;\n        var value = state.isAnode ? 255 - Board.constrain(output, 0, 255) : output;\n\n        // If pin is not a PWM pin and brightness is not HIGH or LOW, emit an error\n        if (value !== this.io.LOW && value !== this.io.HIGH && this.mode !== this.io.MODES.PWM) {\n          Board.Pins.Error({\n            pin: this.pin,\n            type: \"PWM\",\n            via: \"Led\"\n          });\n        }\n\n        if (state.mode === this.io.MODES.OUTPUT) {\n          value = output;\n        }\n\n        this.write(value);\n      }\n    },\n    write: {\n      writable: true,\n      value: function(value) {\n        var state = priv.get(this);\n\n        if (state.mode === this.io.MODES.OUTPUT) {\n          this.io.digitalWrite(this.pin, value);\n        }\n\n        if (state.mode === this.io.MODES.PWM) {\n          this.io.analogWrite(this.pin, value);\n        }\n      }\n    }\n  }\n};\n\n/**\n * Led\n * @constructor\n *\n * five.Led(pin);\n *\n * five.Led({\n *   pin: number\n *  });\n *\n *\n * @param {Object} opts [description]\n *\n */\n\nfunction Led(opts) {\n  if (!(this instanceof Led)) {\n    return new Led(opts);\n  }\n\n  var pinValue = typeof opts === \"object\" ? opts.pin : opts;\n  var controller = null;\n\n  Board.Component.call(\n    this, opts = Board.Options(opts)\n  );\n\n  if (opts.controller && typeof opts.controller === \"string\") {\n    controller = Controllers[opts.controller.toUpperCase()];\n  } else {\n    controller = opts.controller;\n  }\n\n  if (controller == null) {\n    controller = Controllers.DEFAULT;\n  }\n\n  Object.defineProperties(this, controller);\n\n  var state = {\n    isAnode: opts.isAnode,\n    isOn: false,\n    isRunning: false,\n    value: null,\n    direction: 1,\n    mode: null,\n    intensity: 0,\n    interval: null\n  };\n\n  priv.set(this, state);\n\n  Object.defineProperties(this, {\n    value: {\n      get: function() {\n        return state.value;\n      }\n    },\n    mode: {\n      get: function() {\n        return state.mode;\n      }\n    },\n    isOn: {\n      get: function() {\n        return !!state.value;\n      }\n    },\n    isRunning: {\n      get: function() {\n        return state.isRunning;\n      }\n    },\n    animation: {\n      get: function() {\n        return state.animation;\n      }\n    }\n  });\n\n  /* istanbul ignore else */\n  if (typeof this.initialize === \"function\") {\n    this.initialize(opts, pinValue);\n  }\n}\n\n/**\n * on Turn the led on\n * @return {Led}\n */\nLed.prototype.on = function() {\n  var state = priv.get(this);\n\n  if (state.mode === this.io.MODES.OUTPUT) {\n    state.value = this.io.HIGH;\n  }\n\n  if (state.mode === this.io.MODES.PWM) {\n    // Assume we need to simply turn this all the way on, when:\n\n    // ...state.value is null\n    if (state.value === null) {\n      state.value = 255;\n    }\n\n    // ...there is no active interval\n    if (!state.interval) {\n      state.value = 255;\n    }\n\n    // ...the last value was 0\n    if (state.value === 0) {\n      state.value = 255;\n    }\n  }\n\n  this.update();\n\n  return this;\n};\n\n/**\n * off  Turn the led off\n * @return {Led}\n */\nLed.prototype.off = function() {\n  var state = priv.get(this);\n\n  state.value = 0;\n\n  this.update();\n\n  return this;\n};\n\n/**\n * toggle Toggle the on/off state of an led\n * @return {Led}\n */\nLed.prototype.toggle = function() {\n  return this[this.isOn ? \"off\" : \"on\"]();\n};\n\n/**\n * brightness\n * @param  {Number} value analog brightness value 0-255\n * @return {Led}\n */\nLed.prototype.brightness = function(brightness) {\n  var state = priv.get(this);\n  state.value = brightness;\n\n  this.update();\n\n  return this;\n};\n\n/**\n * intensity\n * @param  {Number} value Light intensity 0-100\n * @return {Led}\n */\nLed.prototype.intensity = function(intensity) {\n  var state = priv.get(this);\n\n  if (arguments.length === 0) {\n    return state.intensity;\n  }\n\n  state.intensity = Fn.constrain(intensity, 0, 100);\n\n  return this.brightness(Fn.scale(state.intensity, 0, 100, 0, 255));\n};\n\n/**\n * Animation.normalize\n *\n * @param [number || object] keyFrames An array of step values or a keyFrame objects\n */\n\nLed.prototype[Animation.normalize] = function(keyFrames) {\n  var state = priv.get(this);\n\n  // If user passes null as the first element in keyFrames use current value\n  /* istanbul ignore else */\n  if (keyFrames[0] === null) {\n    keyFrames[0] = {\n      value: state.value || 0\n    };\n  }\n\n  return keyFrames.map(function(frame) {\n    var value = frame;\n    /* istanbul ignore else */\n    if (frame !== null) {\n      // frames that are just numbers represent values\n      if (typeof frame === \"number\") {\n        frame = {\n          value: value,\n        };\n      } else {\n        if (typeof frame.brightness === \"number\") {\n          frame.value = frame.brightness;\n          delete frame.brightness;\n        }\n        if (typeof frame.intensity === \"number\") {\n          frame.value = Fn.scale(frame.intensity, 0, 100, 0, 255);\n          delete frame.intensity;\n        }\n      }\n\n      /* istanbul ignore else */\n      if (!frame.easing) {\n        frame.easing = \"linear\";\n      }\n    }\n    return frame;\n  });\n};\n\n/**\n * Animation.render\n *\n * @position [number] value to set the led to\n */\n\nLed.prototype[Animation.render] = function(position) {\n  var state = priv.get(this);\n  state.value = position[0];\n  return this.update();\n};\n\n/**\n * pulse Fade the Led in and out in a loop with specified time\n * @param  {number} duration Time in ms that a fade in/out will elapse\n * @return {Led}\n *\n * - or -\n *\n * @param  {Object} val An Animation() segment config object\n */\n\nLed.prototype.pulse = function(duration, callback) {\n  var state = priv.get(this);\n\n  this.stop();\n\n  var options = {\n    duration: typeof duration === \"number\" ? duration : 1000,\n    keyFrames: [0, 0xff],\n    metronomic: true,\n    loop: true,\n    easing: \"inOutSine\",\n    onloop: function() {\n      /* istanbul ignore else */\n      if (typeof callback === \"function\") {\n        callback();\n      }\n    }\n  };\n\n  if (typeof duration === \"object\") {\n    Object.assign(options, duration);\n  }\n\n  if (typeof duration === \"function\") {\n    callback = duration;\n  }\n\n  state.isRunning = true;\n\n  state.animation = state.animation || new Animation(this);\n  state.animation.enqueue(options);\n  return this;\n};\n\n/**\n * fade Fade an led in and out\n * @param  {Number} val  Analog brightness value 0-255\n * @param  {Number} duration Time in ms that a fade in/out will elapse\n * @return {Led}\n *\n * - or -\n *\n * @param  {Object} val An Animation() segment config object\n */\n\nLed.prototype.fade = function(val, duration, callback) {\n\n  var state = priv.get(this);\n\n  this.stop();\n\n  var options = {\n    duration: typeof duration === \"number\" ? duration : 1000,\n    keyFrames: [null, typeof val === \"number\" ? val : 0xff],\n    easing: \"outSine\",\n    oncomplete: function() {\n      state.isRunning = false;\n      /* istanbul ignore else */\n      if (typeof callback === \"function\") {\n        callback();\n      }\n    }\n  };\n\n  if (typeof val === \"object\") {\n    Object.assign(options, val);\n  }\n\n  if (typeof val === \"function\") {\n    callback = val;\n  }\n\n  if (typeof duration === \"object\") {\n    Object.assign(options, duration);\n  }\n\n  if (typeof duration === \"function\") {\n    callback = duration;\n  }\n\n  state.isRunning = true;\n\n  state.animation = state.animation || new Animation(this);\n  state.animation.enqueue(options);\n\n  return this;\n};\n\nLed.prototype.fadeIn = function(duration, callback) {\n  return this.fade(255, duration || 1000, callback);\n};\n\nLed.prototype.fadeOut = function(duration, callback) {\n  return this.fade(0, duration || 1000, callback);\n};\n\n/**\n * blink\n * @param  {Number} duration Time in ms on, time in ms off\n * @return {Led}\n */\nLed.prototype.blink = function(duration, callback) {\n  var state = priv.get(this);\n\n  // Avoid traffic jams\n  this.stop();\n\n  if (typeof duration === \"function\") {\n    callback = duration;\n    duration = null;\n  }\n\n  state.isRunning = true;\n\n  state.interval = setInterval(function() {\n    this.toggle();\n    if (typeof callback === \"function\") {\n      callback();\n    }\n  }.bind(this), duration || 100);\n\n  return this;\n};\n\nLed.prototype.strobe = Led.prototype.blink;\n\n/**\n * stop Stop the led from strobing, pulsing or fading\n * @return {Led}\n */\nLed.prototype.stop = function() {\n  var state = priv.get(this);\n\n  if (state.interval) {\n    clearInterval(state.interval);\n  }\n\n  if (state.animation) {\n    state.animation.stop();\n  }\n\n  state.interval = null;\n  state.isRunning = false;\n\n  return this;\n};\n\n/* istanbul ignore else */\nif (!!process.env.IS_TEST_MODE) {\n  Led.Controllers = Controllers;\n  Led.purge = function() {\n    priv.clear();\n  };\n}\n\n\nmodule.exports = Led;\n","/home/travis/build/npmtest/node-npmtest-johnny-five/node_modules/johnny-five/lib/led/leds.js":"var Animation = require(\"../animation\");\nvar Led = require(\"./led\");\nvar callbacks = require(\"./callbacks\");\nvar Collection = require(\"../mixins/collection\");\nvar util = require(\"util\");\n\n/**\n * Leds()\n * new Leds()\n *\n * Create an Array-like object instance of Leds\n * @alias Led.Array\n * @constructor\n * @return {Leds}\n */\nfunction Leds(numsOrObjects) {\n  if (!(this instanceof Leds)) {\n    return new Leds(numsOrObjects);\n  }\n\n  Object.defineProperty(this, \"type\", {\n    value: Led\n  });\n\n  Collection.call(this, numsOrObjects);\n}\n\nutil.inherits(Leds, Collection);\n\nCollection.installMethodForwarding(\n  Leds.prototype, Led.prototype\n);\n\ncallbacks(Leds, [\"pulse\", \"fade\", \"fadeIn\", \"fadeOut\", \"blink\"]);\n\n/**\n * Animation.normalize\n *\n * @param [number || object] keyFrames An array of step values or a keyFrame objects\n */\n\nLeds.prototype[Animation.normalize] = function(keyFrameSet) {\n  return keyFrameSet.map(function(keyFrames, index) {\n    if (keyFrames !== null) {\n      return this[index][Animation.normalize](keyFrames);\n    }\n    return keyFrames;\n  }, this);\n};\n\n/**\n * Animation.render\n *\n * @position [number] array of values to set the leds to\n */\n\nLeds.prototype[Animation.render] = function(frames) {\n  return this.each(function(led, i) {\n    led[Animation.render]([frames[i]]);\n  });\n};\n\n\nmodule.exports = Leds;\n","/home/travis/build/npmtest/node-npmtest-johnny-five/node_modules/johnny-five/lib/led/callbacks.js":"var noop = function() {};\n\nmodule.exports = function(klass, methods) {\n  // Methods with callbacks need to have the callback called\n  // as a result of all entries reaching completion, not\n  // calling the callback once for each entry completion.\n  // Uses an array to match pattern in Led, and may be more\n  // in future.\n  methods.forEach(function(method) {\n    klass.prototype[method] = function(duration, callback) {\n      var length = this.length;\n      var signals = [];\n      var led;\n\n      if (typeof duration === \"function\") {\n        callback = duration;\n        duration = 1000;\n      }\n\n      if (typeof callback !== \"function\") {\n        callback = noop;\n      }\n\n      for (var i = 0; i < length; i++) {\n        led = this[i];\n        signals.push(\n          /* jshint ignore:start */\n          new Promise(function(resolve) {\n            led[method](duration, function() {\n              resolve();\n            });\n          })\n          /* jshint ignore:end */\n        );\n      }\n\n      Promise.all(signals).then(callback);\n\n      return this;\n    };\n  });\n};\n","/home/travis/build/npmtest/node-npmtest-johnny-five/node_modules/johnny-five/lib/led/rgbs.js":"var Animation = require(\"../animation\");\nvar callbacks = require(\"./callbacks\");\nvar Collection = require(\"../mixins/collection\");\nvar RGB = require(\"./rgb\");\nvar util = require(\"util\");\n\n/**\n * RGBs()\n * new RGBs()\n *\n * Create an Array-like object instance of RGBs\n * @alias Led.RGB.Collection\n * @constructor\n * @return {RGBs}\n */\nfunction RGBs(numsOrObjects) {\n  if (!(this instanceof RGBs)) {\n    return new RGBs(numsOrObjects);\n  }\n\n  Object.defineProperty(this, \"type\", {\n    value: RGB\n  });\n\n  Collection.call(this, numsOrObjects);\n}\n\nutil.inherits(RGBs, Collection);\n\nCollection.installMethodForwarding(\n  RGBs.prototype, RGB.prototype\n);\n\ncallbacks(RGBs, [\"blink\"]);\n\n\n/**\n * Animation.normalize\n *\n * @param [number || object] keyFrames An array of step values or a keyFrame objects\n */\n\nRGBs.prototype[Animation.normalize] = function(keyFrameSet) {\n  return keyFrameSet.map(function(keyFrames, index) {\n    if (keyFrames !== null) {\n      return this[index][Animation.normalize](keyFrames);\n    }\n    return keyFrames;\n  }, this);\n};\n\n/**\n * Animation.render\n *\n * @position [number] array of values to set the leds to\n */\n\nRGBs.prototype[Animation.render] = function(frames) {\n  return this.each(function(rgb, i) {\n    rgb[Animation.render]([frames[i]]);\n  });\n};\n\n/**\n * For multi-property animation, must define\n * the keys to use for tween calculation.\n */\nRGBs.prototype[Animation.keys] = RGB.colors;\n\n\nmodule.exports = RGBs;\n","/home/travis/build/npmtest/node-npmtest-johnny-five/node_modules/johnny-five/lib/led/matrix.js":"var LedControl = require(\"./ledcontrol\");\n\n// stub implementation; extract functionality from ledcontrol.js\nfunction Matrix(opts) {\n  opts.isMatrix = true;\n  return new LedControl(opts);\n}\n\nObject.assign(Matrix, LedControl, {\n  CHARS: LedControl.MATRIX_CHARS\n});\n\nmodule.exports = Matrix;\n","/home/travis/build/npmtest/node-npmtest-johnny-five/node_modules/johnny-five/lib/led/ledcontrol.js":"/*\n  About the original version of ledcontrol.js:\n\n  This was originally a port by Rebecca Murphey of the LedControl library\n  and also includes a port of the AdaFruit LEDBackpack library\n  (MIT License, Copyright (c) 2012 Adafruit Industries)\n\n  The license of the original LedControl library is as follows:\n\n  LedControl.cpp - A library for controling Leds with a MAX7219/MAX7221\n  Copyright (c) 2007 Eberhard Fahle\n\n  Permission is hereby granted, free of charge, to any person\n  obtaining a copy of this software and associated documentation\n  files (the \"Software\"), to deal in the Software without\n  restriction, including without limitation the rights to use,\n  copy, modify, merge, publish, distribute, sublicense, and/or sell\n  copies of the Software, and to permit persons to whom the\n  Software is furnished to do so, subject to the following\n  conditions:\n\n  This permission notice shall be included in all copies or\n  substantial portions of the Software.\n\n  THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND,\n  EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES\n  OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND\n  NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT\n  HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY,\n  WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING\n  FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR\n  OTHER DEALINGS IN THE SOFTWARE.\n\n */\nvar util = require(\"util\");\nvar Board = require(\"../board\");\nvar ledCharacters = require(\"./led-chars\");\n\n// Led instance private data\nvar priv = new Map(),\n  Controllers;\n\n/**\n * Create an LED control.\n * @mixes Board.Component\n * @param {Object}  opts              An options hash.\n * @param {String}  [opts.controller] The controller to use. Either default (\"MAX 7219\") or \"HT16K33\".\n * @param {Boolean} [opts.colon]      Whether the device has a built in colon.\n * @param {Number}  [opts.devices]    The number of connected LED devices.\n * @param {Array}   [opts.addresses]  I2C addresses.\n * @param {*}       opts.pins         The digital pin numbers that connect to\n *                                    data, clock, and cs connections on the controller device.\n *                                    Only for use with the default controller.\n *                                    Accepts either an object ({data, clock, cs})\n *                                    or an array ([data, clock, cs]).\n * @param {*}       [opts.dims]       Dimensions of the LED screen.\n *                                    Only for use with the HT16K33 controller.\n * @param {Boolean} [opts.isBicolor]  Whether the LED screen is bicolor.\n *                                    Only for use with the HT16K33 controller.\n */\nfunction LedControl(opts) {\n\n  Board.Component.call(\n    this, opts = Board.Options(opts)\n  );\n\n  /*\n   device instance uses an interface from Controllers:\n   either MAX 7219 (default) or HT16K33\n   */\n  var controller = null;\n\n  if (typeof opts.controller === \"string\") {\n    controller = Controllers[opts.controller];\n  } else {\n    controller = opts.controller;\n  }\n\n  if (typeof controller === \"undefined\") {\n    controller = Controllers.DEFAULT;\n  }\n\n  // functions from Controller interface\n\n  this.clear = controller.clear;\n  this.led = controller.led;\n  this.row = controller.row;\n  this.scanLimit = controller.scanLimit;\n  this.send = controller.send;\n  this.sendDigit = controller.sendDigit;\n  this.initialize = controller.initialize;\n\n  // controller specific op codes\n  this.OP = controller.OP;\n\n  // digit indexes may be ordered left to right (1) or reversed (-1)\n  this.digitOrder = 1;\n\n  // Does the device have a built-in colon?\n  /* istanbul ignore else */\n  if (!this.isMatrix) {\n    this.colon = opts.colon || false;\n  }\n\n  // extra functions for HT16K33 devices only\n  if (controller.writeDisplay) {\n    this.writeDisplay = controller.writeDisplay;\n  }\n  if (controller.blink) {\n    this.blink = controller.blink;\n  }\n  /*\n    devices variable indicates number of connected LED devices\n    Here's an example of multiple devices:\n    http://tronixstuff.com/2013/10/11/tutorial-arduino-max7219-led-display-driver-ic/\n   */\n  var devices = opts.devices || (opts.addresses ? opts.addresses.length : 1);\n\n  this.memory = Array(64).fill(0);\n\n  opts.dims = opts.dims || LedControl.MATRIX_DIMENSIONS[\"8x8\"];\n  if (typeof opts.dims === \"string\") {\n    opts.dims = LedControl.MATRIX_DIMENSIONS[opts.dims];\n  }\n  if (Array.isArray(opts.dims)) {\n    opts.dims = {\n      rows: opts.dims[0],\n      columns: opts.dims[1],\n    };\n  }\n  var state = {\n    devices: devices,\n    digits: opts.digits || 8,\n    isMatrix: !!opts.isMatrix,\n    isBicolor: !!opts.isBicolor,\n    rows: opts.dims.rows,\n    columns: opts.dims.columns\n  };\n\n  if (!(state.columns === 8 || state.columns === 16) || !(state.rows === 8 || state.rows === 16) || (state.columns + state.rows === 32)) {\n    throw new Error(\"Invalid matrix dimensions specified: must be 8x8, 16x8 or 8x16\");\n  }\n\n  Object.defineProperties(this, {\n    devices: {\n      get: function() {\n        return state.devices;\n      }\n    },\n    digits: {\n      get: function() {\n        return state.digits;\n      }\n    },\n    isMatrix: {\n      get: function() {\n        return state.isMatrix;\n      }\n    },\n    isBicolor: {\n      get: function() {\n        return state.isBicolor;\n      }\n    },\n    rows: {\n      get: function() {\n        return state.rows;\n      }\n    },\n    columns: {\n      get: function() {\n        return state.columns;\n      }\n    }\n  });\n\n  priv.set(this, state);\n  controller.initialize.call(this, opts);\n}\n\n/**\n * Iterate over the index of each connected device and invoke a callback function\n * for each.\n * @param {Function} callbackfn The function to callback for each device index.\n */\nLedControl.prototype.each = function(callbackfn) {\n  for (var i = 0; i < this.devices; i++) {\n    callbackfn.call(this, i);\n  }\n};\n\n/**\n * Turn the LED device(s) on.\n * @param  {Number} addr The index of the device to turn on.\n *                       If undefined, all devices are turned on.\n * @return {LEDControl}  Returns this to allow for chaining.\n */\nLedControl.prototype.on = function(addr) {\n  if (typeof addr === \"undefined\") {\n    this.each(function(device) {\n      this.on(device);\n    });\n  } else {\n    this.send(addr, this.OP.SHUTDOWN || LedControl.OP.SHUTDOWN, 1);\n  }\n  return this;\n};\n\n/**\n * Turn the LED device(s) off.\n * @param  {Number} addr The index of the device to turn off.\n *                       If undefined, all devices are turned off.\n * @return {LEDControl}  Returns this to allow for chaining.\n */\nLedControl.prototype.off = function(addr) {\n  if (typeof addr === \"undefined\") {\n    this.each(function(device) {\n      this.off(device);\n    });\n  } else {\n    this.send(addr, this.OP.SHUTDOWN || LedControl.OP.SHUTDOWN, 0);\n  }\n  return this;\n};\n\n/* istanbul ignore next */\nLedControl.prototype.setLed = util.deprecate(function(addr, chr, val, dp) {\n  /* istanbul ignore next */\n  return this.led(addr, chr, val, dp);\n}, \"LedControl.prototype.setLed: Use `led`instead\");\n\n/**\n * digit Display a digit and optional decimal point.\n * @param  {Number} addr      Device address\n * @param  {Number} position  0-7\n * @param  {String} val       0-9[.]\n * @return {LedControl}\n */\nLedControl.prototype.digit = function(addr, position, chr) {\n  var args, offset, index, character, value;\n  var hasDecimal = false;\n\n  if (arguments.length < 3) {\n    args = Array.from(arguments);\n    this.each(function(device) {\n      this.digit.apply(this, (args.unshift(device), args));\n    });\n    return this;\n  }\n\n  if (this.isMatrix) {\n    // Not sure this is the best path, will check when segment\n    // devices are available.\n    this.draw.apply(this, arguments);\n    return this;\n  }\n\n  offset = addr * this.digits;\n\n  character = String(chr);\n  position = Number(position);\n\n  // If controller's indexes are ordered right to left, flip\n  // the index around.\n  index = position;\n  if (this.digitOrder === -1) {\n    index = this.digits - index - 1;\n  }\n\n  if (character.length === 2 && character[1] === \".\") {\n    hasDecimal = true;\n    character = character[0];\n  }\n\n  value = LedControl.DIGIT_CHARS[character];\n\n  if (!value) {\n    value = Math.abs(Number(character));\n  }\n\n  if (hasDecimal) {\n    value = value | LedControl.DIGIT_CHARS[\".\"];\n  }\n\n  this.memory[offset + index] = value;\n  this.sendDigit(addr, index, value);\n  return this;\n};\n\n/**\n * print Print series of characters to the display.\n * @param  {String} message One or more characters to be displayed.\n * @param  {Object} opts    (Optional) Options specifying:\n *                          - device: {Number} Device address\n * @return {LedControl}\n */\nLedControl.prototype.print = function(message, opts) {\n  var rdigchars = /([0-9A-Za-z][.]|[0-9A-Za-z:]|[\\s])/g;\n  var characters;\n\n  opts = opts || {\n    device: 0\n  };\n\n  if (this.isMatrix) {\n    // figure out what to do with Matrix displays\n    throw new Error(\"Led.Matrix does not yet support the print method\");\n  }\n\n  if (typeof message !== \"string\") {\n    message = String(message);\n  }\n\n  characters = message.match(rdigchars);\n\n  // When a device has a built-in colon, ie. \"00:00\",\n  // then attempt to make it less awkward to print words across\n  // the display by splicing in a \" \" placeholder, but only\n  // when necessary.\n  if (this.colon) {\n    if (characters.length > 2 &&\n      (characters[2] !== \":\" && characters[2] !== \" \")) {\n      characters.splice(2, 0, \" \");\n    }\n  }\n\n  /* istanbul ignore next */\n  (characters || []).forEach(function(character, position) {\n    this.digit(opts.device, position, character);\n  }, this);\n  return this;\n};\n\n/*\n * brightness\n * @param {Number} addr Address of Led device\n * @param {Number} val Brightness value\n */\nLedControl.prototype.brightness = function(addr, val) {\n  if (arguments.length === 1) {\n    val = addr;\n    this.each(function(device) {\n      this.brightness(device, val);\n    });\n  } else {\n    this.send(addr, this.OP.BRIGHTNESS || LedControl.OP.BRIGHTNESS, Board.map(val, 0, 100, 0, 15));\n  }\n  return this;\n};\n/**\n * column Update an entire column with an 8 or 16 bit value\n * @param  {Number} addr Device address\n * @param  {Number} col  0 indexed col number 0-7\n * @param  {Number} val  8-bit 0-0xFF (for 8x8 or 16x8 matrix) or 16-bit 0-0xFFFF (for 8x16) value\n * @return {LedControl}\n */\nLedControl.prototype.column = function(addr, col, value) {\n  var state;\n  if (!this.isMatrix) {\n    throw new Error(\"The `column` method is only supported for Matrix devices\");\n  }\n  if (arguments.length === 2) {\n    value = col;\n    col = addr;\n    this.each(function(device) {\n      this.column(device, col, value);\n    });\n  } else {\n    for (var row = 0; row < this.rows; row++) {\n      state = value >> ((this.rows - 1) - row);\n      state = state & 0x01;\n      this.led(addr, row, col, state);\n    }\n  }\n\n  return this;\n};\n\n/**\n * draw Draw a character\n * @param  {Number} addr  Device address\n * @param  {Number} chr   Character to draw\n *\n * Used as pass-through to .digit\n *\n * @param  {Number} val   8-bit value 0-255\n * @param  {Number} dp    ugly\n * @return {LedControl}\n */\nLedControl.prototype.draw = function(addr, chr) {\n  // in matrix mode, this takes two arguments:\n  // addr and the character to display\n  var character;\n\n  if (arguments.length === 1) {\n    chr = addr;\n    this.each(function(device) {\n      this.draw(device, chr);\n    });\n  } else {\n\n    if (this.isMatrix) {\n      if (Array.isArray(chr)) {\n        character = chr;\n      } else {\n        character = ledCharacters.MATRIX_CHARS[chr];\n      }\n\n      /* istanbul ignore else */\n      if (character !== undefined) {\n        if (character.length !== this.rows && character.length !== this.columns) {\n          throw new Error(\"Invalid character: \" + character);\n        }\n        // pad character to match number of rows suppported by device\n        var charLength = character.length;\n\n        for (var i = 0; i < (this.rows - charLength); i++) {\n          /* istanbul ignore next */\n          character.push(0);\n        }\n\n        character.forEach(function(rowData, idx) {\n          this.row(addr, idx, rowData);\n        }, this);\n      }\n    } else {\n\n      // in seven-segment mode, this takes four arguments, which\n      // are just passed through to digit\n      this.digit.apply(this, arguments);\n    }\n  }\n\n  return this;\n};\n\n// LedControl.prototype.shift = function(addr, direction, distance) {\n\n//   if (arguments.length === 2) {\n//     distance = direction;\n//     direction = addr;\n//     this.each(function() {\n//       this.shift(addr, direction, distance);\n//     });\n//   } else {\n\n//   }\n\n//   return this;\n// };\n\n/* istanbul ignore next */\nLedControl.prototype.char = util.deprecate(function(addr, chr, val, dp) {\n  /* istanbul ignore next */\n  return this.draw(addr, chr, val, dp);\n}, \"LedControl.prototype.setLed: Use `draw`instead\");\n\nLedControl.prototype.device = function(addr) {\n  var bound = {};\n\n  /* keys from prototype */\n  Object.keys(LedControl.prototype).forEach(function(key) {\n    bound[key] = this[key].bind(this, addr);\n  }, this);\n\n  /* functions from interface */\n  Object.getOwnPropertyNames(this).forEach(function(key) {\n    if (this[key] && typeof this[key] === \"function\") {\n      bound[key] = this[key].bind(this, addr);\n    }\n  }, this);\n  return bound;\n};\n\nvar addresses = new Set([0x70, 0x71, 0x72, 0x73, 0x74, 0x75, 0x76, 0x77]);\n\nControllers = {\n  HT16K33: {\n    OP: {\n      SHUTDOWN: 0x20,\n      BRIGHTNESS: 0xE0,\n      BLINK: 0x80\n    },\n    initialize: function(opts) {\n      var state = priv.get(this);\n      var available = Array.from(addresses);\n\n      if (available.length === 0) {\n        throw new Error(\"There are no available HT16K33 controller addresses\");\n      }\n\n      this.addresses = opts.addresses || (opts.address ? [opts.address] : null);\n\n      // use default range of addresses if addresses aren't specified\n      if (this.addresses === null) {\n        this.addresses = available.slice(0, state.devices);\n      }\n\n      this.addresses.forEach(function(address) {\n        if (!addresses.has(address)) {\n          throw new Error(\"Invalid HT16K33 controller address: \" + address);\n        }\n        addresses.delete(address);\n      });\n\n      this.rotation = opts.rotation || 1;\n      // set a default rotation that works with AdaFruit 16x8 matrix if using 16 columns\n      /* istanbul ignore next */\n      if (this.columns === 16 && !opts.rotation) {\n        this.rotation = 0;\n      }\n      this.buffer = Array(this.rows).fill([]);\n\n      if (!this.isMatrix) {\n        this.colon = true;\n      }\n\n      opts.addresses = this.addresses;\n\n      // Set up I2C data connection\n      this.io.i2cConfig(opts);\n      // TODO allow setup to be configured through opts\n      this.each(function(device) {\n        this.on(device);\n        // Turn off blinking during initialization, in case it was left on.\n        this.blink(device, false);\n        this.brightness(device, 100);\n        this.clear(device);\n      });\n    },\n\n    /**\n     * Blink the screen.\n     *\n     * @param  {*} addr      Either the index of the device to blink,\n     *                       or the blink value to apply to all devices.\n     * @param  {String} val  The blink value. Either 'slow' (once every 2 seconds),\n     *                       'normal' (once every second), 'fast' (once every 500ms),\n     *                       or false to turn off blinking.\n     * @return {LedControl}  Returns this to allow for chaining.\n     */\n    blink: function(addr, val) {\n      if (arguments.length === 1) {\n        val = addr;\n        this.each(function(device) {\n          this.blink(device, val);\n        });\n      } else {\n        var _val = null;\n        // Translate human-readable value to value expected by HT16K33, see datasheet.\n        switch (val) {\n          case false:\n            _val = 0;\n            break;\n          case \"slow\":\n            _val = 6;\n            break;\n          case \"normal\":\n            _val = 4;\n            break;\n          case \"fast\":\n            _val = 2;\n            break;\n        }\n        /* istanbul ignore if */\n        if (_val == null) {\n          return;\n        }\n        // Add 1 to the opcode to turn blinking functionality on, see datasheet.\n        this.send(addr, this.OP.BLINK | 1, _val);\n      }\n      return this;\n    },\n\n    /*\n     * clear\n     * @param {Number} addr Address of Led device\n     */\n    clear: function(addr) {\n      var offset;\n      if (typeof addr === \"undefined\") {\n        this.each(function(device) {\n          this.clear(device);\n        });\n      } else {\n        offset = addr * this.columns;\n\n        for (var i = 0; i < this.rows; i++) {\n          this.memory[offset + i] = 0;\n          this.buffer[addr][i] = 0;\n        }\n        this.writeDisplay(addr);\n      }\n      return this;\n    },\n    /**\n     * led or setLed Set the memory of a single Led.\n     *\n     * @param {Number} addr Address of Led\n     * @param {Number} row Row number of Led (0-7)\n     * @param {Number} column Column number of Led (0-7)\n     * @param {Boolean} state [ true: on, false: off ] [ 1, 0 ] or an LedControl color code\n     *\n     */\n    led: function(addr, row, col, state) {\n\n      if (arguments.length === 3) {\n        state = col;\n        col = row;\n        row = addr;\n        this.each(function(device) {\n          this.led(device, row, col, state);\n        });\n        return this;\n      } else {\n        var x = col;\n        var y = row;\n        var tmp, rows = this.rows,\n          columns = this.columns;\n        if ((y < 0) || (y >= rows)) {\n          return this;\n        }\n        if ((x < 0) || (x >= columns)) {\n          return this;\n        }\n        switch (this.rotation) {\n          case 1:\n            columns = this.rows;\n            rows = this.columns;\n            tmp = x;\n            x = y;\n            y = tmp;\n            x = columns - x - 1;\n            break;\n          case 2:\n            x = columns - x - 1;\n            y = rows - y - 1;\n            break;\n          case 3:\n            columns = this.rows;\n            rows = this.columns;\n            tmp = x;\n            x = y;\n            y = tmp;\n            y = rows - y - 1;\n            break;\n        }\n        if (!this.isBicolor) {\n          // x needs to be wrapped around for single color 8x8 AdaFruit matrix\n          /* istanbul ignore else */\n          if (columns === 8 && rows === 8) {\n            x += columns - 1;\n            x %= columns;\n          }\n          if (state) {\n            this.buffer[addr][y] |= 1 << x;\n          } else {\n            this.buffer[addr][y] &= ~(1 << x);\n          }\n        } else {\n          // 8x8 bi-color matrixes only\n          if (state === LedControl.COLORS.GREEN) {\n            // Turn on green LED.\n            this.buffer[addr][y] |= 1 << x;\n            // Turn off red LED.\n            this.buffer[addr][y] &= ~(1 << (x + 8));\n          } else if (state === LedControl.COLORS.YELLOW) {\n            // Turn on green and red LED.\n            this.buffer[addr][y] |= (1 << (x + 8)) | (1 << x);\n          } else if (state === LedControl.COLORS.RED) {\n            // Turn on red LED.\n            this.buffer[addr][y] |= 1 << (x + 8);\n            // Turn off green LED.\n            this.buffer[addr][y] &= ~(1 << x);\n          } else {\n            // Turn off green and red LED.\n            this.buffer[addr][y] &= ~(1 << x) & ~(1 << (x + 8));\n          }\n        }\n        this.writeDisplay(addr);\n      }\n      return this;\n    },\n    writeDisplay: function(addr) {\n      var bytes = [0x00];\n      // always writes 8 rows (for 8x16, the values have already been rotated)\n      for (var i = 0; i < 8; i++) {\n        bytes.push(this.buffer[addr][i] & 0xFF);\n        bytes.push(this.buffer[addr][i] >> 8);\n      }\n      this.io.i2cWrite(this.addresses[addr], bytes);\n    },\n\n    /**\n     * row Update an entire row with an 8 bit value\n     * @param  {Number} addr Device address\n     * @param  {Number} row  0 indexed row number 0-7\n     * @param  {Number} val  8-bit value 0-255\n     * @return {LedControl}\n     */\n    row: function(addr, row, val /* 0 - 0xFFFF or string */ ) {\n      if (!this.isMatrix) {\n        throw new Error(\"The `row` method is only supported for Matrix devices\");\n      }\n      if (typeof val === \"number\") {\n        val = (\"0000000000000000\" + parseInt(val, 10).toString(2)).substr(0 - (this.columns), this.columns);\n      }\n      if (arguments.length === 2) {\n        val = row;\n        row = addr;\n        this.each(function(device) {\n          this.row(device, row, val);\n        });\n      } else {\n\n        // call the led function because the handling of rotation\n        // and wrapping for monochrome matrixes is done there\n        for (var i = 0; i < this.columns; i++) {\n          this.led(addr, row, i, parseInt(val[i], 10));\n        }\n      }\n\n      return this;\n    },\n\n    scanLimit: function() {\n      throw new Error(\"The `scanLimit` method is not implemented for HT16K33 devices\");\n    },\n\n    /*\n     * Send data to the LED controller.\n     * @param {Number} addr   Index of the device to address.\n     * @param {Number} opcode Operation code.\n     * @param {Number} data   Data.\n     */\n    send: function(addr, opcode, data) {\n      if (arguments.length !== 3) {\n        throw new Error(\"The `send` method expects three arguments: device, opcode, data\");\n      }\n      this.io.i2cWrite(this.addresses[addr], [opcode | data]);\n      return this;\n    },\n\n    /**\n     * sendDigit\n     * @param  {Number} addr     Device address.\n     * @param  {Number} index    0-7\n     * @param  {Number} code     8-bit value 0-255\n     * @return {LedControl}\n     */\n    sendDigit: function(addr, index, code) {\n      // Given:\n      //\n      //   0 === 0b00000000\n      // 255 === 0b11111111\n      //\n      // ...0 & 255 can be skipped.\n      //\n      if (code > 0 && code < 255) {\n        // Convert from hex to binary, padded to 8 bits.\n        code = (\"00000000\" + code.toString(2)).slice(-8).split(\"\");\n        // Reverse bits for each display segment except the decimal,\n        // to match the HT16K33 controller's segment ordering.\n        code = code.shift() + code.reverse().join(\"\");\n        code = parseInt(code, 2);\n      }\n\n      // Convert to decimal and write to the display.\n      this.buffer[addr][index] = code;\n      this.writeDisplay(addr);\n      return this;\n    },\n  },\n\n  DEFAULT: {\n    OP: {},\n    initialize: function(opts) {\n\n      this.pins = {\n        data: opts.pins.data,\n        clock: opts.pins.clock,\n        cs: opts.pins.cs || opts.pins.latch\n      };\n      [\"data\", \"clock\", \"cs\"].forEach(function(pin) {\n        this.io.pinMode(this.pins[pin], this.io.MODES.OUTPUT);\n      }, this);\n      // NOTE: Currently unused, these will form\n      // the basis for the `setup` constructor option\n      // var setup = Object.assign({}, LedControl.DEFAULTS, opts.setup || {});\n      // var keys = Object.keys(setup);\n\n      // digit indexes ordered right to left.\n      this.digitOrder = -1;\n      this.digitOrder = -1;\n\n      for (var device = 0; device < this.devices; device++) {\n        /*\n          TODO: Add support for custom initialization\n\n          An example of initialization, added to the constructor options:\n\n            setup: {\n              // OPCODE: VALUE\n              DECODING: 0,\n              BRIGHTNESS: 3,\n              SCANLIMIT: 7,\n              SHUTDOWN: 1,\n              DISPLAYTEST: 1\n            },\n\n\n          In context:\n\n            var lc = new five.LedControl({\n              pins: {\n                data: 2,\n                clock: 3,\n                cs: 4\n              },\n              setup: {\n                DECODING: 0,\n                BRIGHTNESS: 3,\n                SCANLIMIT: 7,\n                SHUTDOWN: 1,\n                DISPLAYTEST: 1\n              },\n              isMatrix: true\n            });\n\n\n          The custom initializers are invoked as:\n\n            keys.forEach(function(key) {\n              this.send(device, LedControl.OP[key], setup[key]);\n            }, this);\n\n\n          I might be missing something obvious, but this isn't working.\n          Using the same options shown below, the above should behave exactly the\n          same way that the code below does, but that's not the case. The result is\n          all leds in the matrix are lit and none can be cleared.\n          */\n        if (this.isMatrix) {\n          this.send(device, LedControl.OP.DECODING, 0);\n        }\n\n        this.send(device, LedControl.OP.BRIGHTNESS, 3);\n        this.send(device, LedControl.OP.SCANLIMIT, 7);\n        this.send(device, LedControl.OP.SHUTDOWN, 1);\n        this.send(device, LedControl.OP.DISPLAYTEST, 0);\n\n        this.clear(device);\n        this.on(device);\n      }\n      return this;\n\n    },\n    clear: function(addr) {\n      var offset;\n\n      if (typeof addr === \"undefined\") {\n        this.each(function(device) {\n          this.clear(device);\n        });\n      } else {\n        offset = addr * 8;\n\n        for (var i = 0; i < 8; i++) {\n          this.memory[offset + i] = 0;\n          this.send(addr, i + 1, 0);\n        }\n      }\n      return this;\n    },\n\n    /**\n     * sendDigit\n     * @param  {Number} addr     Device address.\n     * @param  {Number} index    0-7\n     * @param  {Number} code     8-bit value 0-255\n     * @return {LedControl}\n     */\n    sendDigit: function(addr, index, code) {\n      this.send(addr, index + 1, code);\n      return this;\n    },\n\n    /**\n     * led or setLed Set the memory of a single Led.\n     *\n     * @param {Number} addr Address of Led\n     * @param {Number} row Row number of Led (0-7)\n     * @param {Number} column Column number of Led (0-7)\n     * @param {Boolean} state [ true: on, false: off ] [ 1, 0 ]\n     *\n     */\n    led: function(addr, row, col, state) {\n      var offset, val;\n\n      if (arguments.length === 3) {\n        state = col;\n        col = row;\n        row = addr;\n        this.each(function(device) {\n          this.led(device, row, col, state);\n        });\n      } else {\n        offset = addr * this.columns;\n        val = 0x80 >> col;\n\n        if (state) {\n          this.memory[offset + row] = this.memory[offset + row] | val;\n        } else {\n          val = ~val;\n          this.memory[offset + row] = this.memory[offset + row] & val;\n        }\n        this.send(addr, row + 1, this.memory[offset + row]);\n      }\n\n      return this;\n    },\n\n    /**\n     * row Update an entire row with an 8 bit value\n     * @param  {Number} addr Device address\n     * @param  {Number} row  0 indexed row number 0-7\n     * @param  {Number} val  8-bit value 0-255\n     * @return {LedControl}\n     */\n    row: function(addr, row, val /* 0 - 255 or string */ ) {\n      if (!this.isMatrix) {\n        throw new Error(\"The `row` method is only supported for Matrix devices\");\n      }\n      var offset;\n      if (typeof val === \"string\") {\n        val = parseInt(val, 2);\n      }\n      if (arguments.length === 2) {\n        val = row;\n        row = addr;\n        this.each(function(device) {\n          this.row(device, row, val);\n        });\n      } else {\n        offset = addr * this.columns;\n        this.memory[offset + row] = val;\n        this.send(addr, row + 1, this.memory[offset + row]);\n      }\n\n      return this;\n    },\n    /*\n     * scanLimit (function from interface)\n     * @param {Number} addr Address of Led device\n     * @param {Number} limit\n     */\n    scanLimit: function(addr, limit) {\n      if (arguments.length === 1) {\n        limit = addr;\n        this.each(function(device) {\n          this.scanLimit(device, limit);\n        });\n      } else {\n        this.send(addr, LedControl.OP.SCANLIMIT, limit);\n      }\n      return this;\n    },\n    send: function(addr, opcode, data) {\n      if (arguments.length !== 3) {\n        throw new Error(\"`send` expects three arguments: device, opcode, data\");\n      }\n      var offset = addr * 2;\n      var maxBytes = this.devices * 2;\n      var spiData = [];\n\n      if (addr < this.devices) {\n        for (var i = 0; i < maxBytes; i++) {\n          spiData[i] = 0;\n        }\n\n        spiData[offset + 1] = opcode;\n        spiData[offset] = data;\n\n        this.io.digitalWrite(this.pins.cs, this.io.LOW);\n\n        for (var j = maxBytes; j > 0; j--) {\n          this.board.shiftOut(this.pins.data, this.pins.clock, spiData[j - 1]);\n        }\n\n        this.io.digitalWrite(this.pins.cs, this.io.HIGH);\n      }\n\n      return this;\n    }\n  }\n};\n\n// NOTE: Currently unused, these will form\n// the basis for the `setup` constructor option\nLedControl.DEFAULTS = {\n  DECODING: 0x00,\n  BRIGHTNESS: 0x03,\n  SCANLIMIT: 0x07,\n  SHUTDOWN: 0x01,\n  DISPLAYTEST: 0x00\n};\n\nObject.freeze(LedControl.DEFAULTS);\n\nLedControl.OP = {};\n\nLedControl.OP.NOOP = 0x00;\n\nLedControl.OP.DIGIT0 = 0x01;\nLedControl.OP.DIGIT1 = 0x02;\nLedControl.OP.DIGIT2 = 0x03;\nLedControl.OP.DIGIT3 = 0x04;\nLedControl.OP.DIGIT4 = 0x05;\nLedControl.OP.DIGIT5 = 0x06;\nLedControl.OP.DIGIT6 = 0x07;\nLedControl.OP.DIGIT7 = 0x08;\n\nLedControl.OP.DECODEMODE = 0x09;\nLedControl.OP.INTENSITY = 0x0a;\nLedControl.OP.SCANLIMIT = 0x0b;\nLedControl.OP.SHUTDOWN = 0x0c;\nLedControl.OP.DISPLAYTEST = 0x0f;\n\n// Aliases\nLedControl.OP.BRIGHTNESS = LedControl.OP.INTENSITY;\nLedControl.OP.DECODING = LedControl.OP.DECODEMODE;\nLedControl.OP.DISPLAY = LedControl.OP.DISPLAYTEST;\nLedControl.OP.POWERDOWN = LedControl.OP.SHUTDOWN;\n\nObject.freeze(LedControl.OP);\n\nLedControl.COLORS = {\n  RED: 1,\n  YELLOW: 2,\n  GREEN: 3\n};\n\nLedControl.DIRECTIONS = {\n  UP: 1,\n  RIGHT: 2,\n  DOWN: 3,\n  LEFT: 4,\n  1: \"UP\",\n  2: \"RIGHT\",\n  3: \"DOWN\",\n  4: \"LEFT\",\n};\n\nObject.freeze(LedControl.DIRECTIONS);\n\n// Double Digit Numbers\n//\n// Each digit:\n//\n// - is drawn as far to the left as possible.\n// - uses 3 bits\n//\nvar digits = [\n  [0xe0, 0xa0, 0xa0, 0xa0, 0xa0, 0xa0, 0xe0, 0x00],\n  [0x40, 0xc0, 0x40, 0x40, 0x40, 0x40, 0xe0, 0x00],\n  [0xe0, 0x20, 0x20, 0xe0, 0x80, 0x80, 0xe0, 0x00],\n  [0xe0, 0x20, 0x20, 0x60, 0x20, 0x20, 0xe0, 0x00],\n  [0x20, 0x60, 0xa0, 0xe0, 0x20, 0x20, 0x20, 0x00],\n  [0xe0, 0x80, 0x80, 0xe0, 0x20, 0x20, 0xe0, 0x00],\n  [0xe0, 0x80, 0x80, 0xe0, 0xa0, 0xa0, 0xe0, 0x00],\n  [0xe0, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x00],\n  [0xe0, 0xa0, 0xa0, 0x40, 0xa0, 0xa0, 0xe0, 0x00],\n  [0xe0, 0xa0, 0xa0, 0xe0, 0x20, 0x20, 0xe0, 0x00],\n];\n\nvar charName = \"\";\n\nfor (var i = 0; i < 10; i++) {\n  for (var k = 0; k < 10; k++) {\n    charName = i + \"\" + k;\n    ledCharacters.MATRIX_CHARS[charName] = [];\n\n    for (var j = 0; j < 8; j++) {\n      // Left digit takes 3 bits, plus 1 to between digits = 4 bits to the right.\n      ledCharacters.MATRIX_CHARS[charName][j] = digits[i][j] | (digits[k][j] >>> 4);\n    }\n  }\n}\n\nLedControl.MATRIX_DIMENSIONS = {\n  \"16x8\": {\n    rows: 16,\n    columns: 8\n  },\n  \"8x16\": {\n    rows: 8,\n    columns: 16\n  },\n  \"8x8\": {\n    rows: 8,\n    columns: 8\n  }\n};\n\nLedControl.MATRIX_CHARS = ledCharacters.MATRIX_CHARS;\nLedControl.DIGIT_CHARS = ledCharacters.DIGIT_CHARS;\n\n/* istanbul ignore else */\nif (!!process.env.IS_TEST_MODE) {\n  LedControl.Controllers = Controllers;\n  LedControl.purge = function() {\n    addresses = new Set([0x70, 0x71, 0x72, 0x73, 0x74, 0x75, 0x76, 0x77]);\n    priv.clear();\n  };\n}\n\nmodule.exports = LedControl;\n","/home/travis/build/npmtest/node-npmtest-johnny-five/node_modules/johnny-five/lib/led/led-chars.js":"// https://dl.dropboxusercontent.com/u/3531958/digits.html\n\nmodule.exports = {\n  MATRIX_CHARS: {\n    //symbols & punctuation\n    \" \": [0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00],\n    \"!\": [0x04, 0x04, 0x04, 0x04, 0x00, 0x00, 0x04, 0x00],\n    \"\\\"\": [0x0A, 0x0A, 0x0A, 0x00, 0x00, 0x00, 0x00, 0x00],\n    \"#\": [0x0A, 0x0A, 0x1F, 0x0A, 0x1F, 0x0A, 0x0A, 0x00],\n    \"$\": [0x04, 0x0F, 0x14, 0x0E, 0x05, 0x1E, 0x04, 0x00],\n    \"%\": [0x18, 0x19, 0x02, 0x04, 0x08, 0x13, 0x03, 0x00],\n    \"&\": [0x0C, 0x12, 0x14, 0x08, 0x15, 0x12, 0x0D, 0x00],\n    \"'\": [0x0C, 0x04, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00],\n    \"(\": [0x02, 0x04, 0x08, 0x08, 0x08, 0x04, 0x02, 0x00],\n    \")\": [0x08, 0x04, 0x02, 0x02, 0x02, 0x04, 0x08, 0x00],\n    \"*\": [0x00, 0x04, 0x15, 0x0E, 0x15, 0x04, 0x00, 0x00],\n    \"+\": [0x00, 0x04, 0x04, 0x1F, 0x04, 0x04, 0x00, 0x00],\n    \",\": [0x00, 0x00, 0x00, 0x00, 0x0C, 0x04, 0x08, 0x00],\n    \"-\": [0x00, 0x00, 0x00, 0x1F, 0x00, 0x00, 0x00, 0x00],\n    \".\": [0x00, 0x00, 0x00, 0x00, 0x00, 0x0C, 0x0C, 0x00],\n    \"/\": [0x00, 0x01, 0x02, 0x04, 0x08, 0x10, 0x00, 0x00],\n    \"[\": [0x0E, 0x08, 0x08, 0x08, 0x08, 0x08, 0x0E, 0x00],\n    \"\\\\\": [0x00, 0x10, 0x08, 0x04, 0x02, 0x01, 0x00, 0x00],\n    \"]\": [0x0E, 0x02, 0x02, 0x02, 0x02, 0x02, 0x0E, 0x00],\n    \"^\": [0x04, 0x0A, 0x11, 0x00, 0x00, 0x00, 0x00, 0x00],\n    \"_\": [0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1F, 0x00],\n    \"`\": [0x10, 0x08, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00],\n    \":\": [0x00, 0x0C, 0x0C, 0x00, 0x0C, 0x0C, 0x00, 0x00],\n    \";\": [0x00, 0x0C, 0x0C, 0x00, 0x0C, 0x04, 0x08, 0x00],\n    \"<\": [0x02, 0x04, 0x08, 0x10, 0x08, 0x04, 0x02, 0x00],\n    \"=\": [0x00, 0x00, 0x1F, 0x00, 0x1F, 0x00, 0x00, 0x00],\n    \">\": [0x08, 0x04, 0x02, 0x01, 0x02, 0x04, 0x08, 0x00],\n    \"?\": [0x0E, 0x11, 0x01, 0x02, 0x04, 0x00, 0x04, 0x00],\n    \"@\": [0x0E, 0x11, 0x01, 0x0D, 0x15, 0x15, 0x0E, 0x00],\n    \"{\": [0x02, 0x04, 0x04, 0x08, 0x04, 0x04, 0x02, 0x00],\n    \"|\": [0x04, 0x04, 0x04, 0x00, 0x04, 0x04, 0x04, 0x00],\n    \"}\": [0x08, 0x04, 0x04, 0x02, 0x04, 0x04, 0x08, 0x00],\n    \"~\": [0x08, 0x15, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00],\n\n    //standard numbers\n    \"0\": [0x0E, 0x11, 0x13, 0x15, 0x19, 0x11, 0x0E, 0x00],\n    \"1\": [0x04, 0x0C, 0x04, 0x04, 0x04, 0x04, 0x0E, 0x00],\n    \"2\": [0x0E, 0x11, 0x01, 0x02, 0x04, 0x08, 0x1F, 0x00],\n    \"3\": [0x1F, 0x02, 0x04, 0x02, 0x01, 0x11, 0x0E, 0x00],\n    \"4\": [0x02, 0x06, 0x0A, 0x12, 0x1F, 0x02, 0x02, 0x00],\n    \"5\": [0x1F, 0x10, 0x1E, 0x01, 0x01, 0x11, 0x0E, 0x00],\n    \"6\": [0x06, 0x08, 0x10, 0x1E, 0x11, 0x11, 0x0E, 0x00],\n    \"7\": [0x1F, 0x01, 0x02, 0x04, 0x04, 0x04, 0x04, 0x00],\n    \"8\": [0x1E, 0x11, 0x11, 0x0E, 0x11, 0x11, 0x0E, 0x00],\n    \"9\": [0x0E, 0x11, 0x11, 0x0F, 0x01, 0x02, 0x0C, 0x00],\n\n    //capital letters\n    \"A\": [0x08, 0x14, 0x22, 0x3E, 0x22, 0x22, 0x22, 0x22],\n    \"B\": [0x3C, 0x22, 0x22, 0x3E, 0x22, 0x22, 0x3C, 0x00],\n    \"C\": [0x3C, 0x40, 0x40, 0x40, 0x40, 0x40, 0x3C, 0x00],\n    \"D\": [0x7C, 0x42, 0x42, 0x42, 0x42, 0x42, 0x7C, 0x00],\n    \"E\": [0x7C, 0x40, 0x40, 0x7C, 0x40, 0x40, 0x40, 0x7C],\n    \"F\": [0x7C, 0x40, 0x40, 0x7C, 0x40, 0x40, 0x40, 0x40],\n    \"G\": [0x3C, 0x40, 0x40, 0x40, 0x40, 0x44, 0x44, 0x3C],\n    \"H\": [0x44, 0x44, 0x44, 0x7C, 0x44, 0x44, 0x44, 0x44],\n    \"I\": [0x7C, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x7C],\n    \"J\": [0x3C, 0x08, 0x08, 0x08, 0x08, 0x08, 0x48, 0x30],\n    \"K\": [0x00, 0x24, 0x28, 0x30, 0x20, 0x30, 0x28, 0x24],\n    \"L\": [0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x7C],\n    \"M\": [0x81, 0xC3, 0xA5, 0x99, 0x81, 0x81, 0x81, 0x81],\n    \"N\": [0x00, 0x42, 0x62, 0x52, 0x4A, 0x46, 0x42, 0x00],\n    \"O\": [0x3C, 0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 0x3C],\n    \"P\": [0x3C, 0x22, 0x22, 0x22, 0x3C, 0x20, 0x20, 0x20],\n    \"Q\": [0x1C, 0x22, 0x22, 0x22, 0x22, 0x26, 0x22, 0x1D],\n    \"R\": [0x3C, 0x22, 0x22, 0x22, 0x3C, 0x24, 0x22, 0x21],\n    \"S\": [0x00, 0x1E, 0x20, 0x20, 0x3E, 0x02, 0x02, 0x3C],\n    \"T\": [0x00, 0x3E, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08],\n    \"U\": [0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 0x22, 0x1C],\n    \"V\": [0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 0x24, 0x18],\n    \"W\": [0x00, 0x49, 0x49, 0x49, 0x49, 0x2A, 0x1C, 0x00],\n    \"X\": [0x00, 0x41, 0x22, 0x14, 0x08, 0x14, 0x22, 0x41],\n    \"Y\": [0x41, 0x22, 0x14, 0x08, 0x08, 0x08, 0x08, 0x08],\n    \"Z\": [0x00, 0x7F, 0x02, 0x04, 0x08, 0x10, 0x20, 0x7F],\n\n    //question: do these need to stay or what?\n    // \"A\": [0x0E, 0x11, 0x11, 0x11, 0x1F, 0x11, 0x11, 0x00],\n    // \"B\": [0x1E, 0x09, 0x09, 0x0E, 0x09, 0x09, 0x1E, 0x00],\n    // \"C\": [0x0E, 0x11, 0x10, 0x10, 0x10, 0x11, 0x0E, 0x00],\n    // \"D\": [0x1E, 0x09, 0x09, 0x09, 0x09, 0x09, 0x1E, 0x00],\n    // \"E\": [0x1F, 0x10, 0x10, 0x1F, 0x10, 0x10, 0x1F, 0x00],\n    // \"F\": [0x1F, 0x10, 0x10, 0x1E, 0x10, 0x10, 0x10, 0x00],\n    // \"G\": [0x0E, 0x11, 0x10, 0x13, 0x11, 0x11, 0x0F, 0x00],\n    // \"H\": [0x11, 0x11, 0x11, 0x1F, 0x11, 0x11, 0x11, 0x00],\n    // \"I\": [0x0E, 0x04, 0x04, 0x04, 0x04, 0x04, 0x0E, 0x00],\n    // \"J\": [0x07, 0x02, 0x02, 0x02, 0x02, 0x12, 0x0C, 0x00],\n    // \"K\": [0x11, 0x12, 0x14, 0x18, 0x14, 0x12, 0x11, 0x00],\n    // \"L\": [0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x1F, 0x00],\n    // \"M\": [0x11, 0x1B, 0x15, 0x15, 0x11, 0x11, 0x11, 0x00],\n    // \"N\": [0x11, 0x19, 0x19, 0x15, 0x13, 0x13, 0x11, 0x00],\n    // \"O\": [0x0E, 0x11, 0x11, 0x11, 0x11, 0x11, 0x0E, 0x00],\n    // \"P\": [0x1E, 0x11, 0x11, 0x1E, 0x10, 0x10, 0x10, 0x00],\n    // \"Q\": [0x0E, 0x11, 0x11, 0x11, 0x15, 0x12, 0x1D, 0x00],\n    // \"R\": [0x1E, 0x11, 0x11, 0x1E, 0x14, 0x12, 0x11, 0x00],\n    // \"S\": [0x0E, 0x11, 0x10, 0x0E, 0x01, 0x11, 0x0E, 0x00],\n    // \"T\": [0x1F, 0x04, 0x04, 0x04, 0x04, 0x04, 0x04, 0x00],\n    // \"U\": [0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x0E, 0x00],\n    // \"V\": [0x11, 0x11, 0x11, 0x11, 0x11, 0x0A, 0x04, 0x00],\n    // \"W\": [0x11, 0x11, 0x11, 0x15, 0x15, 0x1B, 0x11, 0x00],\n    // \"X\": [0x11, 0x11, 0x0A, 0x04, 0x0A, 0x11, 0x11, 0x00],\n    // \"Y\": [0x11, 0x11, 0x11, 0x0A, 0x04, 0x04, 0x04, 0x00],\n    // \"Z\": [0x1F, 0x01, 0x02, 0x04, 0x08, 0x10, 0x1F, 0x00],\n\n    //lowercase letters\n    \"a\": [0x00, 0x00, 0x0E, 0x01, 0x0F, 0x11, 0x0F, 0x00],\n    \"b\": [0x10, 0x10, 0x16, 0x19, 0x11, 0x11, 0x1E, 0x00],\n    \"c\": [0x00, 0x00, 0x0E, 0x11, 0x10, 0x11, 0x0E, 0x00],\n    \"d\": [0x01, 0x01, 0x0D, 0x13, 0x11, 0x11, 0x0F, 0x00],\n    \"e\": [0x00, 0x00, 0x0E, 0x11, 0x1F, 0x10, 0x0E, 0x00],\n    \"f\": [0x02, 0x05, 0x04, 0x0E, 0x04, 0x04, 0x04, 0x00],\n    \"g\": [0x00, 0x0D, 0x13, 0x13, 0x0D, 0x01, 0x0E, 0x00],\n    \"h\": [0x10, 0x10, 0x16, 0x19, 0x11, 0x11, 0x11, 0x00],\n    \"i\": [0x04, 0x00, 0x0C, 0x04, 0x04, 0x04, 0x0E, 0x00],\n    \"j\": [0x02, 0x00, 0x06, 0x02, 0x02, 0x12, 0x0C, 0x00],\n    \"k\": [0x08, 0x08, 0x09, 0x0A, 0x0C, 0x0A, 0x09, 0x00],\n    \"l\": [0x0C, 0x04, 0x04, 0x04, 0x04, 0x04, 0x0E, 0x00],\n    \"m\": [0x00, 0x00, 0x1A, 0x15, 0x15, 0x15, 0x15, 0x00],\n    \"n\": [0x00, 0x00, 0x16, 0x19, 0x11, 0x11, 0x11, 0x00],\n    \"o\": [0x00, 0x00, 0x0E, 0x11, 0x11, 0x11, 0x0E, 0x00],\n    \"p\": [0x00, 0x16, 0x19, 0x19, 0x16, 0x10, 0x10, 0x00],\n    \"q\": [0x00, 0x0D, 0x13, 0x13, 0x0D, 0x01, 0x01, 0x00],\n    \"r\": [0x00, 0x00, 0x16, 0x19, 0x10, 0x10, 0x10, 0x00],\n    \"s\": [0x00, 0x00, 0x0F, 0x10, 0x1E, 0x01, 0x1F, 0x00],\n    \"t\": [0x08, 0x08, 0x1C, 0x08, 0x08, 0x09, 0x06, 0x00],\n    \"u\": [0x00, 0x00, 0x12, 0x12, 0x12, 0x12, 0x0D, 0x00],\n    \"v\": [0x00, 0x00, 0x11, 0x11, 0x11, 0x0A, 0x04, 0x00],\n    \"w\": [0x00, 0x00, 0x11, 0x11, 0x15, 0x15, 0x0A, 0x00],\n    \"x\": [0x00, 0x00, 0x11, 0x0A, 0x04, 0x0A, 0x11, 0x00],\n    \"y\": [0x00, 0x00, 0x11, 0x11, 0x13, 0x0D, 0x01, 0x0E],\n    \"z\": [0x00, 0x00, 0x1F, 0x02, 0x04, 0x08, 0x1F, 0x00],\n\n    //misc.\n    euro: [0x0e, 0x10, 0x7c, 0x20, 0x7c, 0x20, 0x10, 0x0e],\n    cent: [0x00, 0x3c, 0x42, 0x40, 0x40, 0x52, 0x3c, 0x20],\n\n    //emojis + objects\n    angryface: [0x00, 0x66, 0x66, 0x00, 0x18, 0x24, 0x42, 0x81],\n    circle: [0x3c, 0x42, 0x81, 0x81, 0x81, 0x81, 0x42, 0x3c],\n    cdot: [0x3c, 0x42, 0x81, 0x99, 0x99, 0x81, 0x42, 0x3c],\n    donut: [0x3c, 0x7e, 0xff, 0xe7, 0xe7, 0xff, 0x7e, 0x3c],\n    equality: [0x00, 0xff, 0xff, 0x00, 0x00, 0xff, 0xff, 0x00],\n    ball: [0x3c, 0x7e, 0xff, 0xff, 0xff, 0xff, 0x7e, 0x3c],\n    thinsquare: [0xff, 0x81, 0x81, 0x81, 0x81, 0x81, 0x81, 0xff],\n    thicksquare: [0xff, 0xff, 0xc3, 0xc3, 0xc3, 0xc3, 0xff, 0xff],\n    centeredsquare1: [0x00, 0x00, 0x3c, 0x3c, 0x3c, 0x3c, 0x00, 0x00],\n    centeredsquare2: [0x00, 0x00, 0x3c, 0x3c, 0x3c, 0x3c, 0x00, 0x00],\n    arrowright: [0x00, 0x04, 0x06, 0xff, 0xff, 0x06, 0x04, 0x00],\n    arrowleft: [0x00, 0x20, 0x60, 0xff, 0xff, 0x60, 0x20, 0x00],\n    note: [0x04, 0x06, 0x07, 0x04, 0x3c, 0x7c, 0x7c, 0x38],\n    clock: [0x3c, 0x52, 0x91, 0x91, 0x8f, 0x81, 0x42, 0x3c],\n    heartoutline: [0x66, 0x99, 0x81, 0x81, 0x42, 0x24, 0x18, 0x00],\n    heartfull: [0x66, 0xff, 0xff, 0xff, 0x7e, 0x3c, 0x18, 0x00],\n    thincheck: [0x00, 0x00, 0x01, 0x02, 0x04, 0x88, 0x50, 0x20],\n    thickcheck: [0x00, 0x01, 0x03, 0x06, 0x8c, 0xd8, 0x70, 0x20],\n    speaker: [0x03, 0x07, 0x3f, 0x3f, 0x3f, 0x3f, 0x07, 0x03],\n    sound: [0x00, 0x40, 0x80, 0x00, 0xc0, 0x00, 0x80, 0x40],\n    xbig: [0xc3, 0xe7, 0x7e, 0x3c, 0x3c, 0x7e, 0xe7, 0xc3],\n    target: [0x3c, 0x7e, 0xc3, 0xdb, 0xdb, 0xc3, 0x7e, 0x3c],\n    bell: [0x18, 0x3c, 0x3c, 0x3c, 0x3c, 0x7e, 0x00, 0x18],\n    smile: [0x00, 0x66, 0x66, 0x00, 0x00, 0x81, 0x42, 0x3c],\n    frown: [0x00, 0x66, 0x66, 0x00, 0x00, 0x3c, 0x42, 0x81],\n    winkright: [0x00, 0x60, 0x66, 0x00, 0x00, 0x81, 0x42, 0x3c],\n    winkleft: [0x00, 0x06, 0x66, 0x00, 0x00, 0x81, 0x42, 0x3c],\n    blink: [0x00, 0x00, 0x66, 0x00, 0x00, 0x81, 0x42, 0x3c],\n    laughing: [0x00, 0x66, 0x66, 0x00, 0xff, 0x81, 0x42, 0x3c],\n    tongueout: [0x00, 0x66, 0x66, 0x00, 0x00, 0x7e, 0x0a, 0x04],\n    expressionless: [0x00, 0x66, 0x66, 0x00, 0x00, 0xff, 0x00, 0x00],\n\n    //patterns\n    ascprogress1: [0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80],\n    ascprogress2: [0xc0, 0xc0, 0xc0, 0xc0, 0xc0, 0xc0, 0xc0, 0xc0],\n    ascprogress3: [0xe0, 0xe0, 0xe0, 0xe0, 0xe0, 0xe0, 0xe0, 0xe0],\n    ascprogress4: [0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0],\n    ascprogress5: [0xf8, 0xf8, 0xf8, 0xf8, 0xf8, 0xf8, 0xf8, 0xf8],\n    ascprogress6: [0xfc, 0xfc, 0xfc, 0xfc, 0xfc, 0xfc, 0xfc, 0xfc],\n    ascprogress7: [0xfe, 0xfe, 0xfe, 0xfe, 0xfe, 0xfe, 0xfe, 0xfe],\n    fullprogress: [0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff],\n    descprogress1: [0x7f, 0x7f, 0x7f, 0x7f, 0x7f, 0x7f, 0x7f, 0x7f],\n    descprogress2: [0x3f, 0x3f, 0x3f, 0x3f, 0x3f, 0x3f, 0x3f, 0x3f],\n    descprogress3: [0x1f, 0x1f, 0x1f, 0x1f, 0x1f, 0x1f, 0x1f, 0x1f],\n    descprogress4: [0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f],\n    descprogress5: [0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07],\n    descprogress6: [0x03, 0x03, 0x03, 0x03, 0x03, 0x03, 0x03, 0x03],\n    descprogress7: [0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01],\n    ascchart1: [0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00],\n    ascchart2: [0xff, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00],\n    ascchart3: [0xff, 0xff, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00],\n    ascchart4: [0xff, 0xff, 0xff, 0xff, 0x00, 0x00, 0x00, 0x00],\n    ascchart5: [0xff, 0xff, 0xff, 0xff, 0xff, 0x00, 0x00, 0x00],\n    ascchart6: [0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x00, 0x00],\n    ascchart7: [0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x00],\n    ascchart8: [0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff],\n    descchart1: [0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff],\n    descchart2: [0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff],\n    descchart3: [0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff],\n    descchart4: [0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff],\n    descchart5: [0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff],\n    descchart6: [0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff],\n    descchart7: [0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff],\n    descchart8: [0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00],\n    borderleft1: [0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01],\n    borderleft2: [0x03, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x03],\n    borderleft3: [0x07, 0x04, 0x04, 0x04, 0x04, 0x04, 0x04, 0x07],\n    borderleft4: [0x0f, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x0f],\n    borderleft5: [0x1f, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x1f],\n    borderleft6: [0x3f, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x3f],\n    borderleft7: [0x7f, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x7f],\n    borderleft8: [0xff, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0xff],\n    bordertopbottom5: [0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff],\n    borderright1: [0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80],\n    borderright2: [0xc0, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0xc0],\n    borderright3: [0xe0, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0xe0],\n    borderright4: [0xf0, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0xf0],\n    borderright5: [0xf8, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0xf8],\n    borderright6: [0xfc, 0x04, 0x04, 0x04, 0x04, 0x04, 0x04, 0xfc],\n    borderright7: [0xfe, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0xfe],\n    borderright8: [0xff, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0xff],\n    box1: [0xe0, 0xe0, 0xe0, 0x00, 0x00, 0x00, 0x00, 0x00],\n    box2: [0x07, 0x07, 0x07, 0x00, 0x00, 0x00, 0x00, 0x00],\n    box3: [0xe7, 0xe7, 0xe7, 0x00, 0x00, 0x00, 0x00, 0x00],\n    box4: [0x00, 0x00, 0x00, 0x00, 0x00, 0x07, 0x07, 0x07],\n    box5: [0x07, 0x07, 0x07, 0x00, 0x00, 0x07, 0x07, 0x07],\n    box6: [0xe0, 0xe0, 0xe0, 0x00, 0x00, 0x07, 0x07, 0x07],\n    box7: [0xe7, 0xe7, 0xe7, 0x00, 0x00, 0x07, 0x07, 0x07],\n    box8: [0x00, 0x00, 0x00, 0x00, 0x00, 0xe0, 0xe0, 0xe0],\n    box9: [0x07, 0x07, 0x07, 0x00, 0x00, 0xe0, 0xe0, 0xe0],\n    box10: [0xe0, 0xe0, 0xe0, 0x00, 0x00, 0xe0, 0xe0, 0xe0],\n    box11: [0xe7, 0xe7, 0xe7, 0x00, 0x00, 0xe0, 0xe0, 0xe0],\n    box12: [0x00, 0x00, 0x00, 0x00, 0x00, 0xe7, 0xe7, 0xe7],\n    box13: [0x07, 0x07, 0x07, 0x00, 0x00, 0xe7, 0xe7, 0xe7],\n    box14: [0xe0, 0xe0, 0xe0, 0x00, 0x00, 0xe7, 0xe7, 0xe7],\n    box15: [0xe7, 0xe7, 0xe7, 0x00, 0x00, 0xe7, 0xe7, 0xe7],\n    checkerboard1: [0xaa, 0x55, 0xaa, 0x55, 0xaa, 0x55, 0xaa, 0x55],\n    checkerboard2: [0x55, 0xaa, 0x55, 0xaa, 0x55, 0xaa, 0x55, 0xaa],\n    checkerboard3: [0x5d, 0xea, 0x57, 0xba, 0x55, 0xee, 0x55, 0xbb],\n    checkerboard4: [0xcc, 0x33, 0x33, 0xcc, 0xcc, 0x33, 0x33, 0xcc],\n    checkerboard5: [0xcc, 0xcc, 0x33, 0x33, 0xcc, 0xcc, 0x33, 0x33],\n    checkerboard6: [0x33, 0xcc, 0xcc, 0x33, 0x33, 0xcc, 0xcc, 0x33],\n    checkerboard7: [0x33, 0x33, 0xcc, 0xcc, 0x33, 0x33, 0xcc, 0xcc],\n    pointerright: [0x20, 0x30, 0x38, 0x3c, 0x3c, 0x38, 0x30, 0x20],\n    pointerup: [0x00, 0x00, 0x18, 0x3c, 0x7e, 0xff, 0x00, 0x00],\n    pointerleft: [0x04, 0x0c, 0x1c, 0x3c, 0x3c, 0x1c, 0x0c, 0x04],\n    pointerdown: [0x00, 0x00, 0xff, 0x7e, 0x3c, 0x18, 0x00, 0x00],\n    arrowne: [0x00, 0x3e, 0x06, 0x0a, 0x12, 0x22, 0x40, 0x80],\n    arrownw: [0x00, 0x7c, 0x60, 0x50, 0x48, 0x44, 0x02, 0x01],\n    arrowsw: [0x01, 0x02, 0x44, 0x48, 0x50, 0x60, 0x7c, 0x00],\n    arrowse: [0x80, 0x40, 0x22, 0x12, 0x0a, 0x06, 0x3e, 0x00],\n    dice1: [0x00, 0x00, 0x00, 0x18, 0x18, 0x00, 0x00, 0x00],\n    dice2: [0xc0, 0xc0, 0x00, 0x00, 0x00, 0x00, 0x03, 0x03],\n    dice3: [0xc0, 0xc0, 0x00, 0x18, 0x18, 0x00, 0x03, 0x03],\n    dice4: [0xc3, 0xc3, 0x00, 0x00, 0x00, 0x00, 0xc3, 0xc3],\n    dice5: [0xc3, 0xc3, 0x00, 0x18, 0x18, 0x00, 0xc3, 0xc3],\n    dice6: [0xc3, 0xc3, 0x00, 0xc3, 0xc3, 0x00, 0xc3, 0xc3],\n    outlinedplus1: [0x3c, 0x24, 0xe7, 0x81, 0x81, 0xe7, 0x24, 0x3c],\n    outlinedplus2: [0xff, 0xe7, 0xe7, 0x81, 0x81, 0xe7, 0xe7, 0xff],\n    twoboxes1: [0xf0, 0x90, 0x90, 0xf0, 0x0f, 0x09, 0x09, 0x0f],\n    twoboxes2: [0xf0, 0x90, 0x90, 0xfe, 0x12, 0x12, 0x1e, 0x00],\n    twoboxes3: [0xf0, 0x90, 0xbc, 0xf4, 0x24, 0x3c, 0x00, 0x00],\n    twoboxes4: [0xf0, 0xf8, 0xd8, 0xf8, 0x78, 0x00, 0x00, 0x00],\n    twoboxes5: [0x0f, 0x09, 0x09, 0x0f, 0xf0, 0x90, 0x90, 0xf0],\n    fourboxes: [0xff, 0x99, 0x99, 0xff, 0xff, 0x99, 0x99, 0xff],\n    chain1: [0xf0, 0xf8, 0xd8, 0xf8, 0x78, 0x00, 0x00, 0x00],\n    chain2: [0xf0, 0x90, 0xbc, 0xf4, 0x2f, 0x3d, 0x09, 0x0f],\n  },\n\n  SPECIAL_CHARS: {\n    //thicker numbers\n    \"0\": [0x3c, 0x66, 0x66, 0x66, 0x66, 0x66, 0x66, 0x3c],\n    \"1\": [0x18, 0x38, 0x78, 0x18, 0x18, 0x18, 0x18, 0x18],\n    \"2\": [0x3c, 0x66, 0x06, 0x0c, 0x18, 0x30, 0x60, 0x7e],\n    \"3\": [0x3c, 0x66, 0x06, 0x1c, 0x06, 0x06, 0x66, 0x3c],\n    \"4\": [0x0e, 0x1e, 0x36, 0x66, 0x66, 0x7e, 0x06, 0x06],\n    \"5\": [0x7e, 0x60, 0x60, 0x7c, 0x06, 0x06, 0x66, 0x3c],\n    \"6\": [0x3c, 0x66, 0x60, 0x7c, 0x66, 0x66, 0x66, 0x3c],\n    \"7\": [0x7e, 0x7e, 0x06, 0x0c, 0x18, 0x18, 0x18, 0x18],\n    \"8\": [0x3c, 0x66, 0x66, 0x3c, 0x66, 0x66, 0x66, 0x3c],\n    \"9\": [0x3c, 0x66, 0x66, 0x3e, 0x06, 0x06, 0x66, 0x3c],\n\n    //Jory's double digits\n    \"10\": [0x5e, 0x52, 0x52, 0x52, 0x52, 0x5e, 0x00, 0xff],\n    \"11\": [0x24, 0x24, 0x24, 0x24, 0x24, 0x24, 0x00, 0xff],\n    \"12\": [0x5e, 0x42, 0x44, 0x48, 0x50, 0x5e, 0x00, 0xff],\n    \"13\": [0x5e, 0x42, 0x4e, 0x42, 0x42, 0x5e, 0x00, 0xff],\n    \"14\": [0x52, 0x52, 0x5e, 0x42, 0x42, 0x42, 0x00, 0xff],\n    \"15\": [0x5e, 0x50, 0x5e, 0x42, 0x42, 0x5e, 0x00, 0xff],\n    \"16\": [0x5e, 0x50, 0x5e, 0x52, 0x52, 0x5e, 0x00, 0xff],\n    \"17\": [0x5e, 0x42, 0x44, 0x48, 0x48, 0x48, 0x00, 0xff],\n    \"18\": [0x5e, 0x52, 0x5e, 0x52, 0x52, 0x5e, 0x00, 0xff],\n    \"19\": [0x5e, 0x52, 0x5e, 0x42, 0x42, 0x5e, 0x00, 0xff],\n  },\n\n  DIGIT_CHARS: {\n    \"0\": 0x7E,\n    \"1\": 0x30,\n    \"2\": 0x6D,\n    \"3\": 0x79,\n    \"4\": 0x33,\n    \"5\": 0x5B,\n    \"6\": 0x5F,\n    \"7\": 0x70,\n    \"8\": 0x7F,\n    \"9\": 0x7B,\n    \" \": 0x00,\n    \".\": 0x80,\n    \":\": 0xFF,\n    \"!\": 0xB0,\n    \"A\": 0x77,\n    \"a\": 0x7D,\n    \"B\": 0x7F,\n    \"b\": 0x1F,\n    \"C\": 0x4E,\n    \"c\": 0x0D,\n    \"D\": 0x7E,\n    \"d\": 0x3D,\n    \"E\": 0x4F,\n    \"e\": 0x6f,\n    \"F\": 0x47,\n    \"f\": 0x47,\n    \"G\": 0x5E,\n    \"g\": 0x7B,\n    \"H\": 0x37,\n    \"h\": 0x17,\n    \"I\": 0x30,\n    \"i\": 0x10,\n    \"J\": 0x3C,\n    \"j\": 0x38,\n    \"K\": 0x37,\n    \"k\": 0x17,\n    \"L\": 0x0E,\n    \"l\": 0x06,\n    \"M\": 0x55,\n    \"m\": 0x55,\n    \"N\": 0x15,\n    \"n\": 0x15,\n    \"O\": 0x7E,\n    \"o\": 0x1D,\n    \"P\": 0x67,\n    \"p\": 0x67,\n    \"Q\": 0x73,\n    \"q\": 0x73,\n    \"R\": 0x77,\n    \"r\": 0x05,\n    \"S\": 0x5B,\n    \"s\": 0x5B,\n    \"T\": 0x46,\n    \"t\": 0x0F,\n    \"U\": 0x3E,\n    \"u\": 0x1C,\n    \"V\": 0x27,\n    \"v\": 0x23,\n    \"W\": 0x3F,\n    \"w\": 0x2B,\n    \"X\": 0x25,\n    \"x\": 0x25,\n    \"Y\": 0x3B,\n    \"y\": 0x33,\n    \"Z\": 0x6D,\n    \"z\": 0x6D,\n  }\n};\n","/home/travis/build/npmtest/node-npmtest-johnny-five/node_modules/johnny-five/lib/led/digits.js":"var LedControl = require(\"./ledcontrol\");\n\n// stub implementation; extract functionality from ledcontrol.js\nfunction Digits(opts) {\n  opts.isMatrix = false;\n  return new LedControl(opts);\n}\n\nObject.assign(Digits, LedControl, {\n  CHARS: LedControl.DIGIT_CHARS\n});\n\nmodule.exports = Digits;\n","/home/travis/build/npmtest/node-npmtest-johnny-five/node_modules/johnny-five/lib/light.js":"var Board = require(\"./board\");\nvar EVS = require(\"./evshield\");\nvar within = require(\"./mixins/within\");\nvar Fn = require(\"./fn\");\nvar Emitter = require(\"events\").EventEmitter;\nvar util = require(\"util\");\nvar priv = new Map();\n// var int16 = Fn.int16;\nvar uint16 = Fn.uint16;\nvar toFixed = Fn.toFixed;\n\nvar Controllers = {\n  DEFAULT: {\n    initialize: {\n      value: function(opts, dataHandler) {\n        this.io.pinMode(this.pin, this.io.MODES.ANALOG);\n        this.io.analogRead(this.pin, dataHandler);\n      },\n    },\n    toIntensityLevel: {\n      value: function(raw) {\n        return toFixed(Fn.scale(raw, 0, 1023, 0, 100) / 100, 2);\n      }\n    }\n  },\n  EVS_EV3: {\n    initialize: {\n      value: function(opts, dataHandler) {\n        var state = priv.get(this);\n\n        if (opts.mode) {\n          opts.mode = opts.mode.toUpperCase();\n        }\n\n        state.mode = opts.mode === \"REFLECTED\" ? EVS.Type_EV3_LIGHT_REFLECTED : EVS.Type_EV3_LIGHT;\n\n        state.shield = EVS.shieldPort(opts.pin);\n        state.ev3 = new EVS(Object.assign(opts, {\n          io: this.io\n        }));\n        state.ev3.setup(state.shield, EVS.Type_EV3);\n        state.ev3.write(state.shield, 0x81 + state.shield.offset, state.mode);\n        state.ev3.read(state.shield, EVS.Light, EVS.Light_Bytes, function(data) {\n          var value = data[0] | (data[1] << 8);\n          dataHandler(value);\n        });\n      }\n    },\n    toIntensityLevel: {\n      value: function(raw) {\n        return toFixed(raw / 100, 2);\n      }\n    }\n  },\n  EVS_NXT: {\n    initialize: {\n      value: function(opts, dataHandler) {\n        var state = priv.get(this);\n\n        if (opts.mode) {\n          opts.mode = opts.mode.toUpperCase();\n        }\n\n        state.mode = opts.mode === \"REFLECTED\" ? EVS.Type_NXT_LIGHT_REFLECTED : EVS.Type_NXT_LIGHT;\n\n        state.shield = EVS.shieldPort(opts.pin);\n        state.ev3 = new EVS(Object.assign(opts, {\n          io: this.io\n        }));\n        state.ev3.setup(state.shield, state.mode);\n        state.ev3.read(state.shield, state.shield.analog, EVS.Analog_Bytes, function(data) {\n          var value = data[0] | (data[1] << 8);\n          dataHandler(value);\n        });\n      }\n    },\n    toIntensityLevel: {\n      value: function(raw) {\n        return toFixed(Fn.scale(raw, 0, 1023, 100, 0) / 100, 2);\n      }\n    }\n  },\n  // http://www.adafruit.com/datasheets/TSL2561.pdf\n  TSL2561: {\n    ADDRESSES: {\n      value: [0x29, 0x39, 0x49]\n    },\n    REGISTER: {\n      value: {\n        CONTROL: 0x00,\n        TIMING: 0x01,\n        READ: 0x2C,\n      },\n    },\n\n    initialize: {\n      value: function(opts, dataHandler) {\n        var address = opts.address || 0x39;\n        var command = function(byte) {\n          // byte | 0b10000000;\n          return byte | 0x80;\n        };\n\n        opts.address = address;\n\n        this.io.i2cConfig(opts);\n\n        // Page 15\n        // Control Register (0h)\n        // RESV  7:2\n        // POWER 1:0\n        //\n        // Power up/power down.\n        // By writing a 03h to this register, the device is powered up.\n        // By writing a 00h to this register, the device is powered down.\n        //\n        // 0b00000011 = 0x03\n        // 0b00000000 = 0x00\n        this.io.i2cWriteReg(address, command(this.REGISTER.CONTROL), 0x03);\n\n        // Gain & Integration\n        // var isAutoGain = false;\n\n        // Page 24\n        // Integration time scaling factors\n        var LUX_SCALE = 14; // scale by (2 ** 14)\n        var RATIO_SCALE = 9; // scale ratio by (2 ** 9)\n\n        // Page 24\n        // T, FN, and CL Package coefficients\n        var K1T = 0x0040; // 0.125 * (2 ** RATIO_SCALE)\n        var B1T = 0x01F2; // 0.0304 * (2 ** LUX_SCALE)\n        var M1T = 0x01BE; // 0.0272 * (2 ** LUX_SCALE)\n        var K2T = 0x0080; // 0.250 * (2 ** RATIO_SCALE)\n        var B2T = 0x0214; // 0.0325 * (2 ** LUX_SCALE)\n        var M2T = 0x02D1; // 0.0440 * (2 ** LUX_SCALE)\n        var K3T = 0x00C0; // 0.375 * (2 ** RATIO_SCALE)\n        var B3T = 0x023F; // 0.0351 * (2 ** LUX_SCALE)\n        var M3T = 0x037B; // 0.0544 * (2 ** LUX_SCALE)\n        var K4T = 0x0100; // 0.50 * (2 ** RATIO_SCALE)\n        var B4T = 0x0270; // 0.0381 * (2 ** LUX_SCALE)\n        var M4T = 0x03FE; // 0.0624 * (2 ** LUX_SCALE)\n        var K5T = 0x0138; // 0.61 * (2 ** RATIO_SCALE)\n        var B5T = 0x016F; // 0.0224 * (2 ** LUX_SCALE)\n        var M5T = 0x01FC; // 0.0310 * (2 ** LUX_SCALE)\n        var K6T = 0x019A; // 0.80 * (2 ** RATIO_SCALE)\n        var B6T = 0x00D2; // 0.0128 * (2 ** LUX_SCALE)\n        var M6T = 0x00FB; // 0.0153 * (2 ** LUX_SCALE)\n        var K7T = 0x029A; // 1.3 * (2 ** RATIO_SCALE)\n        var B7T = 0x0018; // 0.00146 * (2 ** LUX_SCALE)\n        var M7T = 0x0012; // 0.00112 * (2 ** LUX_SCALE)\n        var K8T = 0x029A; // 1.3 * (2 ** RATIO_SCALE)\n        var B8T = 0x0000; // 0.000 * (2 ** LUX_SCALE)\n        var M8T = 0x0000; // 0.000 * (2 ** LUX_SCALE)\n\n        // Auto-gain thresholds\n        // Max value at Ti 13ms = 5047\n        // var AGT_LO_13MS = 100;\n        // var AGT_HI_13MS = 4850;\n\n        // // Max value at Ti 101ms = 37177\n        // var AGT_LO_101MS = 200;\n        // var AGT_HI_101MS = 36000;\n\n        // // Max value at Ti 402ms = 65535\n        // var AGT_LO_402MS = 500;\n        // var AGT_HI_402MS = 63000;\n\n        // var agtRanges = [\n        //   // 0, TI_13MS\n        //   [100, 4850],\n        //   // 1, TI_101MS\n        //   [200, 36000],\n        //   // 2, TI_402MS\n        //   [500, 63000],\n        // ];\n\n        // var CLIPPING_13MS = 4900;\n        // var CLIPPING_101MS = 37000;\n        // var CLIPPING_402MS = 65000;\n\n        // var clipping = [\n        //   // 0, TI_13MS\n        //   4900,\n        //   // 1, TI_101MS\n        //   37000,\n        //   // 2, TI_402MS\n        //   65000,\n        // ];\n\n\n        var GAIN_1X = 0x00;\n        var GAIN_16X = 0x10;\n\n        // var TI_13MS = 0x00;\n        // var TI_101MS = 0x01;\n        // var TI_402MS = 0x02;\n\n        var TintMs = [\n          // 0, TI_13MS\n          13,\n          // 1, TI_101MS\n          101,\n          // 2, TI_402MS\n          402,\n        ];\n\n        var TintDelayMs = [\n          // 0, TI_13MS\n          15,\n          // 1, TI_101MS\n          120,\n          // 2, TI_402MS\n          450,\n        ];\n\n        // Page 23 - 28\n        // Simplified Lux Calculation\n        // var CH_SCALE_D = 0x0010;\n        // var CH_SCALE_0 = 0x7517;\n        // var CH_SCALE_1 = 0x0FE7;\n\n        var chScales = [\n          // 0, TI_13MS\n          0x07517,\n          // 1, TI_101MS\n          0x00FE7,\n          // 2, TI_402MS\n          0x10000,\n        ];\n\n        // Gain and Tint defaults;\n        var gain = GAIN_1X;\n        var TintIndex = 2;\n        var Tint = TintMs[TintIndex];\n        var lux = 0;\n\n        // if (typeof opts.gain !== \"undefined\") {\n        //   isAutoGain = false;\n        //   gain = opts.gain;\n        // }\n\n        // if (typeof opts.integration !== \"undefined\") {\n        //   isAutoGain = false;\n        //   Tint = opts.integration;\n        // }\n\n\n        // TODO: reduce duplication here\n        Object.defineProperties(this, {\n          gain: {\n            get: function() {\n              return gain;\n            },\n            set: function(value) {\n              if (value !== GAIN_1X && value !== GAIN_16X) {\n                throw new RangeError(\"Invalid gain. Expected one of: 0, 16\");\n              }\n              gain = value;\n\n              this.io.i2cWriteReg(address, command(this.REGISTER.TIMING), TintIndex | gain);\n            }\n          },\n          integration: {\n            get: function() {\n              return Tint;\n            },\n            set: function(value) {\n              TintIndex = TintMs.indexOf(value);\n\n              if (TintIndex === -1) {\n                throw new RangeError(\"Invalid integration. Expected one of: 13, 101, 402\");\n              }\n\n              Tint = value;\n\n              this.io.i2cWriteReg(address, command(this.REGISTER.TIMING), TintIndex | gain);\n            }\n          },\n          lux: {\n            get: function() {\n              return lux;\n            }\n          }\n        });\n\n        // Assign the default gain and integration values\n        // These are validated and written to the device.\n        // These will invoke the accessors above.\n        this.gain = gain;\n        this.integration = Tint;\n\n        // Page 1\n        // Description\n        // Page 2\n        // Functional Block Diagram\n        // var data = {\n        //   broadband: null,\n        //   infrared: null,\n        // };\n\n        var read = function() {\n          setTimeout(function() {\n            // Page 19\n            // Read ADC Channels Using Read Word Protocol − RECOMMENDED\n            this.io.i2cReadOnce(address, command(this.REGISTER.READ), 4, function(data) {\n              // Page 23 - 28\n              // Simplified Lux Calculation\n              var ch0 = uint16(data[1], data[0]);\n              var ch1 = uint16(data[3], data[2]);\n              var b = 0;\n              var m = 0;\n\n              // Page 26\n              // CalculateLux(...)\n              var scale = chScales[TintIndex];\n\n\n              if (!gain) {\n                scale = scale << 4;\n              }\n\n              // Page 27\n              // CalculateLux(...)\n              ch0 = (ch0 * scale) >> 10;\n              ch1 = (ch1 * scale) >> 10;\n\n              var ratio1 = 0;\n\n              if (ch0) {\n                ratio1 = (ch1 << (RATIO_SCALE + 1)) / ch0;\n              }\n\n              ratio1 = Math.round(ratio1);\n\n              var ratio = (ratio1 + 1) >> 1;\n\n              if (ratio >= 0 && ratio <= K1T) {\n                b = B1T;\n                m = M1T;\n              } else if (ratio <= K2T) {\n                b = B2T;\n                m = M2T;\n              } else if (ratio <= K3T) {\n                b = B3T;\n                m = M3T;\n              } else if (ratio <= K4T) {\n                b = B4T;\n                m = M4T;\n              } else if (ratio <= K5T) {\n                b = B5T;\n                m = M5T;\n              } else if (ratio <= K6T) {\n                b = B6T;\n                m = M6T;\n              } else if (ratio <= K7T) {\n                b = B7T;\n                m = M7T;\n              } else if (ratio > K8T) {\n                b = B8T;\n                m = M8T;\n              }\n              // I followed the datasheet and it had no else clause here.\n\n              var temp = (ch0 * b) - (ch1 * m);\n\n              if (temp < 0) {\n                temp = 0;\n              }\n\n              temp += 1 << (LUX_SCALE - 1);\n\n              // Updating the `lux` binding\n              // in the outer scope.\n              lux = temp >>> LUX_SCALE;\n\n              dataHandler(lux);\n              read();\n            });\n          }.bind(this), TintDelayMs[TintIndex]);\n        }.bind(this);\n\n        read();\n      }\n    },\n    toLux: {\n      value: function(raw) {\n        return raw;\n      },\n    },\n    toIntensityLevel: {\n      value: function(raw) {\n        return toFixed(Fn.scale(raw, 0, 17000, 0, 100) / 100, 2);\n      },\n    },\n  },\n  BH1750: {\n    // http://cpre.kmutnb.ac.th/esl/learning/bh1750-light-sensor/bh1750fvi-e_datasheet.pdf\n    // https://www.mysensors.org/dl/57cc6e4595afb8801e529dab/design/bh1750fvi-e.pdf\n    //\n    // code based on Arduino library https://github.com/claws/BH1750\n    // currently only \"continuous H-resolution\" mode supported\n    ADDRESSES: {\n      value: [0x23, 0x5C]\n    },\n    initialize: {\n      value: function(opts, dataHandler) {\n        var address = opts.address || 0x23;\n        var mode = opts.mode || 0x10;\n        opts.address = address;\n        this.io.i2cConfig(opts);\n        this.io.i2cWrite(address, mode);\n        var read = function() {\n          setTimeout(function() {\n            this.io.i2cReadOnce(address, 2, function(data) {\n              var raw = data[0];\n              raw <<= 8;\n              raw |= data[1];\n              dataHandler(raw);\n              read();\n            });\n          }.bind(this), 120);\n        }.bind(this);\n        read();\n      },\n    },\n    toLux: {\n      value: function(raw) {\n        // Page 2.\n        // H-Resolution Mode Resolution rHR － 1 － lx\n        return Math.round(raw / 1.2);\n      },\n    },\n    toIntensityLevel: {\n      value: function(raw) {\n        return toFixed(Fn.scale(raw / 1.2, 0, 65535, 0, 100) / 100, 2);\n      },\n    },\n  },\n};\n\nControllers.ALSPT19 = Controllers[\"ALS-PT19\"] = Controllers.DEFAULT;\n\n\n/**\n * Light\n * @constructor\n *\n */\n\nfunction Light(opts) {\n\n  if (!(this instanceof Light)) {\n    return new Light(opts);\n  }\n\n  var controller = null;\n  var state = {};\n  var raw = 0;\n  var last = 0;\n  var freq = opts.freq || 25;\n\n  Board.Component.call(\n    this, opts = Board.Options(opts)\n  );\n\n  if (typeof opts.controller === \"string\") {\n    controller = Controllers[opts.controller];\n  } else {\n    controller = opts.controller || Controllers.DEFAULT;\n  }\n\n  Board.Controller.call(this, controller, opts);\n\n  if (!this.toIntensityLevel) {\n    this.toIntensityLevel = opts.toIntensityLevel || function(x) {\n      return x;\n    };\n  }\n\n  if (!this.toLux) {\n    this.toLux = opts.toLux || function(x) {\n      return x;\n    };\n  }\n\n  Object.defineProperties(this, {\n    value: {\n      get: function() {\n        return raw;\n      },\n    },\n    level: {\n      get: function() {\n        return this.toIntensityLevel(raw);\n      },\n    },\n  });\n\n  priv.set(this, state);\n\n  /* istanbul ignore else */\n  if (typeof this.initialize === \"function\") {\n    this.initialize(opts, function(data) {\n      raw = data;\n    });\n  }\n\n  if (typeof this.lux === \"undefined\") {\n    Object.defineProperty(this, \"lux\", {\n      get: function() {\n        return this.toLux(raw);\n      },\n    });\n  }\n\n  var data = {\n    level: 0,\n    lux: 0,\n  };\n\n  setInterval(function() {\n    data.level = this.level;\n    data.lux = this.lux;\n\n    this.emit(\"data\", data);\n\n    if (raw !== last) {\n      last = raw;\n      this.emit(\"change\", data);\n    }\n  }.bind(this), freq);\n}\n\nutil.inherits(Light, Emitter);\n\nObject.assign(Light.prototype, within);\n\n\n/* istanbul ignore else */\nif (!!process.env.IS_TEST_MODE) {\n  Light.Controllers = Controllers;\n  Light.purge = function() {\n    priv.clear();\n  };\n}\n\nmodule.exports = Light;\n\n","/home/travis/build/npmtest/node-npmtest-johnny-five/node_modules/johnny-five/lib/mixins/within.js":"var mixins = {\n\n  within: function(range, unit, callback) {\n    var upper;\n\n    if (typeof range === \"number\") {\n      upper = range;\n      range = [0, upper];\n    }\n\n    if (!Array.isArray(range)) {\n      throw new Error(\"within expected a range array\");\n    }\n\n    if (typeof unit === \"function\") {\n      callback = unit;\n      unit = \"value\";\n    }\n\n    if (typeof this[unit] === \"undefined\") {\n      return this;\n    }\n\n    // Use the continuous read event for high resolution\n    this.on(\"data\", function() {\n      var value = this[unit];\n      if (value >= range[0] && value <= range[1]) {\n        callback.call(this, null, value);\n      }\n    }.bind(this));\n\n    return this;\n  }\n};\n\nmodule.exports = mixins;\n","/home/travis/build/npmtest/node-npmtest-johnny-five/node_modules/johnny-five/lib/joystick.js":"var Board = require(\"./board\");\nvar Emitter = require(\"events\").EventEmitter;\nvar util = require(\"util\");\nvar Fn = require(\"./fn\");\nvar priv = new Map();\nvar axes = [\"x\", \"y\"];\n\nfunction Multiplexer(options) {\n  this.pins = options.pins;\n  this.io = options.io;\n\n  // Setup these \"analog\" pins as digital output.\n  this.io.pinMode(this.pins[0], this.io.MODES.OUTPUT);\n  this.io.pinMode(this.pins[1], this.io.MODES.OUTPUT);\n  this.io.pinMode(this.pins[2], this.io.MODES.OUTPUT);\n  this.io.pinMode(this.pins[3], this.io.MODES.OUTPUT);\n}\n\nMultiplexer.prototype.select = function(channel) {\n  this.io.digitalWrite(this.pins[0], channel & 1 ? this.io.HIGH : this.io.LOW);\n  this.io.digitalWrite(this.pins[1], channel & 2 ? this.io.HIGH : this.io.LOW);\n  this.io.digitalWrite(this.pins[2], channel & 4 ? this.io.HIGH : this.io.LOW);\n  this.io.digitalWrite(this.pins[3], channel & 8 ? this.io.HIGH : this.io.LOW);\n};\n\nvar Controllers = {\n  ANALOG: {\n    initialize: {\n      value: function(opts, dataHandler) {\n        var axisValues = {\n          x: null,\n          y: null\n        };\n\n        opts.pins.forEach(function(pin, index) {\n          this.io.pinMode(pin, this.io.MODES.ANALOG);\n          this.io.analogRead(pin, function(value) {\n            axisValues[axes[index]] = value;\n\n            if (axisValues.x !== null && axisValues.y !== null) {\n              dataHandler({\n                x: axisValues.x,\n                y: axisValues.y\n              });\n\n              axisValues.x = null;\n              axisValues.y = null;\n            }\n          }.bind(this));\n        }, this);\n      }\n    },\n    toAxis: {\n      value: function(raw, axis) {\n        var state = priv.get(this);\n        return Fn.constrain(Fn.fscale(raw - state[axis].zeroV, -511, 511, -1, 1), -1, 1);\n      }\n    }\n  },\n  ESPLORA: {\n    initialize: {\n      value: function(opts, dataHandler) {\n        // References:\n        //\n        // https://github.com/arduino/Arduino/blob/master/libraries/Esplora/src/Esplora.h\n        // https://github.com/arduino/Arduino/blob/master/libraries/Esplora/src/Esplora.cpp\n        //\n        var multiplexer = new Multiplexer({\n          // Since Multiplexer uses digitalWrite,\n          // we have to send the analog pin numbers\n          // in their \"digital\" pin order form.\n          pins: [18, 19, 20, 21],\n          io: this.io\n        });\n        var channels = [11, 12];\n        var index = 1;\n        var axisValues = {\n          x: null,\n          y: null\n        };\n\n        this.io.pinMode(4, this.io.MODES.ANALOG);\n\n        var handler = function(value) {\n          axisValues[axes[index]] = value;\n\n          if (axisValues.x !== null && axisValues.y !== null) {\n            dataHandler({\n              x: axisValues.x,\n              y: axisValues.y\n            });\n\n            axisValues.x = null;\n            axisValues.y = null;\n          }\n\n          // Remove this handler to all the multiplexer\n          // to setup the next pin for the next read.\n          this.io.removeListener(\"analog-read-4\", handler);\n\n          setTimeout(read, 10);\n        }.bind(this);\n\n        var read = function() {\n          multiplexer.select(channels[index ^= 1]);\n          this.io.analogRead(4, handler);\n        }.bind(this);\n\n        read();\n      }\n    },\n    toAxis: {\n      value: function(raw, axis) {\n        var state = priv.get(this);\n        return Fn.constrain(Fn.fscale(raw - state[axis].zeroV, -511, 511, -1, 1), -1, 1);\n      }\n    }\n  }\n};\n\n\n/**\n * Joystick\n * @constructor\n *\n * five.Joystick([ x, y[, z] ]);\n *\n * five.Joystick({\n *   pins: [ x, y[, z] ]\n *   freq: ms\n * });\n *\n *\n * @param {Object} opts [description]\n *\n */\nfunction Joystick(opts) {\n  if (!(this instanceof Joystick)) {\n    return new Joystick(opts);\n  }\n\n  var controller = null;\n\n  var state = {\n    x: {\n      invert: false,\n      value: 0,\n      previous: 0,\n      zeroV: 0,\n      calibrated: false\n    },\n    y: {\n      invert: false,\n      value: 0,\n      previous: 0,\n      zeroV: 0,\n      calibrated: false\n    }\n  };\n\n  Board.Component.call(\n    this, opts = Board.Options(opts)\n  );\n\n  if (opts.controller && typeof opts.controller === \"string\") {\n    controller = Controllers[opts.controller.toUpperCase()];\n  } else {\n    controller = opts.controller;\n  }\n\n  if (controller == null) {\n    controller = Controllers.ANALOG;\n  }\n\n  Board.Controller.call(this, controller, opts);\n\n  if (!this.toAxis) {\n    this.toAxis = opts.toAxis || function(raw) {\n      return raw;\n    };\n  }\n\n  state.x.zeroV = opts.zeroV === undefined ? 0 : (opts.zeroV.x || 0);\n  state.y.zeroV = opts.zeroV === undefined ? 0 : (opts.zeroV.y || 0);\n\n  state.x.invert = opts.invertX || opts.invert || false;\n  state.y.invert = opts.invertY || opts.invert || false;\n\n  priv.set(this, state);\n\n  if (typeof this.initialize === \"function\") {\n    this.initialize(opts, function(data) {\n      var isChange = false;\n      var computed = {\n        x: null,\n        y: null\n      };\n\n      Object.keys(data).forEach(function(axis) {\n        var value = data[axis];\n        var sensor = state[axis];\n\n        // Set the internal ADC reading value...\n        sensor.value = value;\n\n        if (!state[axis].calibrated) {\n          state[axis].calibrated = true;\n          state[axis].zeroV = value;\n          isChange = true;\n        }\n\n        // ... Get the computed axis value.\n        computed[axis] = this[axis];\n\n        var absAxis = Math.abs(computed[axis]);\n        var absPAxis = Math.abs(sensor.previous);\n\n        if ((absAxis < absPAxis) ||\n          (absAxis > absPAxis)) {\n          isChange = true;\n        }\n\n        sensor.previous = computed[axis];\n      }, this);\n\n      this.emit(\"data\", {\n        x: computed.x,\n        y: computed.y\n      });\n\n      if (isChange) {\n        this.emit(\"change\", {\n          x: computed.x,\n          y: computed.y\n        });\n      }\n    }.bind(this));\n  }\n\n  Object.defineProperties(this, {\n    x: {\n      get: function() {\n        return this.toAxis(state.x.value, \"x\") * (state.x.invert ? -1 : 1);\n      }\n    },\n    y: {\n      get: function() {\n        return this.toAxis(state.y.value, \"y\") * (state.y.invert ? -1 : 1);\n      }\n    }\n  });\n}\n\nutil.inherits(Joystick, Emitter);\n\n/* istanbul ignore else */\nif (!!process.env.IS_TEST_MODE) {\n  Joystick.Controllers = Controllers;\n  Joystick.purge = function() {\n    priv.clear();\n  };\n}\n\nmodule.exports = Joystick;\n","/home/travis/build/npmtest/node-npmtest-johnny-five/node_modules/johnny-five/lib/motion.js":"var Collection = require(\"./mixins/collection\");\nvar Board = require(\"./board\");\nvar events = require(\"events\");\nvar util = require(\"util\");\nvar priv = new Map();\n\n\nfunction analogInitializer(opts, dataHandler) {\n  var state = priv.get(this);\n\n  this.io.pinMode(opts.pin, this.io.MODES.ANALOG);\n\n  setTimeout(function() {\n    state.isCalibrated = true;\n    this.emit(\"calibrated\");\n  }.bind(this), 10);\n\n  this.io.analogRead(opts.pin, dataHandler);\n}\n\nvar Controllers = {\n  PIR: {\n    initialize: {\n      value: function(opts, dataHandler) {\n        var state = priv.get(this);\n        var calibrationDelay = typeof opts.calibrationDelay !== \"undefined\" ?\n          opts.calibrationDelay : 2000;\n\n        this.io.pinMode(opts.pin, this.io.MODES.INPUT);\n\n        setTimeout(function() {\n          state.isCalibrated = true;\n          this.emit(\"calibrated\");\n        }.bind(this), calibrationDelay);\n\n        this.io.digitalRead(opts.pin, dataHandler);\n      }\n    },\n    toBoolean: {\n      value: function(raw) {\n        return !!raw;\n      }\n    }\n  },\n  GP2Y0D805Z0F: {\n    initialize: {\n      value: function(opts, dataHandler) {\n        var address = opts.address || 0x26;\n        var state = priv.get(this);\n\n        opts.address = address;\n\n        // This is meaningless for GP2Y0D805Z0F.\n        // The event is implemented for consistency\n        // with the digital passive infrared sensor\n        setTimeout(function() {\n          state.isCalibrated = true;\n          this.emit(\"calibrated\");\n        }.bind(this), 10);\n\n\n        // Set up I2C data connection\n        this.io.i2cConfig(opts);\n\n        this.io.i2cWriteReg(address, 0x03, 0xFE);\n        this.io.i2cWrite(address, [0x00]);\n        this.io.i2cRead(address, 1, function(data) {\n          dataHandler(data[0] & 0x02);\n        });\n      }\n    },\n    toBoolean: {\n      value: function(raw) {\n        return raw === 0;\n      }\n    }\n  },\n  GP2Y0D810Z0F: {\n    initialize: {\n      value: analogInitializer\n    },\n    toBoolean: {\n      value: function(raw) {\n        return raw >> 9 === 0;\n      }\n    }\n  },\n  GP2Y0A60SZLF: {\n    initialize: {\n      value: analogInitializer\n    },\n    toBoolean: {\n      value: function(raw) {\n        return raw >> 9 === 1;\n      }\n    }\n  }\n};\n\nControllers.GP2Y0D815Z0F = Controllers.GP2Y0D810Z0F;\n\nControllers[\"HC-SR501\"] = Controllers.PIR;\nControllers[\"HCSR501\"] = Controllers.PIR;\nControllers[\"0D805\"] = Controllers.GP2Y0D805Z0F;\nControllers[\"805\"] = Controllers.GP2Y0D805Z0F;\nControllers[\"0D810\"] = Controllers.GP2Y0D810Z0F;\nControllers[\"810\"] = Controllers.GP2Y0D810Z0F;\nControllers[\"0D815\"] = Controllers.GP2Y0D815Z0F;\nControllers[\"815\"] = Controllers.GP2Y0D815Z0F;\nControllers[\"0A60SZLF\"] = Controllers.GP2Y0A60SZLF;\nControllers[\"60SZLF\"] = Controllers.GP2Y0A60SZLF;\n\n/**\n * Motion\n * @constructor\n *\n * five.Motion(7);\n *\n * five.Motion({\n *  controller: \"PIR\",\n *  pin: 7,\n *  freq: 100,\n *  calibrationDelay: 1000\n * });\n *\n *\n * @param {Object} opts [description]\n *\n */\n\nfunction Motion(opts) {\n\n  if (!(this instanceof Motion)) {\n    return new Motion(opts);\n  }\n\n  var freq = opts.freq || 25;\n  var last = false;\n  var controller;\n  var state;\n\n  Board.Component.call(\n    this, opts = Board.Options(opts)\n  );\n\n  if (typeof opts.controller === \"string\") {\n    controller = Controllers[opts.controller];\n  } else {\n    controller = opts.controller || Controllers[\"PIR\"];\n  }\n\n  Board.Controller.call(this, controller, opts);\n\n  state = {\n    value: false,\n    isCalibrated: false\n  };\n\n  priv.set(this, state);\n\n  Object.defineProperties(this, {\n    /**\n     * [read-only] Current sensor state\n     * @property detectedMotion\n     * @type Boolean\n     */\n    detectedMotion: {\n      get: function() {\n        return this.toBoolean(state.value);\n      }\n    },\n    /**\n     * [read-only] Sensor calibration status\n     * @property isCalibrated\n     * @type Boolean\n     */\n    isCalibrated: {\n      get: function() {\n        return state.isCalibrated;\n      }\n    },\n  });\n\n  if (typeof this.initialize === \"function\") {\n    this.initialize(opts, function(data) {\n      state.value = data;\n    });\n  }\n\n  setInterval(function() {\n    var isChange = false;\n    var eventData = {\n      timestamp: Date.now(),\n      detectedMotion: this.detectedMotion,\n      isCalibrated: state.isCalibrated\n    };\n\n    if (state.isCalibrated && this.detectedMotion && !last) {\n      this.emit(\"motionstart\", eventData);\n    }\n\n    if (state.isCalibrated && !this.detectedMotion && last) {\n      this.emit(\"motionend\", eventData);\n    }\n\n    if (last !== this.detectedMotion) {\n      isChange = true;\n    }\n\n    this.emit(\"data\", eventData);\n\n    if (isChange) {\n      this.emit(\"change\", eventData);\n    }\n\n    last = this.detectedMotion;\n  }.bind(this), freq);\n}\n\nutil.inherits(Motion, events.EventEmitter);\n\n\n\n/**\n * Motion.Collection()\n * new Motion.Collection()\n *\n * Constructs an Array-like instance\n */\n\nMotion.Collection = function(numsOrObjects) {\n  if (!(this instanceof Motion.Collection)) {\n    return new Motion.Collection(numsOrObjects);\n  }\n\n  Object.defineProperty(this, \"type\", {\n    value: Motion\n  });\n\n  Collection.Emitter.call(this, numsOrObjects);\n};\n\nutil.inherits(Motion.Collection, Collection.Emitter);\n\nCollection.installMethodForwarding(\n  Motion.Collection.prototype, Motion.prototype\n);\n\n\n/* istanbul ignore else */\nif (!!process.env.IS_TEST_MODE) {\n  Motion.Controllers = Controllers;\n  Motion.purge = function() {\n    priv.clear();\n  };\n}\n\nmodule.exports = Motion;\n","/home/travis/build/npmtest/node-npmtest-johnny-five/node_modules/johnny-five/lib/motor.js":"var Board = require(\"./board\");\nvar Expander = require(\"./expander.js\");\nvar EVS = require(\"./evshield\");\nvar __ = require(\"./fn\");\nvar events = require(\"events\");\nvar util = require(\"util\");\nvar Collection = require(\"./mixins/collection\");\nvar Sensor = require(\"./sensor\");\nvar ShiftRegister = require(\"./shiftregister\");\n\nvar priv = new Map();\nvar registers = new Map();\n\nfunction registerKey(registerOpts) {\n  return [\"clock\", \"data\", \"latch\"].reduce(function(accum, key) {\n    return accum + \".\" + registerOpts[key];\n  }, \"\");\n}\n\nfunction latch(state, bit, on) {\n  return on ? state |= (1 << bit) : state &= ~(1 << bit);\n}\n\nfunction updateShiftRegister(motor, dir) {\n  var rKey = registerKey(motor.opts.register),\n    register = registers.get(motor.board)[rKey],\n    latchState = register.value,\n    bits = priv.get(motor).bits,\n    forward = dir !== \"reverse\";\n\n  // There are two ShiftRegister bits which we need to change based on the\n  // direction of the motor.  These will be the pins that control the HBridge\n  // on the board.  They will get flipped high/low based on the current flow\n  // in the HBridge.\n  latchState = latch(latchState, bits.a, forward);\n  latchState = latch(latchState, bits.b, !forward);\n\n  if (register.value !== latchState) {\n    register.send(latchState);\n  }\n}\n\nvar Controllers = {\n  ShiftRegister: {\n    initialize: {\n      value: function(opts) {\n        var rKey = registerKey(opts.register);\n\n        if (!opts.bits || opts.bits.a === undefined || opts.bits.b === undefined) {\n          throw new Error(\"ShiftRegister Motors MUST contain HBRIDGE bits {a, b}\");\n        }\n\n        priv.get(this).bits = opts.bits;\n\n        if (!registers.has(this.board)) {\n          registers.set(this.board, {});\n        }\n\n        if (!registers.get(this.board)[rKey]) {\n          registers.get(this.board)[rKey] = new ShiftRegister({\n            board: this.board,\n            pins: opts.register\n          });\n        }\n\n        this.io.pinMode(this.pins.pwm, this.io.MODES.PWM);\n      }\n    },\n    dir: {\n      value: function(dir) {\n        this.stop();\n\n        updateShiftRegister(this, dir.name);\n\n        this.direction = dir;\n\n        process.nextTick(this.emit.bind(this, dir.name));\n\n        return this;\n      }\n    }\n  },\n  PCA9685: {\n    setPWM: {\n      writable: true,\n      value: function(pin, speed) {\n        var state = priv.get(this);\n        state.expander.analogWrite(pin, speed);\n      }\n    },\n    setPin: {\n      writable: true,\n      value: function(pin, value) {\n        var state = priv.get(this);\n        state.expander.digitalWrite(pin, value);\n      }\n    },\n    initialize: {\n      value: function(opts) {\n\n        var state = priv.get(this);\n\n        this.address = opts.address || 0x40;\n        this.pwmRange = opts.pwmRange || [0, 4080];\n        this.frequency = opts.frequency || 50;\n\n        state.expander = Expander.get({\n          address: this.address,\n          controller: this.controller,\n          bus: this.bus,\n          pwmRange: this.pwmRange,\n          frequency: this.frequency,\n        });\n\n        Object.keys(this.pins).forEach(function(pinName) {\n          this.pins[pinName] = state.expander.normalize(this.pins[pinName]);\n        }, this);\n\n      }\n    }\n  },\n  EVS_EV3: {\n    initialize: {\n      value: function(opts) {\n        var state = priv.get(this);\n\n        state.shield = EVS.shieldPort(opts.pin);\n        state.ev3 = new EVS(Object.assign(opts, {\n          io: this.io\n        }));\n\n        this.opts.pins = {\n          pwm: opts.pin,\n          dir: opts.pin,\n        };\n      }\n    },\n    setPWM: {\n      value: function(pin, value) {\n        var state = priv.get(this);\n\n        var register = state.shield.motor === EVS.M1 ? EVS.SPEED_M1 : EVS.SPEED_M2;\n        var speed = __.scale(value, 0, 255, 0, 100) | 0;\n\n        if (value === 0) {\n          state.ev3.write(state.shield, EVS.COMMAND, EVS.Motor_Reset);\n        } else {\n          if (!this.direction.value) {\n            speed = -speed;\n          }\n\n          var data = [\n            // 0-100\n            speed,\n            // Duration (0 is forever)\n            0,\n            // Command B\n            0,\n            // Command A\n            EVS.CONTROL_SPEED | EVS.CONTROL_GO\n          ];\n\n          state.ev3.write(state.shield, register, data);\n        }\n      }\n    },\n    setPin: {\n      value: function(pin, value) {\n        this.setPWM(this.pin, value);\n      }\n    },\n  },\n\n  GROVE_I2C_MOTOR_DRIVER: {\n    REGISTER: {\n      value: {\n        ADDRESS: 0x0F,\n      }\n    },\n    COMMANDS: {\n      value: {\n        SET_SPEED: 0x82,\n        SET_PWM_FREQUENCY: 0x84,\n        SET_DIRECTION: 0xAA,\n        NOOP: 0x01,\n      }\n    },\n\n    initialize: {\n      value: function(opts) {\n        var state = priv.get(this);\n        var shared = priv.get(\"GROVE_I2C_MOTOR_DRIVER\");\n\n        if (!shared) {\n          shared = {\n            direction: {\n              A: 0x01,\n              B: 0x01,\n            },\n            speed: {\n              A: 0,\n              B: 0,\n            }\n          };\n\n          priv.set(\"GROVE_I2C_MOTOR_DRIVER\", shared);\n        }\n\n        state.shared = shared;\n        state.pin = opts.pin.toUpperCase();\n\n        this.opts.pins = {\n          pwm: opts.pin,\n          dir: opts.pin,\n        };\n\n        this.address = opts.address || this.REGISTER.ADDRESS;\n\n        opts.address = this.address;\n\n        this.io.i2cConfig(opts);\n      }\n    },\n    setPWM: {\n      value: function(pin, value) {\n        var state = priv.get(this);\n        var speed = Board.constrain(value, 0, 255) | 0;\n\n        state.shared.speed[state.pin] = speed;\n\n        this.io.i2cWrite(this.address, [\n          this.COMMANDS.SET_SPEED,\n          state.shared.speed.A,\n          state.shared.speed.B,\n        ]);\n      }\n    },\n    setPin: {\n      value: function(pin, value) {\n        var state = priv.get(this);\n\n        // DIR_CCW = 0x02\n        // DIR_CW  = 0x01\n        state.shared.direction[state.pin] = value ? 0x01 : 0x02;\n\n        var a = state.shared.direction.A & 0x03;\n        var b = state.shared.direction.B & 0x03;\n        var direction = (b << 2) | a;\n\n        this.io.i2cWrite(this.address, [\n          this.COMMANDS.SET_DIRECTION,\n          direction,\n          this.COMMANDS.NOOP,\n        ]);\n      }\n    }\n  }\n};\n\n// Aliases\n//\n// NXT motors have the exact same control commands as EV3 motors\nControllers.EVS_NXT = Controllers.EVS_EV3;\n\nvar Devices = {\n  NONDIRECTIONAL: {\n    pins: {\n      get: function() {\n        return {\n          pwm: this.opts.pin\n        };\n      }\n    },\n    dir: {\n      writable: true,\n      configurable: true,\n      value: function(speed) {\n        speed = speed || this.speed();\n        return this;\n      }\n    },\n    resume: {\n      value: function() {\n        var speed = this.speed();\n        this.speed({\n          speed: speed\n        });\n        return this;\n      }\n    }\n  },\n  DIRECTIONAL: {\n    pins: {\n      get: function() {\n        if (Array.isArray(this.opts.pins)) {\n          return {\n            pwm: this.opts.pins[0],\n            dir: this.opts.pins[1]\n          };\n        } else {\n          return this.opts.pins;\n        }\n      }\n    },\n    dir: {\n      writable: true,\n      configurable: true,\n      value: function(dir) {\n\n        this.stop();\n\n        this.setPin(this.pins.dir, dir.value);\n        this.direction = dir;\n\n        process.nextTick(this.emit.bind(this, dir.name));\n\n        return this;\n      }\n    }\n  },\n  CDIR: {\n    pins: {\n      get: function() {\n        if (Array.isArray(this.opts.pins)) {\n          return {\n            pwm: this.opts.pins[0],\n            dir: this.opts.pins[1],\n            cdir: this.opts.pins[2]\n          };\n        } else {\n          return this.opts.pins;\n        }\n      }\n    },\n    dir: {\n      value: function(dir) {\n\n        this.stop();\n        this.direction = dir;\n\n        this.setPin(this.pins.cdir, 1 ^ dir.value);\n        this.setPin(this.pins.dir, dir.value);\n\n        process.nextTick(this.emit.bind(this, dir.name));\n\n        return this;\n      }\n    },\n    brake: {\n      value: function(duration) {\n\n        this.speed({\n          speed: 0,\n          saveSpeed: false\n        });\n        this.setPin(this.pins.dir, 1, 127);\n        this.setPin(this.pins.cdir, 1, 128, 127);\n        this.speed({\n          speed: 255,\n          saveSpeed: false,\n          braking: true\n        });\n\n        process.nextTick(this.emit.bind(this, \"brake\"));\n\n        if (duration) {\n          var motor = this;\n          this.board.wait(duration, function() {\n            motor.stop();\n          });\n        }\n\n        return this;\n      }\n    }\n  }\n};\n\n/**\n * Motor\n * @constructor\n *\n * @param {Object} opts Options: pin|pins{pwm, dir[, cdir]}, device, controller, current\n * @param {Number} pin A single pin for basic\n * @param {Array} pins A two or three digit array of pins [pwm, dir]|[pwm, dir, cdir]\n *\n *\n * Initializing \"Hobby Motors\"\n *\n *    new five.Motor(9);\n *\n * ...is the same as...\n *\n *    new five.Motor({\n *      pin: 9\n *    });\n *\n *\n * Initializing 2 pin, Bi-Directional DC Motors:\n *\n *    new five.Motor([ 3, 12 ]);\n *\n * ...is the same as...\n *\n *    new five.Motor({\n *      pins: [ 3, 12 ]\n *    });\n *\n * ...is the same as...\n *\n *    new five.Motor({\n *      pins: {\n *        pwm: 3,\n *        dir: 12\n *      }\n *    });\n *\n *\n * Initializing 3 pin, I2C PCA9685 Motor Controllers:\n * i.e. The Adafruit Motor Shield V2\n *\n *    new five.Motor({\n *      pins: [ 8, 9, 10 ],\n *      controller: \"PCA9685\",\n *      address: 0x60\n *    });\n *\n *\n * Initializing 3 pin, Bi-Directional DC Motors:\n *\n *    new five.Motor([ 3, 12, 11 ]);\n *\n * ...is the same as...\n *\n *    new five.Motor({\n *      pins: [ 3, 12, 11 ]\n *    });\n *\n * ...is the same as...\n *\n *    new five.Motor({\n *      pins: {\n *        pwm: 3,\n *        dir: 12,\n *        cdir: 11\n *      }\n *    });\n *\n *\n * Initializing Bi-Directional DC Motors with brake:\n *\n *    new five.Motor({\n *      pins: {\n *        pwm: 3,\n *        dir: 12,\n *        brake: 11\n *      }\n *    });\n *\n *\n * Initializing Bi-Directional DC Motors with current sensing pins:\n * See Sensor.js for details on options\n *\n *    new five.Motor({\n *      pins: [3, 12],\n *      current: {\n *        pin: \"A0\",\n *        freq: 250,\n *        range: [0, 2000]\n *      }\n *    });\n *\n *\n * Initializing Bi-Directional DC Motors with inverted speed for reverse:\n * Most likely used for non-commercial H-Bridge controllers\n *\n *    new five.Motor({\n *      pins: [3, 12],\n *      invertPWM: true\n *    });\n *\n */\n\nfunction Motor(opts) {\n\n  var device, controller, state;\n\n  if (!(this instanceof Motor)) {\n    return new Motor(opts);\n  }\n\n  Board.Component.call(\n    this, this.opts = Board.Options(opts)\n  );\n\n  controller = opts.controller || null;\n\n  // Derive device based on pins passed\n  if (typeof this.opts.device === \"undefined\") {\n\n    this.opts.device = (typeof this.opts.pins === \"undefined\" && typeof this.opts.register !== \"object\") ?\n      \"NONDIRECTIONAL\" : \"DIRECTIONAL\";\n\n    if (this.opts.pins && (this.opts.pins.cdir || this.opts.pins.length > 2)) {\n      this.opts.device = \"CDIR\";\n    }\n\n    if (typeof controller === \"string\" &&\n      (controller.startsWith(\"EVS\") || controller.startsWith(\"GROVE_I2C\"))) {\n      this.opts.device = \"DIRECTIONAL\";\n    }\n  }\n\n  // Allow users to pass in custom device types\n  device = typeof this.opts.device === \"string\" ?\n    Devices[this.opts.device] : this.opts.device;\n\n  this.threshold = typeof this.opts.threshold !== \"undefined\" ?\n    this.opts.threshold : 30;\n\n  this.invertPWM = typeof this.opts.invertPWM !== \"undefined\" ?\n    this.opts.invertPWM : false;\n\n  Object.defineProperties(this, device);\n\n  if (this.opts.register) {\n    this.opts.controller = \"ShiftRegister\";\n  }\n\n  /**\n   * Note: Controller decorates the device. Used for adding\n   * special controllers (i.e. PCA9685)\n   **/\n  if (this.opts.controller) {\n    controller = typeof this.opts.controller === \"string\" ?\n      Controllers[this.opts.controller] : this.opts.controller;\n\n    Board.Controller.call(this, controller, opts);\n  }\n\n  // current just wraps a Sensor\n  if (this.opts.current) {\n    this.opts.current.board = this.board;\n    this.current = new Sensor(this.opts.current);\n  }\n\n  // Create a \"state\" entry for privately\n  // storing the state of the motor\n  state = {\n    isOn: false,\n    currentSpeed: typeof this.opts.speed !== \"undefined\" ?\n      this.opts.speed : 128,\n    braking: false,\n    enabled: true\n  };\n\n  priv.set(this, state);\n\n  Object.defineProperties(this, {\n    // Calculated, read-only motor on/off state\n    // true|false\n    isOn: {\n      get: function() {\n        return state.isOn;\n      }\n    },\n    currentSpeed: {\n      get: function() {\n        return state.currentSpeed;\n      }\n    },\n    braking: {\n      get: function() {\n        return state.braking;\n      }\n    },\n    enabled: {\n      get: function() {\n        return state.enabled;\n      }\n    }\n  });\n\n  // We need to store and initialize the state of the dir pin(s)\n  this.direction = {\n    value: 1\n  };\n\n  if (this.initialize) {\n    this.initialize(opts);\n  }\n\n  this.enable();\n  this.dir(this.direction);\n}\n\nutil.inherits(Motor, events.EventEmitter);\n\nMotor.prototype.initialize = function() {\n  this.io.pinMode(this.pins.pwm, this.io.MODES.PWM);\n\n  [\"dir\", \"cdir\", \"brake\", \"enable\"].forEach(function(pin) {\n    if (typeof this.pins[pin] !== \"undefined\") {\n      this.io.pinMode(this.pins[pin], this.io.MODES.OUTPUT);\n    }\n  }, this);\n\n};\n\nMotor.prototype.setPin = function(pin, value) {\n  this.io.digitalWrite(pin, value);\n};\n\nMotor.prototype.setPWM = function(pin, value) {\n  this.io.analogWrite(pin, value);\n};\n\nMotor.prototype.speed = function(opts) {\n  var state = priv.get(this);\n\n  if (typeof opts === \"undefined\") {\n    return state.currentSpeed;\n  } else {\n\n    if (typeof opts === \"number\") {\n      opts = {\n        speed: opts\n      };\n    }\n\n    opts.speed = Board.constrain(opts.speed, 0, 255);\n\n    opts.saveSpeed = typeof opts.saveSpeed !== \"undefined\" ?\n      opts.saveSpeed : true;\n\n    if (opts.speed < this.threshold) {\n      opts.speed = 0;\n    }\n\n    state.isOn = opts.speed === 0 ? false : true;\n\n    if (opts.saveSpeed) {\n      state.currentSpeed = opts.speed;\n    }\n\n    if (opts.braking) {\n      state.braking = true;\n    }\n\n    if (this.invertPWM && this.direction.value === 1) {\n      opts.speed ^= 0xff;\n    }\n\n    this.setPWM(this.pins.pwm, opts.speed);\n\n    return this;\n  }\n\n};\n\n// start a motor - essentially just switch it on like a normal motor\nMotor.prototype.start = function(speed) {\n  // Send a signal to turn on the motor and run at given speed in whatever\n  // direction is currently set.\n  if (this.pins.brake && this.braking) {\n    this.setPin(this.pins.brake, 0);\n  }\n\n  // get current speed if nothing provided.\n  speed = typeof speed !== \"undefined\" ?\n    speed : this.speed();\n\n  this.speed({\n    speed: speed,\n    braking: false\n  });\n\n  // \"start\" event is fired when the motor is started\n  if (speed > 0) {\n    process.nextTick(this.emit.bind(this, \"start\"));\n  }\n\n  return this;\n};\n\nMotor.prototype.stop = function() {\n  this.speed({\n    speed: 0,\n    saveSpeed: false\n  });\n  process.nextTick(this.emit.bind(this, \"stop\"));\n\n  return this;\n};\n\nMotor.prototype.brake = function(duration) {\n  if (typeof this.pins.brake === \"undefined\") {\n    if (this.board.io.name !== \"Mock\") {\n      console.log(\"Non-braking motor type\");\n    }\n    this.stop();\n  } else {\n    this.setPin(this.pins.brake, 1);\n    this.setPin(this.pins.dir, 1);\n    this.speed({\n      speed: 255,\n      saveSpeed: false,\n      braking: true\n    });\n    process.nextTick(this.emit.bind(this, \"brake\"));\n\n    if (duration) {\n      var motor = this;\n      this.board.wait(duration, function() {\n        motor.resume();\n      });\n    }\n  }\n\n  return this;\n};\n\nMotor.prototype.release = function() {\n  this.resume();\n  process.nextTick(this.emit.bind(this, \"release\"));\n\n  return this;\n};\n\nMotor.prototype.resume = function() {\n  var speed = this.speed();\n  this.dir(this.direction);\n  this.start(speed);\n\n  return this;\n};\n\nMotor.prototype.enable = function() {\n  var state = priv.get(this);\n  if (typeof this.pins.enable !== \"undefined\" && !this.enabled) {\n    this.setPin(this.pins.enable, 1);\n    state.enabled = true;\n  }\n};\n\nMotor.prototype.disable = function() {\n  var state = priv.get(this);\n  if (typeof this.pins.enable !== \"undefined\" && this.enabled) {\n    this.setPin(this.pins.enable, 0);\n    state.enabled = false;\n  }\n};\n\n[\n  /**\n   * forward Turn the Motor in its forward direction\n   * fwd Turn the Motor in its forward direction\n   *\n   * @param  {Number} 0-255, 0 is stopped, 255 is fastest\n   * @return {Object} this\n   */\n  {\n    name: \"forward\",\n    abbr: \"fwd\",\n    value: 1\n  },\n  /**\n   * reverse Turn the Motor in its reverse direction\n   * rev Turn the Motor in its reverse direction\n   *\n   * @param  {Number} 0-255, 0 is stopped, 255 is fastest\n   * @return {Object} this\n   */\n  {\n    name: \"reverse\",\n    abbr: \"rev\",\n    value: 0\n  }\n].forEach(function(dir) {\n  var method = function(speed) {\n    this.dir(dir);\n    this.start(speed);\n    return this;\n  };\n\n  Motor.prototype[dir.name] = Motor.prototype[dir.abbr] = method;\n});\n\nMotor.SHIELD_CONFIGS = {\n  ADAFRUIT_V1: {\n    M1: {\n      pins: {\n        pwm: 11\n      },\n      register: {\n        data: 8,\n        clock: 4,\n        latch: 12\n      },\n      bits: {\n        a: 2,\n        b: 3\n      }\n    },\n    M2: {\n      pins: {\n        pwm: 3\n      },\n      register: {\n        data: 8,\n        clock: 4,\n        latch: 12\n      },\n      bits: {\n        a: 1,\n        b: 4\n      }\n    },\n    M3: {\n      pins: {\n        pwm: 6\n      },\n      register: {\n        data: 8,\n        clock: 4,\n        latch: 12\n      },\n      bits: {\n        a: 5,\n        b: 7\n      }\n    },\n    M4: {\n      pins: {\n        pwm: 5\n      },\n      register: {\n        data: 8,\n        clock: 4,\n        latch: 12\n      },\n      bits: {\n        a: 0,\n        b: 6\n      }\n    }\n  },\n  ADAFRUIT_V2: {\n    M1: {\n      pins: {\n        pwm: 8,\n        dir: 9,\n        cdir: 10\n      },\n      address: 0x60,\n      controller: \"PCA9685\"\n    },\n    M2: {\n      pins: {\n        pwm: 13,\n        dir: 12,\n        cdir: 11\n      },\n      address: 0x60,\n      controller: \"PCA9685\"\n    },\n    M3: {\n      pins: {\n        pwm: 2,\n        dir: 3,\n        cdir: 4\n      },\n      address: 0x60,\n      controller: \"PCA9685\"\n    },\n    M4: {\n      pins: {\n        pwm: 7,\n        dir: 6,\n        cdir: 5\n      },\n      address: 0x60,\n      controller: \"PCA9685\"\n    }\n  },\n  SEEED_STUDIO: {\n    A: {\n      pins: {\n        pwm: 9,\n        dir: 8,\n        cdir: 11\n      }\n    },\n    B: {\n      pins: {\n        pwm: 10,\n        dir: 12,\n        cdir: 13\n      }\n    }\n  },\n  FREETRONICS_HBRIDGE: {\n    A: {\n      pins: {\n        pwm: 6,\n        dir: 4,\n        cdir: 7\n      }\n    },\n    B: {\n      pins: {\n        pwm: 5,\n        dir: 3,\n        cdir: 2\n      }\n    }\n  },\n  ARDUINO_MOTOR_SHIELD_R3_1: {\n    A: {\n      pins: {\n        pwm: 3,\n        dir: 12\n      }\n    },\n    B: {\n      pins: {\n        pwm: 11,\n        dir: 13\n      }\n    }\n  },\n  ARDUINO_MOTOR_SHIELD_R3_2: {\n    A: {\n      pins: {\n        pwm: 3,\n        dir: 12,\n        brake: 9\n      }\n    },\n    B: {\n      pins: {\n        pwm: 11,\n        dir: 13,\n        brake: 8\n      }\n    }\n  },\n  ARDUINO_MOTOR_SHIELD_R3_3: {\n    A: {\n      pins: {\n        pwm: 3,\n        dir: 12,\n        brake: 9,\n        current: \"A0\"\n      }\n    },\n    B: {\n      pins: {\n        pwm: 11,\n        dir: 13,\n        brake: 8,\n        current: \"A1\"\n      }\n    }\n  },\n  DF_ROBOT: {\n    A: {\n      pins: {\n        pwm: 6,\n        dir: 7\n      }\n    },\n    B: {\n      pins: {\n        pwm: 5,\n        dir: 4\n      }\n    }\n  },\n  NKC_ELECTRONICS_KIT: {\n    A: {\n      pins: {\n        pwm: 9,\n        dir: 12\n      }\n    },\n    B: {\n      pins: {\n        pwm: 10,\n        dir: 13\n      }\n    }\n  },\n  RUGGED_CIRCUITS: {\n    A: {\n      pins: {\n        pwm: 3,\n        dir: 12\n      }\n    },\n    B: {\n      pins: {\n        pwm: 11,\n        dir: 13\n      }\n    }\n  },\n  SPARKFUN_ARDUMOTO: {\n    A: {\n      pins: {\n        pwm: 3,\n        dir: 12\n      }\n    },\n    B: {\n      pins: {\n        pwm: 11,\n        dir: 13\n      }\n    }\n  },\n  POLOLU_DRV8835_SHIELD: {\n    M1: {\n      pins: {\n        pwm: 9,\n        dir: 7\n      }\n    },\n    M2: {\n      pins: {\n        pwm: 10,\n        dir: 8\n      }\n    }\n  },\n  MICRO_MAGICIAN_V2: {\n    A: {\n      pins: {\n        pwm: 6,\n        dir: 8\n      },\n      invertPWM: true\n    },\n    B: {\n      pins: {\n        pwm: 5,\n        dir: 7\n      },\n      invertPWM: true\n    }\n  },\n  SPARKFUN_LUDUS: {\n    A: {\n      pins: {\n        pwm: 3,\n        dir: 4,\n        cdir: 5\n      }\n    },\n    B: {\n      pins: {\n        pwm: 6,\n        dir: 7,\n        cdir: 8\n      }\n    }\n  },\n  SPARKFUN_DUAL_HBRIDGE_EDISON_BLOCK: {\n    A: {\n      pins: {\n        pwm: 20,\n        dir: 33,\n        cdir: 46,\n        enable: 47\n      }\n    },\n    B: {\n      pins: {\n        pwm: 14,\n        dir: 48,\n        cdir: 36,\n        enable: 47\n      }\n    }\n  },\n\n};\n\n\n/**\n * Motors()\n * new Motors()\n */\nfunction Motors(numsOrObjects) {\n  if (!(this instanceof Motors)) {\n    return new Motors(numsOrObjects);\n  }\n\n  Object.defineProperty(this, \"type\", {\n    value: Motor\n  });\n\n  Collection.call(this, numsOrObjects);\n}\n\nutil.inherits(Motors, Collection);\n\n\n/*\n * Motors, forward(speed)/fwd(speed)\n *\n * eg. array.forward(speed);\n\n * Motors, reverse(speed)/rev(speed)\n *\n * eg. array.reverse(speed);\n\n * Motors, start(speed)\n *\n * eg. array.start(speed);\n\n * Motors, stop()\n *\n * eg. array.stop();\n\n * Motors, brake()\n *\n * eg. array.brake();\n\n * Motors, release()\n *\n * eg. array.release();\n */\n\nCollection.installMethodForwarding(\n  Motors.prototype, Motor.prototype\n);\n\n\n// Assign Motors Collection class as static \"method\" of Motor.\n// TODO: Eliminate .Array for 1.0.0\nMotor.Array = Motors;\nMotor.Collection = Motors;\n\n/* istanbul ignore else */\nif (!!process.env.IS_TEST_MODE) {\n  Motor.Controllers = Controllers;\n  Motor.purge = function() {\n    priv.clear();\n    registers.clear();\n  };\n}\n\nmodule.exports = Motor;\n","/home/travis/build/npmtest/node-npmtest-johnny-five/node_modules/johnny-five/lib/sensor.js":"var Board = require(\"./board\");\nvar Fn = require(\"./fn\");\nvar events = require(\"events\");\nvar util = require(\"util\");\nvar Collection = require(\"./mixins/collection\");\nvar within = require(\"./mixins/within\");\n\n\n// Sensor instance private data\nvar priv = new Map();\n// var aliases = {\n//   change: [\n//     // Generic sensor value change\n//     \"change\",\n//     // Slider sensors (alias)\n//     \"slide\",\n//     // Soft Potentiometer (alias)\n//     \"touch\",\n//     // Force Sensor (alias)\n//     \"force\",\n//     // Flex Sensor (alias)\n//     \"bend\"\n//   ]\n// };\n\n// To reduce noise in sensor readings, sort collected samples\n// from high to low and select the value in the center.\nfunction median(input) {\n  // faster than default comparitor (even for small n)\n  var sorted = input.sort(function(a, b) {\n    return a - b;\n  });\n  var len = sorted.length;\n  var half = Math.floor(len / 2);\n\n  // If the length is odd, return the midpoint m\n  // If the length is even, return average of m & m + 1\n  return len % 2 ? sorted[half] : (sorted[half - 1] + sorted[half]) / 2;\n}\n\n/**\n * Sensor\n * @constructor\n *\n * @description Generic analog or digital sensor constructor\n *\n * @param {Object} opts Options: pin, freq, range\n */\n\nfunction Sensor(opts) {\n\n  if (!(this instanceof Sensor)) {\n    return new Sensor(opts);\n  }\n\n  // Defaults to 10-bit resolution\n  var resolution = 0x3FF;\n  var raw = null;\n  var last = -1;\n  var samples = [];\n\n  Board.Component.call(\n    this, opts = Board.Options(opts)\n  );\n\n  if (!opts.type) {\n    opts.type = \"analog\";\n  }\n\n  if (this.io.RESOLUTION &&\n      (this.io.RESOLUTION.ADC &&\n        (this.io.RESOLUTION.ADC !== resolution))) {\n    resolution = this.io.RESOLUTION.ADC;\n  }\n\n  // Set the pin to ANALOG (INPUT) mode\n  this.mode = opts.type === \"digital\" ?\n    this.io.MODES.INPUT :\n    this.io.MODES.ANALOG;\n\n  this.io.pinMode(this.pin, this.mode);\n\n  // Create a \"state\" entry for privately\n  // storing the state of the sensor\n  var state = {\n    enabled: typeof opts.enabled === \"undefined\" ? true : opts.enabled,\n    booleanBarrier: opts.type === \"digital\" ? 0 : null,\n    intervalId: null,\n    scale: null,\n    value: 0,\n    median: 0,\n    freq: opts.freq || 25,\n    previousFreq: opts.freq || 25,\n  };\n  // Put a reference where the prototype methods defined in this file have access\n  priv.set(this, state);\n\n  // Sensor instance properties\n  this.range = opts.range || [0, resolution];\n  this.limit = opts.limit || null;\n  this.threshold = opts.threshold === undefined ? 1 : opts.threshold;\n  this.isScaled = false;\n\n  this.io[opts.type + \"Read\"](this.pin, function(data) {\n    raw = data;\n\n    // Only append to the samples when noise filtering can/will be used\n    if (opts.type !== \"digital\") {\n      samples.push(raw);\n    }\n  }.bind(this));\n\n  // Throttle\n  // TODO: The event (interval) processing function should be outside of the Sensor\n  // constructor function (with appropriate passed (and bound?) arguments), to\n  // avoid creating a separate copy (of the function) for each Sensor instance.\n  var eventProcessing = function() {\n    var err, boundary;\n\n    err = null;\n\n    // For digital sensors, skip the analog\n    // noise filtering provided below.\n    if (opts.type === \"digital\") {\n      this.emit(\"data\", raw);\n\n      /* istanbul ignore else */\n      if (last !== raw) {\n        this.emit(\"change\", raw);\n        last = raw;\n      }\n      return;\n    }\n\n    // Keep the previous calculated value if there were no new readings\n    if (samples.length > 0) {\n      // Filter the accumulated sample values to reduce analog reading noise\n      state.median = median(samples);\n    }\n\n    this.emit(\"data\", state.median);\n\n    // If the filtered (state.median) value for this interval is at least ± the\n    // configured threshold from last, fire change events\n    if (state.median <= (last - this.threshold) || state.median >= (last + this.threshold)) {\n      this.emit(\"change\", state.median);\n      // Update the instance-local `last` value (only) when a new change event\n      // has been emitted.  For comparison in the next interval\n      last = state.median;\n    }\n\n    if (this.limit) {\n      if (state.median <= this.limit[0]) {\n        boundary = \"lower\";\n      }\n      if (state.median >= this.limit[1]) {\n        boundary = \"upper\";\n      }\n\n      if (boundary) {\n        this.emit(\"limit\", {\n          boundary: boundary,\n          value: state.median\n        });\n        this.emit(\"limit:\" + boundary, state.median);\n      }\n    }\n\n    // Reset samples\n    samples.length = 0;\n  }.bind(this); // ./function eventProcessing()\n\n\n  Object.defineProperties(this, {\n    raw: {\n      get: function() {\n        return raw;\n      }\n    },\n    analog: {\n      get: function() {\n        if (opts.type === \"digital\") {\n          return raw;\n        }\n\n        return raw === null ? 0 :\n          Fn.map(this.raw, 0, resolution, 0, 255) | 0;\n      },\n    },\n    constrained: {\n      get: function() {\n        if (opts.type === \"digital\") {\n          return raw;\n        }\n\n        return raw === null ? 0 :\n          Fn.constrain(this.raw, 0, 255);\n      }\n    },\n    boolean: {\n      get: function() {\n        var state = priv.get(this);\n        var booleanBarrier = state.booleanBarrier;\n        var scale = state.scale || [0, resolution];\n\n        if (booleanBarrier === null) {\n          booleanBarrier = scale[0] + (scale[1] - scale[0]) / 2;\n        }\n\n        return this.value > booleanBarrier;\n      }\n    },\n    scaled: {\n      get: function() {\n        var mapped, constrain;\n\n        if (state.scale && raw !== null) {\n          if (opts.type === \"digital\") {\n            // Value is either 0 or 1, use as an index\n            // to return the scaled value.\n            return state.scale[raw];\n          }\n\n          mapped = Fn.fmap(raw, this.range[0], this.range[1], state.scale[0], state.scale[1]);\n          constrain = Fn.constrain(mapped, state.scale[0], state.scale[1]);\n\n          return constrain;\n        }\n        return this.constrained;\n      }\n    },\n    freq: {\n      get: function() {\n        return state.freq;\n      },\n      set: function(newFreq) {\n        state.freq = newFreq;\n        if (state.intervalId) {\n          clearInterval(state.intervalId);\n        }\n\n        if (state.freq !== null) {\n          state.intervalId = setInterval(eventProcessing, newFreq);\n        }\n      }\n    },\n    value: {\n      get: function() {\n        if (state.scale) {\n          this.isScaled = true;\n          return this.scaled;\n        }\n\n        return raw;\n      }\n    },\n    resolution: {\n      get: function() {\n        return resolution;\n      }\n    }\n  });\n\n  /* istanbul ignore else */\n  if (!!process.env.IS_TEST_MODE) {\n    Object.defineProperties(this, {\n      state: {\n        get: function() {\n          return priv.get(this);\n        }\n      }\n    });\n  }\n\n  // Set the freq property only after the get and set functions are defined\n  // and only if the sensor is not `enabled: false`\n  if (state.enabled) {\n    this.freq = state.freq;\n  }\n}\n\nutil.inherits(Sensor, events.EventEmitter);\n\n/**\n * EXPERIMENTAL\n *\n * within When value is within the provided range, execute callback\n *\n * @param {Number} range Upperbound, converted into an array,\n *                       where 0 is lowerbound\n * @param {Function} callback Callback to execute when value falls inside range\n * @return {Object} instance\n *\n *\n * @param {Array} range Lower to Upper bounds [ low, high ]\n * @param {Function} callback Callback to execute when value falls inside range\n * @return {Object} instance\n *\n */\nObject.assign(Sensor.prototype, within);\n\n/**\n * enable Enable a disabled sensor.\n *\n * @return {Object} instance\n *\n */\nSensor.prototype.enable = function() {\n  var state = priv.get(this);\n\n  /* istanbul ignore else */\n  if (!state.enabled) {\n    this.freq = state.freq || state.previousFreq;\n  }\n\n  return this;\n};\n\n/**\n * disable Disable an enabled sensor.\n *\n * @return {Object} instance\n *\n */\nSensor.prototype.disable = function() {\n  var state = priv.get(this);\n\n  /* istanbul ignore else */\n  if (state.enabled) {\n    state.enabled = false;\n    state.previousFreq = state.freq;\n    this.freq = null;\n  }\n\n  return this;\n};\n\n/**\n * scale/scaleTo Set a value scaling range\n *\n * @param  {Number} low  Lowerbound\n * @param  {Number} high Upperbound\n * @return {Object} instance\n *\n * @param  {Array} [ low, high]  Lowerbound\n * @return {Object} instance\n *\n */\nSensor.prototype.scale = function(low, high) {\n  this.isScaled = true;\n\n  priv.get(this).scale = Array.isArray(low) ?\n    low : [low, high];\n\n  return this;\n};\n\n/**\n * scaleTo Scales value to integer representation\n * @param  {Number} low  An array containing a lower and upper bound\n *\n * @param  {Number} low  A number to use as a lower bound\n * @param  {Number} high A number to use as an upper bound\n * @return {Number}      The scaled value\n */\nSensor.prototype.scaleTo = function(low, high) {\n  var scale = Array.isArray(low) ? low : [low, high];\n  return Fn.map(this.raw, 0, this.resolution, scale[0], scale[1]);\n};\n\n/**\n * fscaleTo Scales value to single precision float representation\n * @param  {Number} low  An array containing a lower and upper bound\n *\n * @param  {Number} low  A number to use as a lower bound\n * @param  {Number} high A number to use as an upper bound\n * @return {Number}      The scaled value\n */\nSensor.prototype.fscaleTo = function(low, high) {\n  var scale = Array.isArray(low) ? low : [low, high];\n  return Fn.fmap(this.raw, 0, this.resolution, scale[0], scale[1]);\n};\n\n/**\n * booleanAt Set a midpoint barrier value used to calculate returned value of\n *           .boolean property.\n *\n * @param  {Number} barrier\n * @return {Object} instance\n *\n */\nSensor.prototype.booleanAt = function(barrier) {\n  priv.get(this).booleanBarrier = barrier;\n  return this;\n};\n\n\n\n/**\n * Sensors()\n * new Sensors()\n *\n * Constructs an Array-like instance of all servos\n */\nfunction Sensors(numsOrObjects) {\n  if (!(this instanceof Sensors)) {\n    return new Sensors(numsOrObjects);\n  }\n\n  Object.defineProperty(this, \"type\", {\n    value: Sensor\n  });\n\n  Collection.Emitter.call(this, numsOrObjects);\n}\n\nutil.inherits(Sensors, Collection.Emitter);\n\n\nCollection.installMethodForwarding(\n  Sensors.prototype, Sensor.prototype\n);\n\n// Assign Sensors Collection class as static \"method\" of Sensor.\nSensor.Collection = Sensors;\n\n/* istanbul ignore else */\nif (!!process.env.IS_TEST_MODE) {\n  Sensor.purge = function() {\n    priv.clear();\n  };\n}\n\n\nmodule.exports = Sensor;\n","/home/travis/build/npmtest/node-npmtest-johnny-five/node_modules/johnny-five/lib/shiftregister.js":"var Board = require(\"./board\");\nvar Collection = require(\"./mixins/collection\");\nvar util = require(\"util\");\nvar priv = new Map();\n\nfunction ShiftRegister(opts) {\n  if (!(this instanceof ShiftRegister)) {\n    return new ShiftRegister(opts);\n  }\n\n  if (Array.isArray(opts)) {\n    // [Data, Clock, Latch, Reset]\n    opts = {\n      pins: {\n        data: opts[0],\n        clock: opts[1],\n        latch: opts[2],\n        reset: opts.length === 4 ? opts[3] : null,\n      }\n    };\n  } else if (typeof opts.pins === \"object\" && Array.isArray(opts.pins)) {\n    opts.pins = {\n      data: opts.pins[0],\n      clock: opts.pins[1],\n      latch: opts.pins[2],\n      reset: opts.pins.length === 4 ? opts.pins[3] : null,\n    };\n  }\n\n  Board.Component.call(\n    this, opts = Board.Options(opts)\n  );\n\n  this.size = opts.size || 1;\n  this.pins.reset = typeof opts.pins.reset !== \"undefined\" ? opts.pins.reset : null;\n\n  var isAnode = typeof opts.isAnode !== \"undefined\" ? opts.isAnode : false;\n  var clear = isAnode ? 255 : 0;\n  var state = {\n    isAnode: isAnode,\n    value: new Array(this.size).fill(clear),\n    encoded: encoded[isAnode ? \"anode\" : \"cathode\"],\n    clear: clear,\n  };\n\n  priv.set(this, state);\n\n  Object.defineProperties(this, {\n    isAnode: {\n      get: function() {\n        return isAnode;\n      }\n    },\n    value: {\n      get: function() {\n        return state.value;\n      }\n    },\n  });\n}\n\nvar encoded = {\n  cathode: [63, 6, 91, 79, 102, 109, 125, 7, 127, 103],\n  anode: [64, 121, 36, 48, 25, 18, 2, 120, 0, 24],\n};\n\n/**\n * Print a digit on a seven segment display, or several\n * digits across several displays.\n */\nShiftRegister.prototype.display = function(value) {\n  var state = priv.get(this);\n  var chars;\n\n  if (typeof value === \"number\") {\n    // 1, 20, etc.\n    return this.display(String(value));\n  }\n\n  if (typeof value === \"string\") {\n    var matches = value.match(/([0-9]{1}\\.*)/g);\n\n    if (matches && matches.length) {\n      chars = matches.map(function(char) {\n        // \"1\"\n        if (char.length === 1) {\n          return state.encoded[char] | (1 << 7);\n        }\n        // \"1.?.?\"\n        return state.encoded[char[0]];\n      });\n    }\n  }\n\n  this.send(chars);\n\n  state.value = chars;\n\n  return this;\n};\n\n/**\n * Send one or more values to the shift register.\n * @param {...number} value Value to send\n * @returns {ShiftRegister}\n */\nShiftRegister.prototype.send = function(value) {\n  var state = priv.get(this);\n  var args = Array.from(arguments);\n\n  if (args.length === 1) {\n    args = [value];\n  }\n\n  if (Array.isArray(value)) {\n    args = value;\n  }\n\n  // open latch to fill register with data\n  this.io.digitalWrite(this.pins.latch, this.io.LOW);\n\n  args.forEach(function(arg) {\n    if (typeof arg === \"string\") {\n      arg = arg.charCodeAt(0);\n    }\n    if (this.isAnode &&\n      (arg !== 255 && !state.encoded.includes(arg) && !state.encoded.includes(arg & ~(1 << 7)))) {\n\n      var index = encoded.anode.findIndex(function(value) {\n        return value === arg;\n      });\n\n      if (index !== -1) {\n        arg = encoded.cathode[index];\n      }\n    }\n    this.board.shiftOut(this.pins.data, this.pins.clock, true, arg);\n  }, this);\n\n  // close latch to commit bits into register.\n  this.io.digitalWrite(this.pins.latch, this.io.HIGH);\n\n  state.value = args;\n\n  return this;\n};\n\n/**\n * Clear the shift register by replacing each value with a 0.\n * @type {ShiftRegister}\n */\nShiftRegister.prototype.clear = function() {\n  var state = priv.get(this);\n  return this.send(Array(this.size).fill(state.clear));\n};\n\nShiftRegister.prototype.reset = function() {\n  if (this.pins.reset === null) {\n    throw new Error(\"ShiftRegister was not initialized with a reset pin\");\n  }\n  this.io.digitalWrite(this.pins.clock, this.io.LOW);\n  this.io.digitalWrite(this.pins.reset, this.io.LOW);\n  this.io.digitalWrite(this.pins.clock, this.io.HIGH);\n  this.io.digitalWrite(this.pins.reset, this.io.HIGH);\n\n  return this;\n};\n\n\n\n\n/**\n * ShiftRegisters()\n * new ShiftRegisters()\n */\nfunction ShiftRegisters(numsOrObjects) {\n  if (!(this instanceof ShiftRegisters)) {\n    return new ShiftRegisters(numsOrObjects);\n  }\n\n  Object.defineProperty(this, \"type\", {\n    value: ShiftRegister\n  });\n\n  Collection.call(this, numsOrObjects);\n}\n\nutil.inherits(ShiftRegisters, Collection);\n\n\n/*\n * ShiftRegisters, display(...)\n *\n * eg. array.display(...);\n\n * ShiftRegisters, send(...)\n *\n * eg. array.send(...);\n\n * ShiftRegisters, clear()\n *\n * eg. array.clear();\n\n * ShiftRegisters, reset()\n *\n * eg. array.reset();\n */\n\nCollection.installMethodForwarding(\n  ShiftRegisters.prototype, ShiftRegister.prototype\n);\n\n// Assign ShiftRegisters Collection class as static \"method\" of ShiftRegister.\nShiftRegister.Collection = ShiftRegisters;\n\n/* istanbul ignore else */\nif (!!process.env.IS_TEST_MODE) {\n  ShiftRegister.purge = function() {\n    priv.clear();\n  };\n}\n\nmodule.exports = ShiftRegister;\n","/home/travis/build/npmtest/node-npmtest-johnny-five/node_modules/johnny-five/lib/piezo.js":"var Board = require(\"./board\");\nvar Timer = require(\"nanotimer\");\n\nvar MICROSECONDS_PER_SECOND = 1000000;\nvar priv = new Map();\nvar defaultOctave = 4;\n\nfunction clearTimer() {\n  if (!this.timer) {\n    return;\n  }\n\n  this.timer.clearInterval();\n  delete this.timer;\n}\n\nvar Controllers = {\n  /**\n   * Timer-based tone generator using digital high/low piezo.\n   */\n  DEFAULT: {\n    initialize: {\n      writable: true,\n      value: function() {\n        this.io.pinMode(this.pin, this.io.MODES.OUTPUT);\n      },\n    },\n    tone: {\n      writable: true,\n      value: function(tone, duration) {\n        if (isNaN(tone) || isNaN(duration)) {\n          // Very Bad Things happen if one tries to play a NaN tone\n          throw new Error(\n            \"Piezo.tone: invalid tone or duration\"\n          );\n        }\n\n        clearTimer.call(this);\n\n        var timer = this.timer = new Timer();\n        var value = 1;\n\n        timer.setInterval(function() {\n          value = value === 1 ? 0 : 1;\n          this.io.digitalWrite(this.pin, value);\n\n          if ((timer.difTime / 1000000) > duration) {\n            clearTimer.call(this);\n          }\n        }.bind(this), null, tone + \"u\", function() {});\n\n        return this;\n      },\n    },\n    noTone: {\n      writable: true,\n      value: function() {\n        this.io.digitalWrite(this.pin, 0);\n        clearTimer.call(this);\n\n        return this;\n      },\n    },\n  },\n\n  I2C_BACKPACK: {\n    ADDRESSES: {\n      value: [0x0A]\n    },\n    REGISTER: {\n      value: {\n        NO_TONE: 0x00,\n        TONE: 0x01,\n      },\n    },\n    initialize: {\n      value: function(opts) {\n        var state = priv.get(this);\n        var address = opts.address || this.ADDRESSES[0];\n\n        state.address = opts.address = address;\n\n        this.io.i2cConfig(opts);\n      }\n    },\n    tone: {\n      value: function(tone, duration) {\n        var state = priv.get(this);\n\n        if (isNaN(tone) || isNaN(duration)) {\n          throw new Error(\n            \"Piezo.tone: invalid tone or duration\"\n          );\n        }\n\n        var data = [\n          this.REGISTER.TONE,\n          this.pin,\n          (tone >> 8) & 0xff,\n          tone & 0xff,\n          (duration >> 24) & 0xff,\n          (duration >> 16) & 0xff,\n          (duration >> 8) & 0xff,\n          duration & 0xff,\n        ];\n\n        this.io.i2cWrite(state.address, data);\n\n        return this;\n      },\n    },\n    noTone: {\n      value: function() {\n        var state = priv.get(this);\n\n        var data = [\n          this.REGISTER.NO_TONE,\n          this.pin,\n        ];\n\n        this.io.i2cWrite(state.address, data);\n\n        return this;\n      },\n    },\n  },\n};\n\nfunction Piezo(opts) {\n\n  if (!(this instanceof Piezo)) {\n    return new Piezo(opts);\n  }\n\n  Board.Component.call(\n    this, opts = Board.Options(opts)\n  );\n\n  var controller = null;\n\n  if (opts.controller && typeof opts.controller === \"string\") {\n    controller = Controllers[opts.controller.toUpperCase()];\n  } else {\n    controller = opts.controller;\n  }\n\n  if (controller == null) {\n    controller = Controllers.DEFAULT;\n  }\n\n  Object.defineProperties(this, controller);\n\n  Board.Controller.call(this, controller, opts);\n\n  // Piezo instance properties\n  var state = {\n    isPlaying: false,\n    timeout: null,\n    address: null,\n  };\n\n  priv.set(this, state);\n\n  Object.defineProperties(this, {\n    isPlaying: {\n      get: function() {\n        return state.isPlaying;\n      }\n    }\n  });\n\n  if (typeof this.initialize === \"function\") {\n    this.initialize(opts);\n  }\n}\n\n// These notes are rounded up at .5 otherwise down.\nPiezo.Notes = {\n  \"c0\": 16,\n  \"c#0\": 17,\n  \"d0\": 18,\n  \"d#0\": 19,\n  \"e0\": 21,\n  \"f0\": 22,\n  \"f#0\": 23,\n  \"g0\": 25,\n  \"g#0\": 26,\n  \"a0\": 28,\n  \"a#0\": 29,\n  \"b0\": 31,\n  \"c1\": 33,\n  \"c#1\": 35,\n  \"d1\": 37,\n  \"d#1\": 39,\n  \"e1\": 41,\n  \"f1\": 44,\n  \"f#1\": 47,\n  \"g1\": 49,\n  \"g#1\": 52,\n  \"a1\": 55,\n  \"a#1\": 58,\n  \"b1\": 62,\n  \"c2\": 65,\n  \"c#2\": 69,\n  \"d2\": 73,\n  \"d#2\": 78,\n  \"e2\": 82,\n  \"f2\": 87,\n  \"f#2\": 93,\n  \"g2\": 98,\n  \"g#2\": 104,\n  \"a2\": 110,\n  \"a#2\": 117,\n  \"b2\": 124,\n  \"c3\": 131,\n  \"c#3\": 139,\n  \"d3\": 147,\n  \"d#3\": 156,\n  \"e3\": 165,\n  \"f3\": 175,\n  \"f#3\": 185,\n  \"g3\": 196,\n  \"g#3\": 208,\n  \"a3\": 220,\n  \"a#3\": 233,\n  \"b3\": 247,\n  \"c4\": 262,\n  \"c#4\": 277,\n  \"d4\": 294,\n  \"d#4\": 311,\n  \"e4\": 330,\n  \"f4\": 349,\n  \"f#4\": 370,\n  \"g4\": 392,\n  \"g#4\": 415,\n  \"a4\": 440,\n  \"a#4\": 466,\n  \"b4\": 494,\n  \"c5\": 523,\n  \"c#5\": 554,\n  \"d5\": 587,\n  \"d#5\": 622,\n  \"e5\": 659,\n  \"f5\": 698,\n  \"f#5\": 740,\n  \"g5\": 784,\n  \"g#5\": 831,\n  \"a5\": 880,\n  \"a#5\": 932,\n  \"b5\": 988,\n  \"c6\": 1047,\n  \"c#6\": 1109,\n  \"d6\": 1175,\n  \"d#6\": 1245,\n  \"e6\": 1319,\n  \"f6\": 1397,\n  \"f#6\": 1480,\n  \"g6\": 1568,\n  \"g#6\": 1661,\n  \"a6\": 1760,\n  \"a#6\": 1865,\n  \"b6\": 1976,\n  \"c7\": 2093,\n  \"c#7\": 2217,\n  \"d7\": 2349,\n  \"d#7\": 2489,\n  \"e7\": 2637,\n  \"f7\": 2794,\n  \"f#7\": 2960,\n  \"g7\": 3136,\n  \"g#7\": 3322,\n  \"a7\": 3520,\n  \"a#7\": 3729,\n  \"b7\": 3951,\n  \"c8\": 4186,\n  \"c#8\": 4435,\n  \"d8\": 4699,\n  \"d#8\": 4978,\n  \"e8\": 5274,\n  \"f8\": 5588,\n  \"f#8\": 5920,\n  \"g8\": 6272,\n  \"g#8\": 6645,\n  \"a8\": 7040,\n  \"a#8\": 7459,\n  \"b8\": 7902,\n};\n\nPiezo.Frequencies = Object.keys(Piezo.Notes).reduce(function(accum, note) {\n  accum[Piezo.Notes[note]] = note;\n  return accum;\n}, {});\n\nPiezo.Parsers = {};\n/**\n * Get the tone from the current note. note\n * could be an int, string, array or null.\n * If int or null, leave alone. Otherwise,\n * derive what the tone should be.\n * @return int | null\n */\nPiezo.Parsers.hzFromInput = function(input) {\n  var output = input;\n\n  if (Array.isArray(input)) {\n    output = input[0];\n  }\n\n  // Is it a valid frequency?\n  if (typeof output === \"number\" &&\n      Piezo.Frequencies[output]) {\n    return output;\n  }\n\n  // See above: Piezo.Notes { ... }\n  if (typeof output === \"string\") {\n    output = output.toLowerCase().trim();\n\n    // Example: c#, c\n    if (output.endsWith(\"#\") || output.length === 1) {\n      output += defaultOctave;\n    }\n\n    // There will never be a 0 tone\n    output = Piezo.Notes[output] || null;\n  }\n\n  // Normalize NaN, null & undefined to null\n  if (isNaN(output)) {\n    output = null;\n  }\n\n  return output;\n};\n\n/**\n * Obtain the beat/duration count from the current\n * note. This is either an int or undefined. Default\n * to 1.\n * @return int (default 1)\n */\nPiezo.Parsers.beatFromNote = function(note) {\n  var beat = 1;\n  if (Array.isArray(note) && note[1] !== undefined) {\n    // If extant, beat will be second element of note\n    beat = note[1];\n  }\n  return beat;\n};\n\n/**\n * Validate the octave provided to ensure the value is\n * supported and won't crash the board.\n * @return bool\n */\nPiezo.isValidOctave = function(octave) {\n  return typeof octave === \"number\" && (octave >= 0 && octave <= 8);\n};\n\n/**\n * Set or get a default octave for all notes\n * @return number\n */\nPiezo.defaultOctave = function(octave) {\n  if (Piezo.isValidOctave(octave)) {\n    defaultOctave = octave;\n  }\n\n  return defaultOctave;\n};\n\nPiezo.ToFrequency = function(tone) {\n  var toneSeconds = tone / MICROSECONDS_PER_SECOND;\n  var period = toneSeconds * 2;\n  return Math.round(1 / period);\n};\n\nPiezo.ToTone = function(frequency) {\n  var period = 1 / frequency;\n  var duty = period / 2;\n  return Math.round(duty * MICROSECONDS_PER_SECOND);\n};\n\nPiezo.ToSong = function(stringSong, beats) {\n  beats = beats || 1;\n  var notes = stringSong.split(\" \");\n  var song = [];\n  var note, lastNote;\n  while (notes.length) {\n    note = notes.shift();\n    if (/^[0-9]+$/.test(note)) {\n      note = parseInt(note, 10);\n    }\n    lastNote = song[song.length - 1];\n    if (lastNote && lastNote[0] === note) {\n      lastNote[1] += beats;\n    } else {\n      song.push([note, beats]);\n    }\n  }\n  return song;\n};\n\nPiezo.prototype.note = function(note, duration) {\n  var tone = Piezo.Parsers.hzFromInput(note);\n\n  return this.tone(tone, duration);\n};\n\nPiezo.prototype.tone = function(tone, duration) {\n  return this.frequency(Piezo.ToFrequency(tone), duration);\n};\n\nPiezo.prototype.frequency = function(frequency, duration) {\n  return this.tone(Piezo.ToTone(frequency), duration);\n};\n\n\nPiezo.prototype.play = function(tune, callback) {\n  if (typeof tune !== \"object\") {\n    tune = {\n      song: tune\n    };\n  }\n\n  if (typeof tune.song === \"string\") {\n    tune.song = Piezo.ToSong(tune.song, tune.beats);\n  }\n\n  if (tune.song && !Array.isArray(tune.song)) {\n    /*\n      If `tune.song` was present and not falsy,\n      but also is not a string (above), or an array\n      (presently), then it is likely a Hz value, so\n      normalize song to the appropriate array format:\n     */\n    tune.song = [tune.song];\n    /*\n      Note: This path is taken for calls that look\n      like this:\n\n      piezo.play({\n        song: 262,\n      }, ...)\n\n      Where 262 is a frequency in Hz\n     */\n  }\n\n  var state = priv.get(this);\n  var tempo = tune.tempo || 250;\n  // Length for a single beat in ms\n  var beatDuration = Math.round(60000 / tempo);\n  var song = tune.song || [];\n  var duration;\n  var nextNoteIndex = 0;\n\n  var next = function() {\n    if (nextNoteIndex === song.length) {\n      // No more notes in song:\n      // Song is over\n      state.isPlaying = false;\n      if (typeof callback === \"function\") {\n        callback(tune);\n      }\n      return;\n    }\n\n    var note = song[nextNoteIndex];\n    var hz = Piezo.Parsers.hzFromInput(note);\n    var beat = Piezo.Parsers.beatFromNote(note);\n\n    duration = beat * beatDuration;\n    nextNoteIndex++;\n\n    if (hz === null) {\n      this.noTone();\n    } else {\n      this.frequency(hz, duration);\n    }\n\n    state.timeout = setTimeout(next, duration);\n  }.bind(this);\n\n  // We are playing a song\n  state.isPlaying = true;\n\n  next();\n\n  return this;\n};\n\nPiezo.prototype.off = function() {\n  return this.noTone();\n};\n\nPiezo.prototype.stop = function() {\n  var state = priv.get(this);\n\n  /* istanbul ignore else */\n  if (state.timeout) {\n    clearTimeout(state.timeout);\n    state.timeout = null;\n  }\n\n  return this;\n};\n\n\nmodule.exports = Piezo;\n","/home/travis/build/npmtest/node-npmtest-johnny-five/node_modules/johnny-five/lib/ping.js":"var Emitter = require(\"events\").EventEmitter;\nvar util = require(\"util\");\n\nvar Board = require(\"./board\");\nvar Fn = require(\"./fn\");\nvar within = require(\"./mixins/within\");\n\nvar toFixed = Fn.toFixed;\n\nvar priv = new Map();\n\n/**\n * Ping\n * @param {Object} opts Options: pin\n */\n\nfunction Ping(opts) {\n\n  if (!(this instanceof Ping)) {\n    return new Ping(opts);\n  }\n\n  var last = null;\n\n  Board.Component.call(\n    this, opts = Board.Options(opts)\n  );\n\n  this.pin = opts && opts.pin || 7;\n  this.freq = opts.freq || 20;\n  // this.pulse = opts.pulse || 250;\n\n  var state = {\n    value: null\n  };\n\n  // Private settings object\n  var settings = {\n    pin: this.pin,\n    value: this.io.HIGH,\n    pulseOut: 5\n  };\n\n  this.io.setMaxListeners(100);\n\n  // Interval for polling pulse duration as reported in microseconds\n  setInterval(function() {\n    this.io.pingRead(settings, function(microseconds) {\n      state.value = microseconds;\n    });\n  }.bind(this), 225);\n\n  // Interval for throttled event\n  setInterval(function() {\n    if (state.value === null) {\n      return;\n    }\n\n    // The \"read\" event has been deprecated in\n    // favor of a \"data\" event.\n    this.emit(\"data\", state.value);\n\n    // If the state.value for this interval is not the same as the\n    // state.value in the last interval, fire a \"change\" event.\n    if (state.value !== last) {\n      this.emit(\"change\", state.value);\n    }\n\n    // Store state.value for comparison in next interval\n    last = state.value;\n\n    // Reset samples;\n    // samples.length = 0;\n  }.bind(this), this.freq);\n\n  Object.defineProperties(this, {\n    value: {\n      get: function() {\n        return state.value;\n      }\n    },\n    // Based on the round trip travel time in microseconds,\n    // Calculate the distance in inches and centimeters\n    inches: {\n      get: function() {\n        return toFixed(state.value / 74 / 2, 2);\n      }\n    },\n    in: {\n      get: function() {\n        return this.inches;\n      }\n    },\n    cm: {\n      get: function() {\n        return toFixed(state.value / 29 / 2, 3);\n      }\n    }\n  });\n\n  priv.set(this, state);\n}\n\nutil.inherits(Ping, Emitter);\n\nObject.assign(Ping.prototype, within);\n\nmodule.exports = Ping;\n\n\n//http://itp.nyu.edu/physcomp/Labs/Servo\n//http://arduinobasics.blogspot.com/2011/05/arduino-uno-flex-sensor-and-leds.html\n//http://protolab.pbworks.com/w/page/19403657/TutorialPings\n","/home/travis/build/npmtest/node-npmtest-johnny-five/node_modules/johnny-five/lib/proximity.js":"var Board = require(\"./board\");\nvar Collection = require(\"./mixins/collection\");\nvar EVS = require(\"./evshield\");\nvar Fn = require(\"./fn\");\nvar within = require(\"./mixins/within\");\nvar Emitter = require(\"events\").EventEmitter;\nvar util = require(\"util\");\nvar Pins = Board.Pins;\n\nvar toFixed = Fn.toFixed;\n\nvar priv = new Map();\n\nfunction analogHandler(opts, dataHandler) {\n  this.io.pinMode(this.pin, this.io.MODES.ANALOG);\n  this.io.analogRead(this.pin, function(data) {\n    dataHandler.call(this, data);\n  }.bind(this));\n}\n\nvar Controllers = {\n  GP2Y0A21YK: {\n    // https://www.sparkfun.com/products/242\n    initialize: {\n      value: analogHandler\n    },\n    toCm: {\n      value: function(raw) {\n        return toFixed(12343.85 * Math.pow(raw, -1.15), 2);\n      }\n    }\n  },\n  GP2D120XJ00F: {\n    // https://www.sparkfun.com/products/8959\n    initialize: {\n      value: analogHandler\n    },\n    toCm: {\n      value: function(raw) {\n        return toFixed((2914 / (raw + 5)) - 1, 2);\n      }\n    }\n  },\n  GP2Y0A02YK0F: {\n    // https://www.sparkfun.com/products/8958\n    // 15cm - 150cm\n    initialize: {\n      value: analogHandler\n    },\n    toCm: {\n      value: function(raw) {\n        return toFixed(10650.08 * Math.pow(raw, -0.935) - 10, 2);\n      }\n    }\n  },\n  GP2Y0A41SK0F: {\n    // https://www.sparkfun.com/products/12728\n    // 4cm - 30cm\n    initialize: {\n      value: analogHandler\n    },\n    toCm: {\n      value: function(raw) {\n        return toFixed(2076 / (raw - 11), 2);\n      }\n    }\n  },\n  GP2Y0A710K0F: {\n    // https://www.adafruit.com/products/1568\n    // 100cm - 500cm\n    initialize: {\n      value: analogHandler\n    },\n    toCm: {\n      value: function(raw) {\n        // http://www.basicx.com/Products/robotbook/ir%20curve%20fit.pdf\n        return toFixed(3.8631e8 * Math.pow(raw, -2.463343), 0);\n      }\n    }\n  },\n  SRF10: {\n    initialize: {\n      value: function(opts, dataHandler) {\n\n        var address = opts.address || 0x70;\n        var msUntilNextRead = 65;\n\n        opts.address = address;\n\n        // Set up I2C data connection\n        this.io.i2cConfig(opts);\n\n        // Startup parameter\n        this.io.i2cWrite(address, [0x01, 16]);\n        this.io.i2cWrite(address, [0x02, 255]);\n\n        function read() {\n          this.io.i2cWrite(address, [0x02]);\n          this.io.i2cReadOnce(address, 2, function(data) {\n            dataHandler((data[0] << 8) | data[1]);\n          }.bind(this));\n\n          prime.call(this);\n        }\n\n        function prime() {\n          // 0x51 result in cm (centimeters)\n          this.io.i2cWrite(address, [0x00, 0x51]);\n\n          setTimeout(read.bind(this), msUntilNextRead);\n        }\n\n        prime.call(this);\n      }\n    },\n    toCm: {\n      value: function(raw) {\n        return raw;\n      }\n    }\n  },\n  // LV-MaxSonar-EZ\n  // LV-MaxSonar-EZ0\n  // LV-MaxSonar-EZ1\n  MB1000: {\n    initialize: {\n      value: analogHandler\n    },\n    toCm: {\n      value: function(raw) {\n        // From http://www.maxbotix.com/articles/032.htm\n        // ADC -> inches -> cm\n        return (raw / 2) * 2.54;\n      }\n    }\n  },\n  // HRLV-MaxSonar-EZ0\n  MB1003: {\n    initialize: {\n      value: analogHandler\n    },\n    toCm: {\n      value: function(raw) {\n        // http://www.maxbotix.com/articles/032.htm\n        return raw / 2;\n      }\n    }\n  },\n  // XL-MaxSonar-EZ3\n  MB1230: {\n    initialize: {\n      value: analogHandler\n    },\n    toCm: {\n      value: function(raw) {\n        // From http://www.maxbotix.com/articles/016.htm\n        // Using a Standard Range XL-MaxSonar with an ADC (Analog Digital Converter)\n        // When using a standard XL-MaxSonar with an ADC, verify that the sensor\n        // and micro-controller are referencing the same power supply and ground.\n        // This also assumes that the ADC being used is perfectly accurate.\n        // When reading the sensor's output with the scaling in centimeters with a\n        // 10-bit ADC, the range can be read directly off the ADC.\n        // If the ADC output reads 700 the range in centimeters is 700 centimeters.\n        //\n        // ADC -> cm\n        return raw;\n      }\n    }\n  },\n  HCSR04: {\n    initialize: {\n      value: function(opts, dataHandler) {\n        var pinValue = opts.pinValue;\n        var msToNextRead = 65;\n\n        if (Pins.isFirmata(this)) {\n          if (typeof pinValue === \"string\" && pinValue[0] === \"A\") {\n            pinValue = this.io.analogPins[+pinValue.slice(1)];\n          }\n\n          pinValue = +pinValue;\n\n          if (this.io.analogPins.includes(pinValue)) {\n            opts.pin = pinValue;\n          }\n\n          this.pin = opts.pin;\n        }\n\n        // Private settings object\n        var settings = {\n          pin: opts.pin,\n          value: this.io.HIGH,\n          pulseOut: 5,\n        };\n\n        var read = function() {\n          this.io.pingRead(settings, function(microseconds) {\n            dataHandler(microseconds);\n            setTimeout(read, msToNextRead);\n          });\n        }.bind(this);\n\n        read();\n      }\n    },\n    toCm: {\n      value: function(raw) {\n        return toFixed(raw / 29.1 / 2, 3);\n      }\n    }\n  },\n  HCSR04I2CBACKPACK: {\n    initialize: {\n      value: function(opts, datahandler) {\n        var address = opts.address || 0x27;\n        var msToNextRead = 90;\n\n        opts.address = address;\n\n        // set up IO connection:\n        this.io.i2cConfig(opts);\n\n        if (typeof opts.pin === \"undefined\") {\n          this.pin = 8;\n        }\n\n        var read = function() {\n          // Read the 2 data bytes from the \"register\" for the pin.\n          // When firmware is complete, update to:\n          // this.io.i2cReadOnce(address, this.pin, 2, function(data) {\n          this.io.i2cReadOnce(address, 2, function(data) {\n            datahandler((data[0] << 8) + data[1]);\n            setTimeout(read, msToNextRead);\n          });\n        }.bind(this);\n\n        read();\n      }\n    },\n    toCm: {\n      value: function(raw) {\n        return toFixed(raw / 29.1 / 2, 3);\n      }\n    }\n  },\n  LIDARLITE: {\n    REGISTER: {\n      value: {\n        ENABLE: 0x00,\n        READ: 0x8F,\n      }\n    },\n    initialize: {\n      value: function(opts, dataHandler) {\n        var address = 0x62;\n\n        opts.address = address;\n\n        this.io.i2cConfig(opts);\n\n        var read = function() {\n          this.io.i2cWrite(address, this.REGISTER.ENABLE, 0x04);\n          setTimeout(function() {\n            this.io.i2cReadOnce(address, this.REGISTER.READ, 2, function(bytes) {\n              // http://www.robotshop.com/media/files/pdf/operating-manual-llm20c132i500s011.pdf\n              // Step 5 of Quick Start Guide\n              dataHandler((bytes[0] << 8) + bytes[1]);\n              read();\n            });\n          }.bind(this), 20);\n        }.bind(this);\n\n        read();\n      }\n    },\n    toCm: {\n      value: function(raw) {\n        return raw;\n      }\n    }\n  },\n  EVS_EV3_IR: {\n    initialize: {\n      value: function(opts, dataHandler) {\n        var state = priv.get(this);\n\n        state.shield = EVS.shieldPort(opts.pin);\n\n        state.ev3 = new EVS(Object.assign(opts, {\n          io: this.io\n        }));\n        state.ev3.setup(state.shield, EVS.Type_EV3);\n        state.ev3.read(state.shield, EVS.Proximity, EVS.Proximity_Bytes, function(data) {\n          var value = data[0] | (data[1] << 8);\n\n          dataHandler(value);\n        });\n      }\n    },\n    toCm: {\n      value: function(raw) {\n        return raw;\n      }\n    }\n  },\n  EVS_EV3_US: {\n    initialize: {\n      value: function(opts, dataHandler) {\n        var state = priv.get(this);\n\n        state.shield = EVS.shieldPort(opts.pin);\n\n        state.ev3 = new EVS(Object.assign(opts, {\n          io: this.io\n        }));\n        state.ev3.setup(state.shield, EVS.Type_EV3);\n        state.ev3.read(state.shield, EVS.Proximity, EVS.Proximity_Bytes, function(data) {\n          var value = data[0] | (data[1] << 8);\n          dataHandler(value);\n        });\n      }\n    },\n    toCm: {\n      value: function(raw) {\n        return raw / 10;\n      }\n    }\n  },\n};\n\n// Sensor aliases\n// IR\nControllers[\"2Y0A21\"] = Controllers.GP2Y0A21YK;\nControllers[\"2D120X\"] = Controllers.GP2D120XJ00F;\nControllers[\"2Y0A02\"] = Controllers.GP2Y0A02YK0F;\nControllers[\"0A41\"] = Controllers.GP2Y0A41SK0F;\nControllers[\"0A21\"] = Controllers.GP2Y0A21YK;\nControllers[\"0A02\"] = Controllers.GP2Y0A02YK0F;\nControllers[\"41SK0F\"] = Controllers.GP2Y0A41SK0F;\nControllers[\"21YK\"] = Controllers.GP2Y0A21YK;\nControllers[\"2YK0F\"] = Controllers.GP2Y0A02YK0F;\n\n// Sonar\nControllers.MB1010 = Controllers.MB1000;\n\nControllers[\"LV-MaxSonar-EZ\"] = Controllers.MB1000;\nControllers[\"LV-MaxSonar-EZ0\"] = Controllers.MB1000;\nControllers[\"LV-MaxSonar-EZ1\"] = Controllers.MB1010;\nControllers[\"HRLV-MaxSonar-EZ0\"] = Controllers.MB1003;\nControllers[\"XL-MaxSonar-EZ3\"] = Controllers.MB1230;\n\n// Ping\n[\n  \"HC-SR04\",\n  \"SR04\",\n  \"SRF05\",\n  \"SRF06\",\n  \"PARALLAXPING\",\n  \"SEEEDPING\",\n  \"GROVEPING\",\n  \"PING_PULSE_IN\",\n  \"ULTRASONIC_PING\",\n].forEach(function(alias) {\n  Controllers[alias] = Controllers.HCSR04;\n});\n\n// Ping/HCSR04 I2C Backpack\n[\n  \"HCSR04-I2C-BACKPACK\",\n  \"HC-SR04-I2C-BACKPACK\",\n  \"SR04-I2C-BACKPACK\",\n  \"SR04I2CBACKPACK\",\n  \"PINGI2CBACKPACK\",\n  \"PING-I2C-BACKPACK\",\n  \"HCSR04_I2C_BACKPACK\",\n  \"HC_SR04_I2C_BACKPACK\",\n  \"SR04_I2C_BACKPACK\",\n  \"SR04I2CBACKPACK\",\n  \"PINGI2CBACKPACK\",\n  \"PING_I2C_BACKPACK\",\n].forEach(function(alias) {\n  Controllers[alias] = Controllers.HCSR04I2CBACKPACK;\n});\n\n\n// LIDAR Lite\nControllers[\"LIDAR-Lite\"] = Controllers.LIDARLITE;\n\n\n/**\n * Proximity\n * @constructor\n *\n * five.Proximity(\"A0\");\n *\n * five.Proximity({\n *  controller: \"GP2Y0A41SK0F\",\n *  pin: \"A0\",\n *  freq: 100\n * });\n *\n *\n * @param {Object} opts [description]\n *\n */\n\nfunction Proximity(opts) {\n\n  if (!(this instanceof Proximity)) {\n    return new Proximity(opts);\n  }\n\n  var controller = null;\n  var state = {};\n  var raw = 0;\n  var freq = opts.freq || 25;\n  var last = 0;\n  var pinValue = typeof opts === \"object\" ? opts.pin : opts;\n\n  Board.Component.call(\n    this, opts = Board.Options(opts)\n  );\n\n  if (typeof opts.controller === \"string\") {\n    controller = Controllers[opts.controller];\n  } else {\n    controller = opts.controller || Controllers[\"GP2Y0A21YK\"];\n  }\n\n  Board.Controller.call(this, controller, opts);\n\n  if (!this.toCm) {\n    this.toCm = opts.toCm || function(x) {\n      return x;\n    };\n  }\n\n  priv.set(this, state);\n\n  Object.defineProperties(this, {\n    /**\n     * [read-only] Calculated centimeter value\n     * @property centimeters\n     * @type Number\n     */\n    centimeters: {\n      get: function() {\n        return this.toCm(raw);\n      }\n    },\n    cm: {\n      get: function() {\n        return this.centimeters;\n      }\n    },\n    /**\n     * [read-only] Calculated inch value\n     * @property inches\n     * @type Number\n     */\n    inches: {\n      get: function() {\n        return toFixed(this.centimeters * 0.39, 2);\n      }\n    },\n    in: {\n      get: function() {\n        return this.inches;\n      }\n    },\n  });\n\n  if (typeof this.initialize === \"function\") {\n    opts.pinValue = pinValue;\n    this.initialize(opts, function(data) {\n      raw = data;\n    });\n  }\n\n  setInterval(function() {\n    if (raw === undefined) {\n      return;\n    }\n\n    var data = {\n      cm: this.cm,\n      centimeters: this.centimeters,\n      in: this.in,\n      inches: this.inches\n    };\n\n    this.emit(\"data\", data);\n\n    if (raw !== last) {\n      last = raw;\n      this.emit(\"change\", data);\n    }\n  }.bind(this), freq);\n}\n\nProximity.Controllers = [\n  \"2Y0A21\", \"GP2Y0A21YK\",\n  \"2D120X\", \"GP2D120XJ00F\",\n  \"2Y0A02\", \"GP2Y0A02YK0F\",\n  \"OA41SK\", \"GP2Y0A41SK0F\",\n  \"0A21\", \"GP2Y0A21YK\",\n  \"0A02\", \"GP2Y0A02YK0F\",\n];\n\nutil.inherits(Proximity, Emitter);\n\nObject.assign(Proximity.prototype, within);\n\n\n/**\n * new Proximity.Collection();\n */\n\nProximity.Collection = function(numsOrObjects) {\n  if (!(this instanceof Proximity.Collection)) {\n    return new Proximity.Collection(numsOrObjects);\n  }\n\n  Object.defineProperty(this, \"type\", {\n    value: Proximity\n  });\n\n  Collection.Emitter.call(this, numsOrObjects);\n};\n\nutil.inherits(Proximity.Collection, Collection.Emitter);\n\nCollection.installMethodForwarding(\n  Proximity.Collection.prototype, Proximity.prototype\n);\n\n/* istanbul ignore else */\nif (!!process.env.IS_TEST_MODE) {\n  Proximity.Controllers = Controllers;\n  Proximity.purge = function() {\n    priv.clear();\n  };\n}\n\nmodule.exports = Proximity;\n","/home/travis/build/npmtest/node-npmtest-johnny-five/node_modules/johnny-five/lib/relay.js":"var Board = require(\"./board\");\nvar Collection = require(\"./mixins/collection\");\nvar util = require(\"util\");\nvar priv = new Map();\n\nfunction Relay(opts) {\n\n  var state;\n\n  if (!(this instanceof Relay)) {\n    return new Relay(opts);\n  }\n\n  Board.Component.call(\n    this, opts = Board.Options(opts)\n  );\n\n  opts.type = opts.type || \"NO\";\n\n  state = {\n    isInverted: opts.type === \"NC\",\n    isOn: false,\n    value: null,\n  };\n\n  priv.set(this, state);\n\n  Object.defineProperties(this, {\n    value: {\n      get: function() {\n        return Number(this.isOn);\n      }\n    },\n    type: {\n      get: function() {\n        return state.isInverted ? \"NC\" : \"NO\";\n      }\n    },\n    isOn: {\n      get: function() {\n        return state.isOn;\n      }\n    }\n  });\n}\n\n/**\n * on Turn the relay on\n * @return {Relay}\n */\nRelay.prototype.on = function() {\n  var state = priv.get(this);\n\n  this.io.digitalWrite(\n    this.pin, state.isInverted ? this.io.LOW : this.io.HIGH\n  );\n  state.isOn = true;\n\n  return this;\n};\n\nRelay.prototype.close = Relay.prototype.on;\n\n/**\n * off Turn the relay off\n * @return {Relay}\n */\nRelay.prototype.off = function() {\n  var state = priv.get(this);\n\n  this.io.digitalWrite(\n    this.pin, state.isInverted ? this.io.HIGH : this.io.LOW\n  );\n  state.isOn = false;\n\n  return this;\n};\n\nRelay.prototype.open = Relay.prototype.off;\n\n/**\n * toggle Toggle the on/off state of the relay\n * @return {Relay}\n */\nRelay.prototype.toggle = function() {\n  var state = priv.get(this);\n\n  if (state.isOn) {\n    this.off();\n  } else {\n    this.on();\n  }\n\n  return this;\n};\n\n/**\n * Relays()\n * new Relays()\n *\n * Constructs an Array-like instance of all relays\n */\nfunction Relays(numsOrObjects) {\n  if (!(this instanceof Relays)) {\n    return new Relays(numsOrObjects);\n  }\n\n  Object.defineProperty(this, \"type\", {\n    value: Relay\n  });\n\n  Collection.call(this, numsOrObjects);\n}\n\nutil.inherits(Relays, Collection);\n\n/*\n * Relays, on()\n *\n * Turn all relays on\n *\n * eg. collection.on();\n *\n *\n * Relays, off()\n *\n * Turn all relays off\n *\n * eg. collection.off();\n *\n *\n * Relays, open()\n *\n * Open all relays\n *\n * eg. collection.open();\n *\n *\n * Relays, close()\n *\n * Close all relays\n *\n * eg. collection.close();\n *\n *\n * Relays, toggle()\n *\n * Toggle the state of all relays\n *\n * eg. collection.toggle();\n */\n\nCollection.installMethodForwarding(\n  Relays.prototype, Relay.prototype\n);\n\n// Assign Relays Collection class as static \"method\" of Relay.\n// TODO: Eliminate .Array for 1.0.0\nRelay.Array = Relays;\nRelay.Collection = Relays;\n\n/* istanbul ignore else */\nif (!!process.env.IS_TEST_MODE) {\n  Relay.purge = function() {\n    priv.clear();\n  };\n}\n\nmodule.exports = Relay;\n","/home/travis/build/npmtest/node-npmtest-johnny-five/node_modules/johnny-five/lib/sonar.js":"var Board = require(\"./board\"),\n  events = require(\"events\"),\n  util = require(\"util\"),\n  within = require(\"./mixins/within\");\n\nvar priv = new Map();\nvar Devices;\n\n/**\n * Sonar\n * @constructor\n *\n * @param {Object} opts Options: pin (analog)\n */\n\nfunction Sonar(opts) {\n\n  if (!(this instanceof Sonar)) {\n    return new Sonar(opts);\n  }\n\n  Board.Component.call(\n    this, opts = Board.Options(opts)\n  );\n\n  var device, state;\n\n  // Sonar instance properties\n  this.freq = opts.freq || 100;\n  this.value = null;\n\n  state = {\n    last: 0,\n    median: 0,\n    samples: []\n  };\n\n  priv.set(this, state);\n\n  if (typeof opts.device === \"string\") {\n    device = Devices[opts.device];\n  } else {\n    device = opts.device;\n  }\n\n  if (typeof device === \"undefined\") {\n    device = Devices.DEFAULT;\n  }\n\n  device.initialize.call(this, opts);\n\n  if (!device.descriptor.inches) {\n    device.descriptor.inches = {\n      get: function() {\n        return +(this.cm * 0.39).toFixed(2);\n      }\n    };\n  }\n\n  device.descriptor.in = device.descriptor.inches;\n\n  Object.defineProperties(this, device.descriptor);\n\n  // Throttle\n  setInterval(function() {\n    // Nothing read since previous interval\n    if (state.samples.length === 0) {\n      return;\n    }\n\n    state.median = state.samples.sort()[Math.floor(state.samples.length / 2)];\n    this.value = state.median;\n\n    this.emit(\"data\", state.median);\n\n    // If the state.median value for this interval is not the same as the\n    // state.median value in the last interval, fire a \"change\" event.\n    //\n    if (state.last && state.median &&\n      (state.median.toFixed(1) !== state.last.toFixed(1))) {\n      this.emit(\"change\", state.median);\n    }\n\n    // Store this media value for comparison\n    // in next interval\n    state.last = state.median;\n\n    // Reset state.samples;\n    state.samples.length = 0;\n  }.bind(this), this.freq);\n}\n\nutil.inherits(Sonar, events.EventEmitter);\nObject.assign(Sonar.prototype, within);\n\nDevices = {\n  SRF10: {\n    initialize: function(opts) {\n\n      var samples = priv.get(this).samples;\n      var address = 0x70;\n      var delay = 65;\n\n      // Set up I2C data connection\n      this.io.i2cConfig(opts);\n\n      // Startup parameter\n      this.io.i2cWrite(address, [0x01, 16]);\n      this.io.i2cWrite(address, [0x02, 255]);\n\n      this.io.setMaxListeners(100);\n\n      function read() {\n        this.io.i2cWrite(address, [0x02]);\n        this.io.i2cReadOnce(address, 2, function(data) {\n          samples.push((data[0] << 8) | data[1]);\n        }.bind(this));\n\n        prime.call(this);\n      }\n\n      function prime() {\n        // 0x52 result in us (microseconds)\n        this.io.i2cWrite(address, [0x00, 0x52]);\n\n        setTimeout(read.bind(this), delay);\n      }\n\n      prime.call(this);\n    },\n    descriptor: {\n      cm: {\n        get: function() {\n          var median = priv.get(this).median;\n          return +((((median / 2) * 343.2) / 10) / 1000).toFixed(1);\n        }\n      }\n    }\n  },\n\n  DEFAULT: {\n    initialize: function() {\n      var samples = priv.get(this).samples;\n\n      // Set the pin to ANALOG mode\n      this.mode = this.io.MODES.ANALOG;\n      this.io.pinMode(this.pin, this.mode);\n\n      this.io.analogRead(this.pin, function(data) {\n        samples.push(data);\n      }.bind(this));\n    },\n    descriptor: {\n      cm: {\n        get: function() {\n          var median = priv.get(this).median;\n          return +((median / 2) * 2.54).toFixed(1);\n        }\n      }\n    }\n  }\n};\n\nDevices.SRF02 = Devices.SRF08 = Devices.SRF10;\n\nmodule.exports = Sonar;\n\n// Reference\n//\n// http://www.maxbotix.com/tutorials.htm#Code_example_for_the_BasicX_BX24p\n// http://www.electrojoystick.com/tutorial/?page_id=285\n\n// Tutorials\n//\n// http://www.sensorpedia.com/blog/how-to-interface-an-ultrasonic-rangefinder-with-sensorpedia-via-twitter-guide-2/\n","/home/travis/build/npmtest/node-npmtest-johnny-five/node_modules/johnny-five/lib/stepper.js":"var Board = require(\"./board\");\nvar Fn = require(\"./fn\");\nvar priv = new Map();\nvar steppers = new Map();\nvar TAU = Fn.TAU;\n\nvar MAXSTEPPERS = 6; // correlates with MAXSTEPPERS in firmware\n\n\nfunction Step(stepper) {\n  this.rpm = 180;\n  this.direction = -1;\n  this.speed = 0;\n  this.accel = 0;\n  this.decel = 0;\n\n  this.stepper = stepper;\n}\n\nStep.PROPERTIES = [\"rpm\", \"direction\", \"speed\", \"accel\", \"decel\"];\nStep.DEFAULTS = [180, -1, 0, 0, 0];\n\n\nfunction MotorPins(pins) {\n  var k = 0;\n  pins = pins.slice();\n  while (pins.length) {\n    this[\"motor\" + (++k)] = pins.shift();\n  }\n}\n\nfunction isSupported(io) {\n  return io.pins.some(function(pin) {\n    return pin.supportedModes.includes(io.MODES.STEPPER);\n  });\n}\n\n/**\n * Stepper\n *\n * Class for handling steppers using AdvancedFirmata support for asynchronous stepper control\n *\n *\n * five.Stepper({\n *  type: constant,     // io.STEPPER.TYPE.*\n *  stepsPerRev: number,  // steps to make on revolution of stepper\n *  pins: {\n *    step: number,   // pin attached to step pin on driver (used for type DRIVER)\n *    dir: number,    // pin attached to direction pin on driver (used for type DRIVER)\n *    motor1: number, // (used for type TWO_WIRE and FOUR_WIRE)\n *    motor2: number, // (used for type TWO_WIRE and FOUR_WIRE)\n *    motor3: number, // (used for type FOUR_WIRE)\n *    motor4: number, // (used for type FOUR_WIRE)\n *  }\n * });\n *\n *\n * five.Stepper({\n *  type: five.Stepper.TYPE.DRIVER\n *  stepsPerRev: number,\n *  pins: {\n *    step: number,\n *    dir: number\n *  }\n * });\n *\n * five.Stepper({\n *  type: five.Stepper.TYPE.DRIVER\n *  stepsPerRev: number,\n *  pins: [ step, dir ]\n * });\n *\n * five.Stepper({\n *  type: five.Stepper.TYPE.TWO_WIRE\n *  stepsPerRev: number,\n *  pins: {\n *    motor1: number,\n *    motor2: number\n *  }\n * });\n *\n * five.Stepper({\n *  type: five.Stepper.TYPE.TWO_WIRE\n *  stepsPerRev: number,\n *  pins: [ motor1, motor2 ]\n * });\n *\n * five.Stepper({\n *  type: five.Stepper.TYPE.FOUR_WIRE\n *  stepsPerRev: number,\n *  pins: {\n *    motor1: number,\n *    motor2: number,\n *    motor3: number,\n *    motor4: number\n *  }\n * });\n *\n * five.Stepper({\n *  type: five.Stepper.TYPE.FOUR_WIRE\n *  stepsPerRev: number,\n *  pins: [ motor1, motor2, motor3, motor4 ]\n * });\n *\n *\n * @param {Object} opts\n *\n */\n\nfunction Stepper(opts) {\n  var state, params = [];\n\n  if (!(this instanceof Stepper)) {\n    return new Stepper(opts);\n  }\n\n  Board.Component.call(\n    this, opts = Board.Options(opts)\n  );\n\n  if (!isSupported(this.io)) {\n    throw new Error(\n      \"Stepper is not supported\"\n    );\n  }\n\n  if (!opts.pins) {\n    throw new Error(\n      \"Stepper requires a `pins` object or array\"\n    );\n  }\n\n  if (!opts.stepsPerRev) {\n    throw new Error(\n      \"Stepper requires a `stepsPerRev` number value\"\n    );\n  }\n\n  steppers.set(this.board, steppers.get(this.board) || []);\n  this.id = steppers.get(this.board).length;\n\n  if (this.id >= MAXSTEPPERS) {\n    throw new Error(\n      \"Stepper cannot exceed max steppers (\" + MAXSTEPPERS + \")\"\n    );\n  }\n\n  // Convert an array of pins to the appropriate named pin\n  if (Array.isArray(this.pins)) {\n    if (this.pins.length === 2) {\n      // Using an array of 2 pins requres a TYPE\n      // to disambiguate DRIVER and TWO_WIRE\n      if (!opts.type) {\n        throw new Error(\n          \"Stepper requires a `type` number value (DRIVER, TWO_WIRE)\"\n        );\n      }\n    }\n\n    if (opts.type === Stepper.TYPE.DRIVER) {\n      this.pins = {\n        step: this.pins[0],\n        dir: this.pins[1]\n      };\n    } else {\n      this.pins = new MotorPins(this.pins);\n    }\n  }\n\n  // Attempt to guess the type if none is provided\n  if (!opts.type) {\n    if (this.pins.dir) {\n      opts.type = Stepper.TYPE.DRIVER;\n    } else {\n      if (this.pins.motor3) {\n        opts.type = Stepper.TYPE.FOUR_WIRE;\n      } else {\n        opts.type = Stepper.TYPE.TWO_WIRE;\n      }\n    }\n  }\n\n\n  // Initial Stepper config params (same for all 3 types)\n  params.push(this.id, opts.type, opts.stepsPerRev);\n\n\n  if (opts.type === Stepper.TYPE.DRIVER) {\n    if (typeof this.pins.dir === \"undefined\" ||\n        typeof this.pins.step === \"undefined\") {\n      throw new Error(\n        \"Stepper.TYPE.DRIVER expects: `pins.dir`, `pins.step`\"\n      );\n    }\n\n    params.push(\n      this.pins.dir, this.pins.step\n    );\n  }\n\n  if (opts.type === Stepper.TYPE.TWO_WIRE) {\n    if (typeof this.pins.motor1 === \"undefined\" ||\n        typeof this.pins.motor2 === \"undefined\") {\n      throw new Error(\n        \"Stepper.TYPE.TWO_WIRE expects: `pins.motor1`, `pins.motor2`\"\n      );\n    }\n\n    params.push(\n      this.pins.motor1, this.pins.motor2\n    );\n  }\n\n  if (opts.type === Stepper.TYPE.FOUR_WIRE) {\n    if (typeof this.pins.motor1 === \"undefined\" ||\n        typeof this.pins.motor2 === \"undefined\" ||\n        typeof this.pins.motor3 === \"undefined\" ||\n        typeof this.pins.motor4 === \"undefined\") {\n      throw new Error(\n        \"Stepper.TYPE.FOUR_WIRE expects: `pins.motor1`, `pins.motor2`, `pins.motor3`, `pins.motor4`\"\n      );\n    }\n\n    params.push(\n      this.pins.motor1, this.pins.motor2, this.pins.motor3, this.pins.motor4\n    );\n  }\n\n  // Iterate the params and set each pin's mode to MODES.STEPPER\n  // Params:\n  // [deviceNum, type, stepsPerRev, dirOrMotor1Pin, stepOrMotor2Pin, motor3Pin, motor4Pin]\n  // The first 3 are required, the remaining 2-4 will be pins\n  params.slice(3).forEach(function(pin) {\n    this.io.pinMode(pin, this.io.MODES.STEPPER);\n  }, this);\n\n  this.io.stepperConfig.apply(this.io, params);\n\n  steppers.get(this.board).push(this);\n\n  state = Step.PROPERTIES.reduce(function(state, key, i) {\n    return (state[key] = typeof opts[key] !== \"undefined\" ? opts[key] : Step.DEFAULTS[i], state);\n  }, {\n    isRunning: false,\n    type: opts.type,\n    pins: this.pins\n  });\n\n  priv.set(this, state);\n\n  Object.defineProperties(this, {\n    type: {\n      get: function() {\n        return state.type;\n      }\n    },\n\n    pins: {\n      get: function() {\n        return state.pins;\n      }\n    }\n  });\n}\n\nObject.defineProperties(Stepper, {\n  TYPE: {\n    value: Object.freeze({\n      DRIVER: 1,\n      TWO_WIRE: 2,\n      FOUR_WIRE: 4\n    })\n  },\n  RUNSTATE: {\n    value: Object.freeze({\n      STOP: 0,\n      ACCEL: 1,\n      DECEL: 2,\n      RUN: 3\n    })\n  },\n  DIRECTION: {\n    value: Object.freeze({\n      CCW: 0,\n      CW: 1\n    })\n  }\n});\n\n/**\n * rpm\n *\n * Gets the rpm value or sets the rpm in revs per minute\n * making an internal conversion to speed in `0.01 * rad/s`\n *\n * @param {Number} rpm Revs per minute\n *\n * NOTE: *rpm* is optional, if missing\n * the method will behave like a getter\n *\n * @return {Stepper} this Chainable method when used as a setter\n */\nStepper.prototype.rpm = function(rpm) {\n  var state = priv.get(this);\n\n  if (typeof rpm === \"undefined\") {\n    return state.rpm;\n  }\n  state.rpm = rpm;\n  state.speed = Math.round(rpm * TAU * 100 / 60);\n  return this;\n};\n\n/**\n * speed\n *\n * Gets the speed value or sets the speed in `0.01 * rad/s`\n * making an internal conversion to rpm\n *\n * @param {Number} speed Speed given in 0.01 * rad/s\n *\n * NOTE: *speed* is optional, if missing\n * the method will behave like a getter\n *\n * @return {Stepper} this Chainable method when used as a setter\n */\nStepper.prototype.speed = function(speed) {\n  var state = priv.get(this);\n\n  if (typeof speed === \"undefined\") {\n    return state.speed;\n  }\n  state.speed = speed;\n  state.rpm = Math.round(speed / TAU / 100 * 60);\n  return this;\n};\n\n[\"direction\", \"accel\", \"decel\"].forEach(function(prop) {\n  Stepper.prototype[prop] = function(value) {\n    var state = priv.get(this);\n\n    if (typeof value === \"undefined\") {\n      return state[prop];\n    }\n    state[prop] = value;\n    return this;\n  };\n});\n\nStepper.prototype.ccw = function() {\n  return this.direction(0);\n};\n\nStepper.prototype.cw = function() {\n  return this.direction(1);\n};\n\n/**\n * step\n *\n * Move stepper motor a number of steps and call the callback on completion\n *\n * @param {Number} stepsOrOpts Steps to move using current settings for speed, accel, etc.\n * @param {Object} stepsOrOpts Options object containing any of the following:\n *    stepsOrOpts = {\n *      steps:\n *      rpm:\n *      speed:\n *      direction:\n *      accel:\n *      decel:\n *    }\n *\n * NOTE: *steps* is required.\n *\n * @param {Function} callback function(err, complete)\n */\nStepper.prototype.step = function(stepsOrOpts, callback) {\n  var steps, step, state, params, isValidStep;\n\n  steps = typeof stepsOrOpts === \"object\" ?\n    (stepsOrOpts.steps || 0) : Math.floor(stepsOrOpts);\n\n  step = new Step(this);\n\n  state = priv.get(this);\n\n  params = [];\n\n  isValidStep = true;\n\n  function failback(error) {\n    isValidStep = false;\n    if (callback) {\n      callback(error);\n    }\n  }\n\n  params.push(steps);\n\n  if (typeof stepsOrOpts === \"object\") {\n    // If an object of property values has been provided,\n    // call the correlating method with the value argument.\n    Step.PROPERTIES.forEach(function(key) {\n      if (typeof stepsOrOpts[key] !== \"undefined\") {\n        this[key](stepsOrOpts[key]);\n      }\n    }, this);\n  }\n\n  if (!state.speed) {\n    this.rpm(state.rpm);\n    step.speed = this.speed();\n  }\n\n\n  // Ensure that the property params are set in the\n  // correct order, but without rpm\n  Step.PROPERTIES.slice(1).forEach(function(key) {\n    params.push(step[key] = this[key]());\n  }, this);\n\n\n  if (steps === 0) {\n    failback(\n      new Error(\n        \"Must set a number of steps when calling `step()`\"\n      )\n    );\n  }\n\n  if (step.direction < 0) {\n    failback(\n      new Error(\n        \"Must set a direction before calling `step()`\"\n      )\n    );\n  }\n\n  if (isValidStep) {\n    state.isRunning = true;\n\n    params.push(function(complete) {\n      state.isRunning = false;\n      callback(null, complete);\n    });\n\n    step.move.apply(step, params);\n  }\n\n  return this;\n};\n\nStep.prototype.move = function(steps, dir, speed, accel, decel, callback) {\n  // Restore the param order... (steps, dir => dir, steps)\n  this.stepper.io.stepperStep.apply(\n    this.stepper.io, [this.stepper.id, dir, steps, speed, accel, decel, callback]\n  );\n};\n\nmodule.exports = Stepper;\n","/home/travis/build/npmtest/node-npmtest-johnny-five/node_modules/johnny-five/lib/switch.js":"var Board = require(\"./board\");\nvar Collection = require(\"./mixins/collection\");\nvar Emitter = require(\"events\").EventEmitter;\nvar Fn = require(\"./fn\");\nvar util = require(\"util\");\n\nvar aliases = {\n  close: [\"close\", \"closed\", \"on\"],\n  open: [\"open\", \"off\"]\n};\n\n\n/**\n * Switch\n * @constructor\n *\n * five.Switch();\n *\n * five.Switch({\n *   pin: 10\n * });\n *\n *\n * @param {Object} opts [description]\n *\n */\n\nfunction Switch(opts) {\n\n  if (!(this instanceof Switch)) {\n    return new Switch(opts);\n  }\n\n  // Create a 5 ms debounce boundary on event triggers\n  // this avoids button events firing on\n  // press noise and false positives\n  var trigger = Fn.debounce(function(key) {\n    aliases[key].forEach(function(type) {\n      this.emit(type, null);\n    }, this);\n  }, 5);\n\n  // Resolve the default type to Normally Open\n  opts.type = opts.type || \"NO\";\n\n  // Is this instance Normally Open?\n  var isNormallyOpen = opts.type === \"NO\";\n  var raw = null;\n  var invert = typeof opts.invert !== \"undefined\" ?\n    opts.invert : (isNormallyOpen || false);\n\n  // Logical Defaults\n  var closeValue = 1;\n  var openValue = 0;\n\n  if (invert) {\n    closeValue ^= 1;\n    openValue ^= 1;\n  }\n\n  Board.Component.call(\n    this, opts = Board.Options(opts)\n  );\n\n  this.io.pinMode(this.pin, this.io.MODES.INPUT);\n\n  if (isNormallyOpen) {\n    this.io.digitalWrite(this.pin, this.io.HIGH);\n  }\n\n  this.io.digitalRead(this.pin, function(data) {\n    raw = data;\n\n    trigger.call(this, this.isOpen ? \"open\" : \"close\");\n  }.bind(this));\n\n  Object.defineProperties(this, {\n    value: {\n      get: function() {\n        return Number(this.isOpen);\n      }\n    },\n    invert: {\n      get: function() {\n        return invert;\n      },\n      set: function(value) {\n        invert = value;\n        closeValue = invert ? 0 : 1;\n        openValue = invert ? 1 : 0;\n      }\n    },\n    closeValue: {\n      get: function() {\n        return closeValue;\n      },\n      set: function(value) {\n        closeValue = value;\n        openValue = value ^ 1;\n      }\n    },\n    openValue: {\n      get: function() {\n        return openValue;\n      },\n      set: function(value) {\n        openValue = value;\n        closeValue = value ^ 1;\n      }\n    },\n    isOpen: {\n      get: function() {\n        return raw === openValue;\n      }\n    },\n    isClosed: {\n      get: function() {\n        return raw === closeValue;\n      }\n    },\n  });\n}\n\nutil.inherits(Switch, Emitter);\n\n\n/**\n * Fired when the Switch is close\n *\n * @event\n * @name close\n * @memberOf Switch\n */\n\n\n/**\n * Fired when the Switch is opened\n *\n * @event\n * @name open\n * @memberOf Switch\n */\n\n\n/**\n * Switches()\n * new Switches()\n *\n * Constructs an Array-like instance of all servos\n */\n\nfunction Switches(numsOrObjects) {\n  if (!(this instanceof Switches)) {\n    return new Switches(numsOrObjects);\n  }\n\n  Object.defineProperty(this, \"type\", {\n    value: Switch\n  });\n\n  Collection.Emitter.call(this, numsOrObjects);\n}\n\nutil.inherits(Switches, Collection.Emitter);\n\nCollection.installMethodForwarding(\n  Switches.prototype, Switch.prototype\n);\n\n// Assign Switches Collection class as static \"method\" of Switch.\nSwitch.Collection = Switches;\n\n\n\nmodule.exports = Switch;\n","/home/travis/build/npmtest/node-npmtest-johnny-five/node_modules/johnny-five/lib/wii.js":"var Board = require(\"./board\"),\n  events = require(\"events\"),\n  util = require(\"util\");\n\nvar Devices, Change, Update;\n\n// Event type alias map\nvar aliases = {\n  down: [\"down\", \"press\", \"tap\", \"impact\", \"hit\"],\n  up: [\"up\", \"release\"],\n  hold: [\"hold\"]\n};\n\n// all private instances\nvar priv = new Map();\n\n// hold time out for buttons.\nvar holdTimeout = new Map();\n\n// keeps data between cycles and fires change event\n// if data changes\nvar last = new Map();\n\n\n\n\n/**\n * Wii\n * @constructor\n *\n * five.Wii({\n *   device: \"RVL-004\",\n *   holdtime: ms before firing a hold event on a button,\n *   freq: ms to throttle the read data loop\n *   threshold: difference of change to qualify for a change event\n *  });\n *\n * Available events:\n *    \"data\" - firehose.\n *    \"down\", \"press\", \"tap\", \"impact\", \"hit\" - button press\n *    \"up\", \"release\" - button release\n *    \"hold\" - button hold\n *\n * @param {Object} opts [description]\n *\n */\n\nfunction Wii(opts) {\n\n  if (!(this instanceof Wii)) {\n    return new Wii(opts);\n  }\n\n  Board.Component.call(this, opts);\n\n  // Derive device definition from Devices\n  var device = Devices[opts.device];\n  var address = device.address;\n  var bytes = device.bytes;\n  var delay = device.delay;\n  var data = device.data.bind(this);\n  var setup = device.setup;\n  var preread = device.preread;\n\n  // Wii controller instance properties\n  this.freq = opts.freq || 100;\n\n  // Button instance properties\n  this.holdtime = opts.holdtime || 500;\n  this.threshold = opts.threshold || 10;\n\n  // Initialize components\n  device.initialize.call(this);\n\n  // Set initial \"last data\" byte array\n  last.set(this, [0, 0, 0, 0, 0, 0, 0]);\n\n  // Set up I2C data connection\n  this.io.i2cConfig(opts);\n\n  // Iterate and write each set of setup instructions\n  setup.forEach(function(bytes) {\n    this.io.i2cWrite(address, bytes);\n  }, this);\n\n  // Unthrottled i2c read request loop\n  setInterval(function() {\n\n    // Send this command to get all sensor data and store into\n    // the 6-byte register within Wii controller.\n    // This must be execute before reading data from the Wii.\n\n    // Iterate and write each set of setup instructions\n    preread.forEach(function(bytes) {\n      this.io.i2cWrite(address, bytes);\n    }, this);\n\n\n    // Request six bytes of data from the controller\n    this.io.i2cReadOnce(address, bytes, data);\n\n    // Use the high-frequency data read loop as the change event\n    // emitting loop. This drastically improves change event\n    // frequency and sensitivity\n    //\n    // Emit change events if any delta is greater than\n    // the threshold\n\n    // RVL-005 does not have a read method at this time.\n    if (typeof device.read !== \"undefined\") {\n      device.read.call(this);\n    }\n  }.bind(this), delay || this.freq);\n\n  // Throttled \"read\" event loop\n  setInterval(function() {\n    var event = new Board.Event({\n      target: this\n    });\n\n    this.emit(\"data\", event);\n\n  }.bind(this), this.freq);\n}\n\nWii.Components = {};\n\n// A nunchuck button (c or z.)\nWii.Components.Button = function(which, controller) {\n\n  if (!(this instanceof Wii.Components.Button)) {\n    return new Wii.Components.Button(which, controller);\n  }\n\n  // c or z.\n  this.which = which;\n\n  // reference to parent controller\n  this.controller = controller;\n\n  // Set initial values for state tracking\n  var state = {\n    isDown: false\n  };\n  priv.set(this, state);\n\n  Object.defineProperties(this, {\n    // is the button up (not pressed)?\n    isUp: {\n      get: function() {\n        return !state.isDown;\n      }\n    },\n\n    // is the button pressed?\n    isDown: {\n      get: function() {\n        return state.isDown;\n      }\n    }\n  });\n};\n\nWii.Components.Joystick = function(controller) {\n\n  if (!(this instanceof Wii.Components.Joystick)) {\n    return new Wii.Components.Joystick(controller);\n  }\n\n  this.controller = controller;\n\n  var state, accessors;\n\n  // Initialize empty state object\n  state = {};\n\n  // Initialize empty accessors object\n  accessors = {};\n\n  // Enumerate Joystick properties\n  [\"x\", \"y\", \"dx\", \"dy\"].forEach(function(key) {\n\n    state[key] = 0;\n\n    // Define accessors for each property in Joystick list\n    accessors[key] = {\n      get: function() {\n        return state[key];\n      }\n    };\n  }, this);\n\n  // Store private state cache\n  priv.set(this, state);\n\n  // Register newly defined accessors\n  Object.defineProperties(this, accessors);\n};\n\nWii.Components.Accelerometer = function(controller) {\n\n  if (!(this instanceof Wii.Components.Accelerometer)) {\n    return new Wii.Components.Accelerometer(controller);\n  }\n\n  this.controller = controller;\n\n  var state, accessors;\n\n  // Initialize empty state object\n  state = {};\n\n  // Initialize empty accessors object\n  accessors = {};\n\n  // Enumerate Joystick properties\n  [\"x\", \"y\", \"z\", \"dx\", \"dy\", \"dz\"].forEach(function(key) {\n\n    state[key] = 0;\n\n    // Define accessors for each property in Joystick list\n    accessors[key] = {\n      get: function() {\n        return state[key];\n      }\n    };\n  }, this);\n\n  // Store private state cache\n  priv.set(this, state);\n\n  // Register newly defined accessors\n  Object.defineProperties(this, accessors);\n};\n\nutil.inherits(Wii, events.EventEmitter);\nutil.inherits(Wii.Components.Button, events.EventEmitter);\nutil.inherits(Wii.Components.Joystick, events.EventEmitter);\nutil.inherits(Wii.Components.Accelerometer, events.EventEmitter);\n\n\n// Regular Wiimote driver bytes will be encoded 0x17\n\nfunction decodeByte(x) {\n  return (x ^ 0x17) + 0x17;\n}\n\n// Change handlers for disparate controller event types\n//\n// Note: Change.* methods are |this| sensitive,\n// therefore, call sites must use:\n//\n//    Change.button.call( instance, data );\n//\n//    Change.component.call( instance, data );\n//\n//\nChange = {\n\n  // Fire a \"down\", \"up\" or \"hold\" (and aliases) event\n  // for a button context\n  button: function(key) {\n    // |this| is button context set by calling as:\n    // Change.button.call( button instance, event key );\n    //\n\n    // Enumerate all button event aliases,\n    // fire matching types\n    aliases[key].forEach(function(type) {\n      var event = new Board.Event({\n        // |this| value is a button instance\n        target: this,\n        type: type\n      });\n\n      // fire button event on the button itself\n      this.emit(type, event);\n\n      // fire button event on the controller\n      this.controller.emit(type, event);\n    }, this);\n  },\n\n  // Fire a \"change\" event on a component context\n  component: function(coordinate) {\n    // |this| is component context set by calling as:\n    // Change.component.call( component instance, coordinate, val );\n    //\n\n    [\"axischange\", \"change\"].forEach(function(type) {\n      var event;\n\n      if (this._events && this._events[type]) {\n        event = new Board.Event({\n          // |this| value is a button instance\n          target: this,\n          type: type,\n          axis: coordinate,\n          // Check dx/dy/dz change to determine direction\n          direction: this[\"d\" + coordinate] < 0 ? -1 : 1\n        });\n\n        // Fire change event on actual component\n        this.emit(type, event);\n\n        // Fire change on controller\n        this.controller.emit(type, event);\n      }\n    }, this);\n  }\n};\n\n// Update handlers for disparate controller event types\n//\n// Note: Update.* methods are |this| sensitive,\n// therefore, call sites must use:\n//\n//    Update.button.call( button instance, boolean down );\n//\n//    Update.component.call( component instance, coordinate, val );\n//\n//\n\nUpdate = {\n  // Set \"down\" state for button context.\n  button: function(isDown) {\n    // |this| is button context set by calling as:\n    // Update.button.call( button instance, boolean down );\n    //\n\n    var state, isFireable;\n\n    // Derive state from private cache\n    state = priv.get(this);\n\n    // if this is a state change, mark this\n    // change as fireable.\n    isFireable = false;\n\n    if (isDown !== state.isDown) {\n      isFireable = true;\n    }\n\n    state.isDown = isDown;\n\n    if (isFireable) {\n      // start hold timeout for broadcasting hold.\n      holdTimeout.set(this, setTimeout(function() {\n        if (state.isDown) {\n          Change.button.call(this, \"hold\");\n        }\n      }.bind(this), this.controller.holdtime));\n\n      Change.button.call(this, isDown ? \"down\" : \"up\");\n    }\n  },\n\n  // Set \"coordinate value\" state for component context.\n  component: function(coordinate, val) {\n    // |this| is component context set by calling as:\n    // Update.component.call( component instance, coordinate, val );\n    //\n\n    var state = priv.get(this);\n    state[\"d\" + coordinate] = val - state[coordinate];\n    state[coordinate] = val;\n  }\n};\n\n\nDevices = {\n\n  // Nunchuk\n  \"RVL-004\": {\n    address: 0x52,\n    bytes: 6,\n    delay: 100,\n    setup: [\n      [0x40, 0x00]\n    ],\n    preread: [\n      [0x00]\n    ],\n    // device.read.call(this);\n    read: function() {\n      var axes = [\"x\", \"y\", \"z\"];\n\n      [\n        this.joystick,\n        this.accelerometer\n      ].forEach(function(component) {\n        axes.forEach(function(axis) {\n          var delta = \"d\" + axis;\n          if (typeof component[delta] !== \"undefined\") {\n            if (Math.abs(component[delta]) > this.threshold) {\n              Change.component.call(component, axis);\n            }\n          }\n        }, this);\n      }, this);\n    },\n    // Call as:\n    // device.initialize.call(this);\n    initialize: function() {\n      this.joystick = new Wii.Components.Joystick(this);\n      this.accelerometer = new Wii.Components.Accelerometer(this);\n      this.c = new Wii.Components.Button(\"c\", this);\n      this.z = new Wii.Components.Button(\"z\", this);\n    },\n    data: function(data) {\n      // TODO: Shift state management to weakmap, this\n      //       should only update an entry in the map\n      //\n\n      if (data[0] !== 254 && data[1] !== 254 && data[2] !== 254) {\n\n        // Byte 0x00 :  X-axis data of the joystick\n        Update.component.call(\n          this.joystick,\n          \"x\", decodeByte(data[0]) << 2\n        );\n\n        // Byte 0x01 :  Y-axis data of the joystick\n        Update.component.call(\n          this.joystick,\n          \"y\", decodeByte(data[1]) << 2\n        );\n\n        // Byte 0x02 :  X-axis data of the accellerometer sensor\n        Update.component.call(\n          this.accelerometer,\n          \"x\", decodeByte(data[2]) << 2\n        );\n\n        // Byte 0x03 :  Y-axis data of the accellerometer sensor\n        Update.component.call(\n          this.accelerometer,\n          \"y\", decodeByte(data[3]) << 2\n        );\n\n        // Byte 0x04 :  Z-axis data of the accellerometer sensor\n        Update.component.call(\n          this.accelerometer,\n          \"z\", decodeByte(data[4]) << 2\n        );\n\n        // Update Z button\n        // Grab the first bit of the sixth byte\n        Update.button.call(\n          this.z, (decodeByte(data[5]) & 0x01) === 0\n        );\n\n        // Update C button\n        // Grab the second bit of the sixth byte\n        Update.button.call(\n          this.c, (decodeByte(data[5]) & 0x02) === 0\n        );\n\n        // Update last data array cache\n        last.set(this, data);\n      }\n    }\n  },\n\n  // Classic Controller\n  \"RVL-005\": {\n    address: 0x52,\n    bytes: 6,\n    delay: 100,\n    setup: [\n      [0x40, 0x00]\n    ],\n    preread: [\n      [0x00]\n    ],\n\n    // read: function( this ) {\n    //   var axes = [ \"x\", \"y\", \"z\" ];\n\n    //   [ this.joystick.left, this.joystick.right ].forEach(function( component ) {\n    //     axes.forEach( function( axis ) {\n    //       var delta = \"d\" + axis;\n    //       if ( typeof component[ delta ] !== \"undefined\" ) {\n    //         if ( Math.abs( component[ delta ] ) > this.threshold ) {\n    //           Change.component.call( component, axis );\n    //         }\n    //       }\n    //     }, this );\n    //   }, this );\n    // },\n    initialize: function() {\n\n      this.joystick = {\n        left: new Wii.Components.Joystick(this),\n        right: new Wii.Components.Joystick(this)\n      };\n\n      // obj.direction_pad = new Wii.DirectionPad( obj );\n      [\n        \"y\", \"x\", \"up\", \"down\", \"left\", \"right\",\n        \"a\", \"b\", \"l\", \"r\", \"zl\", \"zr\", \"start\", \"home\", \"select\"\n      ].forEach(function(id) {\n\n        this[id] = new Wii.Components.Button(id, this);\n\n      }, this);\n    },\n    data: function(data) {\n      // TODO: Shift state management to weakmap, this\n      //       should only update an entry in the map\n      if (data[0] !== 254 && data[1] !== 254 && data[2] !== 254) {\n\n        // LEFT/RIGHT\n        Update.button.call(\n          this.l, (decodeByte(data[4]) & 0x20) === 0\n        );\n\n        Update.button.call(\n          this.r, (decodeByte(data[4]) & 0x02) === 0\n        );\n\n        // Direction\n        Update.button.call(\n          this.up, (decodeByte(data[5]) & 0x01) === 0\n        );\n\n        Update.button.call(\n          this.left, (decodeByte(data[5]) & 0x02) === 0\n        );\n\n        Update.button.call(\n          this.down, (decodeByte(data[4]) & 0x40) === 0\n        );\n\n        Update.button.call(\n          this.right, (decodeByte(data[4]) & 0x80) === 0\n        );\n\n        // Z*\n        Update.button.call(\n          this.zr, (decodeByte(data[5]) & 0x04) === 0\n        );\n\n        Update.button.call(\n          this.zl, (decodeByte(data[5]) & 0x80) === 0\n        );\n\n        // X/Y\n        Update.button.call(\n          this.x, (decodeByte(data[5]) & 0x08) === 0\n        );\n\n        Update.button.call(\n          this.y, (decodeByte(data[5]) & 0x20) === 0\n        );\n\n        // A/B\n        Update.button.call(\n          this.a, (decodeByte(data[5]) & 0x10) === 0\n        );\n\n        Update.button.call(\n          this.b, (decodeByte(data[5]) & 0x40) === 0\n        );\n\n        // MENU\n        Update.button.call(\n          this.select, (decodeByte(data[4]) & 0x10) === 0\n        );\n\n        Update.button.call(\n          this.start, (decodeByte(data[4]) & 0x04) === 0\n        );\n\n        Update.button.call(\n          this.home, (decodeByte(data[4]) & 0x08) === 0\n        );\n\n\n        Update.component.call(\n          this.joystick.left,\n          \"x\", decodeByte(data[0]) & 0x3f\n        );\n\n        // Byte 0x01 :  Y-axis data of the joystick\n        Update.component.call(\n          this.joystick.left,\n          \"y\", decodeByte(data[0]) & 0x3f\n        );\n\n        Update.component.call(\n          this.joystick.right,\n          \"x\", ((data[0] & 0xc0) >> 3) + ((data[1] & 0xc0) >> 5) + ((data[2] & 0x80) >> 7)\n        );\n\n        Update.component.call(\n          this.joystick.right,\n          \"y\", data[2] & 0x1f\n        );\n\n        // Update last data array cache\n        last.set(this, data);\n      }\n    }\n  }\n};\n\n\nWii.Nunchuk = function(opts) {\n  opts = opts || {};\n  opts.device = \"RVL-004\";\n\n  return new Wii(opts);\n};\n\nWii.Classic = function(opts) {\n  opts = opts || {};\n  opts.device = \"RVL-005\";\n\n  return new Wii(opts);\n};\n\nmodule.exports = Wii;\n","/home/travis/build/npmtest/node-npmtest-johnny-five/node_modules/johnny-five/lib/reflectancearray.js":"var Board = require(\"./board\"),\n  events = require(\"events\"),\n  util = require(\"util\"),\n  __ = require(\"./fn\"),\n  Led = require(\"./led\"),\n  Sensor = require(\"./sensor\");\n\nvar CALIBRATED_MIN_VALUE = 0;\nvar CALIBRATED_MAX_VALUE = 1000;\nvar LINE_ON_THRESHOLD = 200;\nvar LINE_NOISE_THRESHOLD = 50;\n\nvar priv = new Map();\n\n// Private methods\nfunction initialize() {\n  var self = this,\n    state = priv.get(this);\n\n  if (typeof this.opts.emitter === \"undefined\") {\n    throw new Error(\"Emitter pin is required\");\n  }\n\n  if (!this.pins || this.pins.length === 0) {\n    throw new Error(\"Pins must be defined\");\n  }\n\n  state.emitter = new Led({\n    board: this.board,\n    pin: this.opts.emitter\n  });\n\n  state.sensorStates = this.pins.map(function(pin) {\n    var sensorState = {\n      sensor: new Sensor({\n        board: this.board,\n        freq: this.freq,\n        pin: pin\n      }),\n      rawValue: 0,\n      dataReceived: false\n    };\n\n\n    sensorState.sensor.on(\"data\", function() {\n      onData.call(self, sensorState, this.value);\n    });\n\n    return sensorState;\n  }, this);\n}\n\nfunction onData(sensorState, value) {\n  var allRead, state = priv.get(this);\n\n  sensorState.dataReceived = true;\n  sensorState.rawValue = value;\n\n  allRead = state.sensorStates.every(function(sensorState) {\n    return sensorState.dataReceived;\n  });\n\n  if (allRead) {\n    this.emit(\"data\", this.raw);\n\n    if (state.autoCalibrate) {\n      setCalibration(state.calibration, this.raw);\n    }\n\n    if (this.isCalibrated) {\n      this.emit(\"calibratedData\", this.values);\n      this.emit(\"line\", this.line);\n    }\n\n    state.sensorStates.forEach(function(sensorState) {\n      sensorState.dataReceived = false;\n    });\n  }\n}\n\nfunction setCalibration(calibration, values) {\n  values.forEach(function(value, i) {\n    if (calibration.min[i] === undefined || value < calibration.min[i]) {\n      calibration.min[i] = value;\n    }\n\n    if (calibration.max[i] === undefined || value > calibration.max[i]) {\n      calibration.max[i] = value;\n    }\n  });\n}\n\nfunction calibrationIsValid(calibration, sensors) {\n  return calibration &&\n    (calibration.max && calibration.max.length === sensors.length) &&\n    (calibration.min && calibration.min.length === sensors.length);\n}\n\n\nfunction calibratedValues() {\n  return this.raw.map(function(value, i) {\n    var max = this.calibration.max[i],\n      min = this.calibration.min[i];\n\n    var scaled = __.scale(value, min, max, CALIBRATED_MIN_VALUE, CALIBRATED_MAX_VALUE);\n    return __.constrain(scaled, CALIBRATED_MIN_VALUE, CALIBRATED_MAX_VALUE);\n  }, this);\n}\n\nfunction maxLineValue() {\n  return (this.sensors.length - 1) * CALIBRATED_MAX_VALUE;\n}\n\n// Returns a value between 0 and (n-1)*1000\n// Given 5 sensors, the value will be between 0 and 4000\nfunction getLine(whiteLine) {\n  var onLine = false;\n  var avg = 0,\n    sum = 0;\n  var state = priv.get(this);\n\n  whiteLine = !!whiteLine;\n\n  this.values.forEach(function(value, i) {\n    value = whiteLine ? (CALIBRATED_MAX_VALUE - value) : value;\n\n    if (value > LINE_ON_THRESHOLD) {\n      onLine = true;\n    }\n\n    if (value > LINE_NOISE_THRESHOLD) {\n      avg += value * i * CALIBRATED_MAX_VALUE;\n      sum += value;\n    }\n  });\n\n  if (!onLine) {\n    var maxPoint = maxLineValue.call(this) + 1;\n    var centerPoint = maxPoint / 2;\n\n    return state.lastLine < centerPoint ? 0 : maxPoint;\n  }\n\n  return state.lastLine = Math.floor(avg / sum);\n}\n\n// Constructor\nfunction ReflectanceArray(opts) {\n\n  if (!(this instanceof ReflectanceArray)) {\n    return new ReflectanceArray(opts);\n  }\n\n  this.opts = Board.Options(opts);\n\n  Board.Component.call(\n    this, this.opts, {\n      requestPin: false\n    }\n  );\n\n  // Read event throttling\n  this.freq = opts.freq || 25;\n\n  // Make private data entry\n  var state = {\n    lastLine: 0,\n    isOn: false,\n    calibration: {\n      min: [],\n      max: []\n    },\n    autoCalibrate: opts.autoCalibrate || false\n  };\n\n  priv.set(this, state);\n\n  initialize.call(this);\n\n  Object.defineProperties(this, {\n    isOn: {\n      get: function() {\n        return state.emitter.isOn;\n      }\n    },\n    isCalibrated: {\n      get: function() {\n        return calibrationIsValid(this.calibration, this.sensors);\n      }\n    },\n    isOnLine: {\n      get: function() {\n        var line = this.line;\n        return line > CALIBRATED_MIN_VALUE && line < maxLineValue.call(this);\n      }\n    },\n    sensors: {\n      get: function() {\n        return state.sensorStates.map(function(sensorState) {\n          return sensorState.sensor;\n        });\n      }\n    },\n    calibration: {\n      get: function() {\n        return state.calibration;\n      }\n    },\n    raw: {\n      get: function() {\n        return state.sensorStates.map(function(sensorState) {\n          return sensorState.rawValue;\n        });\n      }\n    },\n    values: {\n      get: function() {\n        return this.isCalibrated ? calibratedValues.call(this) : this.raw;\n      }\n    },\n    line: {\n      get: function() {\n        return this.isCalibrated ? getLine.call(this) : 0;\n      }\n    }\n  });\n}\n\nutil.inherits(ReflectanceArray, events.EventEmitter);\n\n// Public methods\nReflectanceArray.prototype.enable = function() {\n  var state = priv.get(this);\n\n  state.emitter.on();\n\n  return this;\n};\n\nReflectanceArray.prototype.disable = function() {\n  var state = priv.get(this);\n\n  state.emitter.off();\n\n  return this;\n};\n\n// Calibrate will store the min/max values for this sensor array\n// It should be called many times in order to get a lot of readings\n// on light and dark areas.  See calibrateUntil for a convenience\n// for looping until a condition is met.\nReflectanceArray.prototype.calibrate = function() {\n  var state = priv.get(this);\n\n  this.once(\"data\", function(values) {\n    setCalibration(state.calibration, values);\n\n    this.emit(\"calibrated\");\n  });\n\n  return this;\n};\n\n// This will continue to calibrate until the predicate is true.\n// Allows the user to calibrate n-times, or wait for user input,\n// or base it on calibration heuristics.  However the user wants.\nReflectanceArray.prototype.calibrateUntil = function(predicate) {\n  var loop = function() {\n    this.calibrate();\n    this.once(\"calibrated\", function() {\n      if (!predicate()) {\n        loop();\n      }\n    });\n  }.bind(this);\n\n  loop();\n\n  return this;\n};\n\n// Let the user tell us what the calibration data is\n// This allows the user to save calibration data and\n// reload it without needing to calibrate every time.\nReflectanceArray.prototype.loadCalibration = function(calibration) {\n  var state = priv.get(this);\n\n  if (!calibrationIsValid(calibration, this.sensors)) {\n    throw new Error(\"Calibration data not properly set: {min: [], max: []}\");\n  }\n\n  state.calibration = calibration;\n\n  return this;\n};\n\nmodule.exports = ReflectanceArray;\n","/home/travis/build/npmtest/node-npmtest-johnny-five/node_modules/johnny-five/lib/array-includes-shim.js":"Object.defineProperty(Array.prototype, \"includes\", {\n  value: function(entry) {\n    return this.indexOf(entry) !== -1;\n  },\n  enumerable: false,\n  configurable: false,\n  writable: false\n});\n"}